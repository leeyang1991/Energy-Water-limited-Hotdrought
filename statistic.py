# coding=utf-8import matplotlib.pyplot as pltfrom meta_info import *result_root_this_script = join(results_root, 'statistic')class Dataframe_func:    def __init__(self,df,is_clean_df=True):        print('add lon lat')        df = self.add_lon_lat(df)        print('add landcover')        df = self.add_GLC_landcover_data_to_df(df)        print('add NDVI mask')        df = self.add_NDVI_mask(df)        print('add Aridity Index')        df = self.add_AI_to_df(df)        print('add ELI')        df = self.add_ELI_to_df(df)        print('add ELI_reclass')        df = self.ELI_reclass(df)        print('add AI_reclass')        df = self.AI_reclass(df)        # print('add ELI_significance')        # df = self.add_ELI_significance(df)        print('add koppen')        df = self.add_koppen(df)        if is_clean_df == True:            df = self.clean_df(df)        self.df = df    def clean_df(self,df):        df = df[df['lat']>=30]        # df = df[df['landcover_GLC'] != 'Crop']        df = df[df['NDVI_MASK'] == 1]        # df = df[df['ELI_significance'] == 1]        return df    def add_GLC_landcover_data_to_df(self, df):        f = join(data_root,'GLC2000/reclass_lc_dic.npy')        val_dic=T.load_npy(f)        val_list = []        for i, row in tqdm(df.iterrows(), total=len(df)):            pix = row['pix']            if not pix in val_dic:                val_list.append(np.nan)                continue            vals = val_dic[pix]            val_list.append(vals)        df['landcover_GLC'] = val_list        return df    def add_NDVI_mask(self,df):        # f =rf'C:/Users/pcadmin/Desktop/Data/Base_data/NDVI_mask.tif'        f = join(data_root, 'NDVI4g/NDVI_mask.tif')        print(f)        array, originX, originY, pixelWidth, pixelHeight = ToRaster().raster2array(f)        array = np.array(array, dtype=float)        val_dic = DIC_and_TIF().spatial_arr_to_dic(array)        f_name = 'NDVI_MASK'        print(f_name)        # exit()        val_list = []        for i, row in tqdm(df.iterrows(), total=len(df)):            pix = row['pix']            if not pix in val_dic:                val_list.append(np.nan)                continue            vals = val_dic[pix]            if vals < -99:                val_list.append(np.nan)                continue            val_list.append(vals)        df[f_name] = val_list        return df    def add_AI_to_df(self, df):        f = join(data_root, 'Aridity_Index/aridity_index.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)        df = T.add_spatial_dic_to_df(df, spatial_dict, 'aridity_index')        return df    def add_lon_lat(self,df):        df = T.add_lon_lat_to_df(df, DIC_and_TIF())        return df    def add_ELI_to_df(self,df):        import analysis        f = join(analysis.Water_energy_limited_area().this_class_tif, 'ELI/GLEAM-ET_ERA-SM_Temperature.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)        df = T.add_spatial_dic_to_df(df, spatial_dict, 'ELI')        return df    def ELI_reclass(self,df):        ELI_class = []        for i, row in tqdm(df.iterrows(), total=len(df)):            ELI = row['ELI']            if ELI < 0:                ELI_class.append('Energy-Limited')            elif ELI > 0:                ELI_class.append('Water-Limited')            else:                ELI_class.append(np.nan)        df['ELI_class'] = ELI_class        return df    def AI_reclass(self,df):        AI_class = []        for i,row in df.iterrows():            AI = row['aridity_index']            if AI < 0.65:                AI_class.append('Arid')            elif AI >= 0.65:                AI_class.append('Humid')            elif np.isnan(AI):                AI_class.append(np.nan)            else:                print(AI)                raise ValueError('AI error')        df['AI_class'] = AI_class        return df    def add_koppen(self,df):        f = join(data_root, 'koppen/koppen_reclass_dic.npy')        val_dic = T.load_npy(f)        df = T.add_spatial_dic_to_df(df, val_dic, 'Koppen')        return df    # def add_ELI_significance(self,df):    #     from Chapter5 import analysis    #     f = join(Water_energy_limited_area().this_class_tif, 'significant_pix_r/ELI_Temp_significance.tif')    #     spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)    #     df = T.add_spatial_dic_to_df(df, spatial_dict, 'ELI_significance')    #    #     return dfclass Dataframe:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Dataframe', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'dataframe.df')        pass    def run(self):        df = self.copy_df()        df = self.__gen_df_init()        df = Dataframe_func(df).df        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def copy_df(self):        import analysis        dff = analysis.Resistance_Resilience().dff        df = T.load_df(dff)        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        return dfclass Compensation_Excerbation:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Compensation_Excerbation', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Compensation_Excerbation.df')        pass    def run(self):        df = self.__gen_df_init()        # calculate        # df = self.identification_two_modes(df)        # df = self.magnitude(df)        # df = self.add_NDVI_origin_process(df)        # df = self.add_NDVI_percentage_process(df)        # T.save_df(df, self.dff)        # T.df_to_excel(df, self.dff)        # statistic        # self.plot_different_modes(df)        # self.two_mode_ratio(df)        # self.spatial_two_mode_magnitude(df)        # self.plot_spatial_two_mode_magnitude()        # self.two_region_delta_bar()        # self.two_region_trajectory(df)        # self.spatial_two_mode_ratio(df)        # self.two_region_ratio(df)        # self.ELI_gradient(df)        # self.ELI_gradient_ratio(df)        # self.Drought_year_spatial_tif(df)        # self.plot_Drought_year_spatial_tif()        # self.pdf_Drought_year_spatial_tif()        # self.Drought_year_NDVI_percentage_spatial_tif(df)        # self.plot_Drought_year_NDVI_percentage_spatial_tif()        # self.bar_Drought_year_spatial_tif()        self.bar_Drought_year_NDVI_percentage_spatial_tif()        # self.AI_gradient_Drought_year_spatial_tif()        # self.rs_rt_area_ratio_bar(df)        # self.delta_area_ratio_bar()        # self.delta_area_ratio_gradient_bar()        # self.delta_area_statistic()        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def identification_two_modes(self,df):        mode_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            drought_year = row['drought_year']            NDVI_progress = row['NDVI_progress'].tolist()            NDVI_progress = np.array(NDVI_progress)            NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            drought_year_NDVI = NDVI_progress_reshape[1]            max_NDVI = np.nanmax(drought_year_NDVI)            min_NDVI = np.nanmin(drought_year_NDVI)            max_NDVI_arg = np.nanargmax(drought_year_NDVI)            min_NDVI_arg = np.nanargmin(drought_year_NDVI)            if max_NDVI > 0 and min_NDVI < 0:                if abs(max_NDVI) > abs(min_NDVI):                    ratio = abs(max_NDVI) / abs(min_NDVI)                else:                    ratio = abs(min_NDVI) / abs(max_NDVI)                # print('ratio',ratio)                if max_NDVI_arg < min_NDVI_arg:                    if max_NDVI_arg <= 2 and min_NDVI_arg >= 2:                        if ratio < 3:                            mode = 'Compensation'                        else:                            mode = 'other'                    else:                        mode = 'other'                else:                    mode = 'other'            elif min_NDVI> 0:                mode = 'Positive_effect'            elif max_NDVI < 0:                mode = 'Exacerbation'            else:                raise IOError('error')            mode_list.append(mode)        df['Compensation_Exacerbation'] = mode_list        return df    def magnitude(self,df):        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        magnitude_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            mode = row['Compensation_Exacerbation']            NDVI_progress = row['NDVI_progress'].tolist()            NDVI_progress = np.array(NDVI_progress)            NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            drought_year_NDVI = NDVI_progress_reshape[1]            max_NDVI = np.nanmax(drought_year_NDVI)            min_NDVI = np.nanmin(drought_year_NDVI)            if mode == 'Compensation':                magnitude = max_NDVI - min_NDVI            elif mode == 'Exacerbation':                magnitude = min_NDVI            elif mode == 'Positive_effect':                magnitude = max_NDVI            elif mode == 'other':                magnitude = np.nan            else:                raise IOError('error')            magnitude_list.append(magnitude)        df['magnitude'] = magnitude_list        return df    def plot_different_modes(self,df):        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        for mode in Compensation_Exacerbation_mode_list:            df_mode = df[df['Compensation_Exacerbation'] == mode]            vals_list = []            for i,row in df_mode.iterrows():                NDVI_progress = row['NDVI_progress'].tolist()                NDVI_progress = np.array(NDVI_progress)                NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                drought_year_NDVI = NDVI_progress_reshape[1]                vals_list.append(drought_year_NDVI)            mean = np.nanmean(vals_list,axis=0)            std = np.nanstd(vals_list,axis=0) / 4.            plt.figure()            plt.plot(mean,label=mode)            plt.fill_between(range(len(mean)),mean-std,mean+std,alpha=0.3)            plt.legend()        plt.show()    def two_mode_ratio(self,df):        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        for drt in drought_type_list:            for ELI_class in ELI_class_list:                df_drt = df[df['drought_type'] == drt]                df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                # print(drt,ELI_class,len(df_ELI))                mode_list = df_ELI['Compensation_Exacerbation'].tolist()                print('------------------')                print(drt,ELI_class,len(mode_list))                print('------------------')                for mode in Compensation_Exacerbation_mode_list:                    mode_count = mode_list.count(mode)                    ratio = mode_count / len(mode_list)                    print(mode,ratio)    def spatial_two_mode_magnitude(self,df):        outdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        T.mk_dir(outdir)        pix_list = T.get_df_unique_val_list(df,'pix')        # print(len(pix_list))        drought_type_list = global_drought_type_list        drought_year_list = range(1, 5)        for drought_year_i in drought_year_list:            df_group_dict = T.df_groupby(df,'pix')            spatial_dict = {}            for pix in tqdm(pix_list):                df_pix = df_group_dict[pix]                df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                if len(df_hot) == 0 or len(df_normal) == 0:                    continue                # NDVI_progress = row['NDVI_progress'].tolist()                # NDVI_progress = np.array(NDVI_progress)                # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                # drought_year_NDVI = NDVI_progress_reshape[1]                NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                mean_hot = np.nanmean(NDVI_progress_hot,axis=0)                mean_normal = np.nanmean(NDVI_progress_normal,axis=0)                mean_hot_reshape = np.array(mean_hot).reshape(-1,6)                mean_normal_reshape = np.array(mean_normal).reshape(-1,6)                mean_hot_drought_year = mean_hot_reshape[1:drought_year_i+1]                mean_normal_drought_year = mean_normal_reshape[1:drought_year_i+1]                mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                spatial_dict[pix] = delta            outf = join(outdir, f'spatial_two_mode_magnitude_{drought_year_i}.tif')            DIC_and_TIF().pix_dic_to_tif(spatial_dict,outf)            # arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)            # plt.imshow(arr,vmin=-1,vmax=1,cmap='bwr_r',interpolation='nearest')            # plt.colorbar()            # DIC_and_TIF().plot_back_ground_arr(global_land_tif)            # plt.show()    def plot_spatial_two_mode_magnitude(self):        fdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        outdir = join(self.this_class_png, 'spatial_two_mode_magnitude')        T.mk_dir(outdir)        for f in T.listdir(fdir):            fpath = join(fdir,f)            outf = join(outdir,f.replace('.tif','.png'))            m,ret = Plot().plot_ortho(fpath,vmin=-1,vmax=1,cmap='RdBu')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def two_region_delta_bar(self):        fdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        spatial_dicts = {}        key_list = []        for f in T.listdir(fdir):            fpath = join(fdir,f)            spatial_dict = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dicts[f.replace('.tif','')] = spatial_dict            key_list.append(f.replace('.tif',''))        df = T.spatial_dics_to_df(spatial_dicts)        df = Dataframe_func(df).df        flag = 0        for ELI_class in ELI_class_list:            # plt.figure(figsize=(12, 6))            df_ELI = df[df['ELI_class'] == ELI_class]            mean_list = []            err_list = []            for key in key_list:                vals = df_ELI[key].tolist()                mean = np.nanmean(vals)                std = np.nanstd(vals) / 8                mean_list.append(mean)                err_list.append(std)            x = range(len(key_list))            x = np.array(x)            # plt.errorbar(x+flag*0.2,mean_list,yerr=err_list,label=ELI_class)            plt.errorbar(x+flag*0.2,mean_list,yerr=err_list,label=ELI_class)            plt.xticks(range(len(key_list)),key_list)        plt.legend()        plt.show()    def spatial_two_mode_ratio(self,df):        pix_list = T.get_df_unique_val_list(df,'pix')        # print(len(pix_list))        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df,'pix')        spatial_dict = {}        for pix in tqdm(pix_list):            df_pix = df_group_dict[pix]            df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']            df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']            if len(df_hot) == 0 or len(df_normal) == 0:                continue            # NDVI_progress = row['NDVI_progress'].tolist()            # NDVI_progress = np.array(NDVI_progress)            # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            # drought_year_NDVI = NDVI_progress_reshape[1]            NDVI_progress_hot = df_hot['NDVI_progress'].tolist()            NDVI_progress_normal = df_normal['NDVI_progress'].tolist()            mean_hot = np.nanmean(NDVI_progress_hot,axis=0)            mean_normal = np.nanmean(NDVI_progress_normal,axis=0)            mean_hot_reshape = np.array(mean_hot).reshape(-1,6)            mean_normal_reshape = np.array(mean_normal).reshape(-1,6)            mean_hot_drought_year = mean_hot_reshape[1]            mean_normal_drought_year = mean_normal_reshape[1]            mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)            Compensation_num = 0            for i,row in df_hot.iterrows():                NDVI_progress_hot_i = row['NDVI_progress'].tolist()                mean_hot_reshape_i = np.array(NDVI_progress_hot_i).reshape(-1, 6)                drought_year_NDVI_i = mean_hot_reshape_i[1]                mean_drought_year_NDVI_i = np.nanmean(drought_year_NDVI_i)                delta = mean_drought_year_NDVI_i - mean_normal_drought_NDVI                if delta > 0:                    mode = 'Compensation'                    mode_num = 1                elif delta < 0:                    mode = 'Exacerbation'                    mode_num = -1                else:                    mode = 'other'                    mode_num = 0                if mode_num == 1:                    Compensation_num += 1            ratio = Compensation_num / len(df_hot)            spatial_dict[pix] = ratio        arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)        plt.imshow(arr,vmin=0,vmax=1,cmap='RdBu',interpolation='nearest')        plt.colorbar()        DIC_and_TIF().plot_back_ground_arr(global_land_tif)        plt.show()    def ELI_gradient(self,df):        pix_list = T.get_df_unique_val_list(df, 'pix')        # print(len(pix_list))        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df, 'pix')        spatial_dict = {}        for pix in tqdm(pix_list):            df_pix = df_group_dict[pix]            df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']            df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']            if len(df_hot) == 0 or len(df_normal) == 0:                continue            ELI = df_pix['ELI'].tolist()[0]            aridity_index = df_pix['aridity_index'].tolist()[0]            # NDVI_progress = row['NDVI_progress'].tolist()            # NDVI_progress = np.array(NDVI_progress)            # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            # drought_year_NDVI = NDVI_progress_reshape[1]            NDVI_progress_hot = df_hot['NDVI_progress'].tolist()            NDVI_progress_normal = df_normal['NDVI_progress'].tolist()            mean_hot = np.nanmean(NDVI_progress_hot, axis=0)            mean_normal = np.nanmean(NDVI_progress_normal, axis=0)            mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)            mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)            mean_hot_drought_year = mean_hot_reshape[1]            mean_normal_drought_year = mean_normal_reshape[1]            mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)            mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)            delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI            # result_dict = {'ELI': ELI, 'delta': delta}            result_dict = {'ELI': aridity_index, 'delta': delta}            spatial_dict[pix] = result_dict        df = T.dic_to_df(spatial_dict,'pix')        df = df[df['ELI']<3]        x = df['ELI'].tolist()        y = df['delta'].tolist()        # KDE_plot().plot_scatter_hex(x,y,xlim=(-1,1),ylim=(-1,1))        a, b, r, p = KDE_plot().plot_scatter(x,y,plot_fit_line=True,s=1)        print(a,b,r,p)        plt.show()    def ELI_gradient_ratio(self,df):        outdir = join(self.this_class_png,'ELI_gradient_ratio')        T.mk_dir(outdir)        pix_list = T.get_df_unique_val_list(df, 'pix')        # print(len(pix_list))        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df, 'pix')        drought_year = range(1,5)        for drought_year_i in drought_year:            spatial_dict = {}            for pix in tqdm(pix_list):                df_pix = df_group_dict[pix]                df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                if len(df_hot) == 0 or len(df_normal) == 0:                    continue                ELI = df_pix['ELI'].tolist()[0]                aridity_index = df_pix['aridity_index'].tolist()[0]                # NDVI_progress = row['NDVI_progress'].tolist()                # NDVI_progress = np.array(NDVI_progress)                # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                # drought_year_NDVI = NDVI_progress_reshape[1]                NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                mean_hot = np.nanmean(NDVI_progress_hot, axis=0)                mean_normal = np.nanmean(NDVI_progress_normal, axis=0)                mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)                mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)                mean_hot_drought_year = mean_hot_reshape[1:drought_year_i+1]                mean_normal_drought_year = mean_normal_reshape[1:drought_year_i+1]                mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                # result_dict = {'ELI': ELI, 'delta': delta}                result_dict = {'ELI': aridity_index, 'delta': delta}                spatial_dict[pix] = result_dict            df = T.dic_to_df(spatial_dict,'pix')            df = df[df['ELI']<3]            ELI_bins = np.arange(0.1,3,0.2)            df_group,bins_list_str = T.df_bin(df,'ELI',ELI_bins)            x = []            y = []            for name,df_group_i in df_group:                x_i = name[0].left                vals = df_group_i['delta'].tolist()                # mean = np.nanmean(vals)                vals = np.array(vals)                positive_vals_count = len(vals[vals>0])                ratio = positive_vals_count/len(vals)                x.append(x_i)                y.append(ratio)            y_smooth = SMOOTH().smooth_convolve(y,window_len=5)            # y_smooth = y            plt.plot(x,y_smooth,label=drought_year_i)        plt.legend()        outf = join(outdir,'ELI_gradient_ratio_5.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()        # x = df['ELI'].tolist()        # y = df['delta'].tolist()        # # KDE_plot().plot_scatter_hex(x,y,xlim=(-1,1),ylim=(-1,1))        # a, b, r, p = KDE_plot().plot_scatter(x,y,plot_fit_line=True,s=1)        # print(a,b,r,p)        # plt.show()    def two_region_trajectory(self,df):        outdir = join(self.this_class_png,'two_region_trajectory')        T.mk_dir(outdir)        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        for ELI in ELI_class_list:            plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))            for drt in drought_type_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI_drt = df_ELI[df_ELI['drought_type']==drt]                NDVI = df_ELI_drt['NDVI_progress'].tolist()                NDVI = np.array(NDVI)                mean = np.nanmean(NDVI,axis=0)                std = np.nanstd(NDVI,axis=0) / 8                plt.plot(mean,label=drt)                plt.fill_between(np.arange(len(mean)),mean-std,mean+std,alpha=0.3)                plt.xticks(np.arange(len(mean))[::6],np.arange(-1,5))            outf = join(outdir,'{}.pdf'.format(ELI))            # plt.legend()            plt.savefig(outf)            plt.close()        T.open_path_and_file(outdir)        pass    def Drought_year_spatial_tif(self,df):        outdir = join(self.this_class_tif,'Drought_year_spatial_tif')        T.mk_dir(outdir)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type']==drt]            df_pix = T.df_groupby(df_drt,'pix')            spatial_dict = {}            for pix in tqdm(df_pix,desc=drt):                df_pix_i = df_pix[pix]                NDVI_progress = df_pix_i['NDVI_progress'].tolist()                mean_progress = np.nanmean(NDVI_progress, axis=0)                mean_progress_reshape = np.array(mean_progress).reshape(-1, 6)                mean_progress_reshape_drought_year = mean_progress_reshape[1]                mean_drought_year_NDVI = np.nanmean(mean_progress_reshape_drought_year)                spatial_dict[pix] = mean_drought_year_NDVI            outf = join(outdir,'{}.tif'.format(drt))            DIC_and_TIF().pix_dic_to_tif(spatial_dict,outf)    def plot_Drought_year_spatial_tif(self):        fdir = join(self.this_class_tif,'Drought_year_spatial_tif')        outdir = join(self.this_class_png,'Drought_year_spatial_tif')        T.mk_dir(outdir)        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            outpath = join(outdir,f'{f.replace(".tif","")}.png')            Plot().plot_ortho(fpath,vmin=-1,vmax=1,cmap='RdBu')            plt.savefig(outpath,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def pdf_Drought_year_spatial_tif(self):        delta_fpath = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        fdir = join(self.this_class_tif,'Drought_year_spatial_tif')        outdir = join(self.this_class_png,'pdf_Drought_year_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            key = f.replace('.tif','')            spatial_dic = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dics[key] = spatial_dic        spatial_dics['delta'] = DIC_and_TIF().spatial_tif_to_dic(delta_fpath)        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        ELI_class_list = global_ELI_class_list        for key in spatial_dics:            plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))            for ELI in ELI_class_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI = df_ELI[df_ELI[key]>-2]                df_ELI = df_ELI[df_ELI[key]<2]                vals = df_ELI[key].tolist()                x1, y1 = Plot().plot_hist_smooth(vals,bins=100,alpha=0)                plt.plot(x1,y1,label=ELI)            plt.legend()            plt.title(key)            outf = join(outdir,'{}.pdf'.format(key))            # plt.savefig(outf)            # plt.close()            plt.show()        # T.open_path_and_file(outdir)    def add_NDVI_origin_process(self,df):        # df = Load_dataframe()        NDVI_spatial_dict,_ = Load_Data().NDVI_origin()        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI = np.array(NDVI,dtype=float)            NDVI[NDVI>10000] = np.nan            NDVI[NDVI<0] = np.nan            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['NDVI_origin_progress'] = NDVI_list_all        return df    def climatology_percentage(self, vals):        '''        percentage        :param vals:        :return:        '''        pix_percentage = []        climatology_means = []        for m in range(1, 13):            one_mon = []            for i in range(len(vals)):                mon = i % 12 + 1                if mon == m:                    one_mon.append(vals[i])            mean = np.nanmean(one_mon)            climatology_means.append(mean)        for i in range(len(vals)):            mon = i % 12            mean_ = climatology_means[mon]            percentage = vals[i] / mean_ * 100 - 100            pix_percentage.append(percentage)        pix_percentage = np.array(pix_percentage)        return pix_percentage    def add_NDVI_percentage_process(self,df):        # df = Load_dataframe()        NDVI_spatial_dict,_ = Load_Data().NDVI_origin()        NDVI_percentage_spatial_dict = {}        for pix in tqdm(NDVI_spatial_dict):            NDVI = NDVI_spatial_dict[pix]            NDVI[NDVI > 10000] = np.nan            NDVI[NDVI < 0] = np.nan            if T.is_all_nan(NDVI):                continue            percentage = self.climatology_percentage(NDVI)            NDVI_percentage_spatial_dict[pix] = percentage        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI_percentage = NDVI_percentage_spatial_dict[pix]            NDVI_percentage = np.array(NDVI_percentage,dtype=float)            # plt.plot(NDVI_percentage)            # plt.show()            NDVI_gs = T.monthly_vals_to_annual_val(NDVI_percentage,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['NDVI_percentage_progress'] = NDVI_list_all        return df    def Drought_year_NDVI_percentage_spatial_tif(self,df):        outdir = join(self.this_class_tif,'Drought_year_NDVI_percentage_spatial_tif')        NDVI_data_dict = Load_Data().NDVI_origin()        T.mk_dir(outdir)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type']==drt]            df_pix = T.df_groupby(df_drt,'pix')            spatial_dict = {}            for pix in tqdm(df_pix,desc=drt):                df_pix_i = df_pix[pix]                NDVI_progress = df_pix_i['NDVI_percentage_progress'].tolist()                # plt.plot(NDVI_progress)                # plt.show()                mean_progress = np.nanmean(NDVI_progress, axis=0)                mean_progress_reshape = np.array(mean_progress).reshape(-1, 6)                mean_progress_reshape_drought_year = mean_progress_reshape[1]                mean_drought_year_NDVI = np.nanmean(mean_progress_reshape_drought_year)                if mean_drought_year_NDVI > 50:                    continue                if mean_drought_year_NDVI < -50:                    continue                spatial_dict[pix] = mean_drought_year_NDVI            outf = join(outdir,'{}.tif'.format(drt))            DIC_and_TIF().pix_dic_to_tif(spatial_dict,outf)        T.open_path_and_file(outdir)    def plot_Drought_year_NDVI_percentage_spatial_tif(self):        fdir = join(self.this_class_tif,'Drought_year_NDVI_percentage_spatial_tif')        outdir = join(self.this_class_png,'Drought_year_NDVI_percentage_spatial_tif')        T.mk_dir(outdir)        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            outpath = join(outdir,f'{f.replace(".tif","")}.png')            Plot().plot_ortho(fpath,vmin=-20,vmax=20,cmap='RdBu')            plt.savefig(outpath,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def bar_Drought_year_spatial_tif(self):        delta_fpath = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        fdir = join(self.this_class_tif,'Drought_year_spatial_tif')        outdir = join(self.this_class_png,'pdf_Drought_year_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            key = f.replace('.tif','')            spatial_dic = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dics[key] = spatial_dic        spatial_dics['delta'] = DIC_and_TIF().spatial_tif_to_dic(delta_fpath)        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        ELI_class_list = global_ELI_class_list        for key in spatial_dics:            plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))            for ELI in ELI_class_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI = df_ELI[df_ELI[key]>-2]                df_ELI = df_ELI[df_ELI[key]<2]                vals = df_ELI[key].tolist()                x1, y1 = Plot().plot_hist_smooth(vals,bins=100,alpha=0)                plt.plot(x1,y1,label=ELI)            plt.legend()            plt.title(key)            outf = join(outdir,'{}.pdf'.format(key))            # plt.savefig(outf)            # plt.close()            plt.show()        # T.open_path_and_file(outdir)    def bar_Drought_year_NDVI_percentage_spatial_tif(self):        fdir = join(self.this_class_tif,'Drought_year_NDVI_percentage_spatial_tif')        outdir = join(self.this_class_png,'Drought_year_NDVI_percentage_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            key = f.replace('.tif','')            spatial_dic = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dics[key] = spatial_dic        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        T.print_head_n(df)        # exit()        ELI_class_list = global_ELI_class_list        plt.figure(figsize=(15 * centimeter_factor, 6 * centimeter_factor))        for key in spatial_dics:            for ELI in ELI_class_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI = df_ELI[df_ELI[key]>-30]                df_ELI = df_ELI[df_ELI[key]<30]                vals = df_ELI[key].tolist()                vals = np.array(vals)                strong_positive_vals_count = len(vals[vals>5])                positive_vals_count = len(vals[vals>0])                negative_vals_count = len(vals[vals<0])                strong_negative_vals_count = len(vals[vals<-5])                total_count = len(vals)                strong_pos_ratio = strong_positive_vals_count / total_count * 100                pos_ratio = positive_vals_count / total_count * 100                neg_ratio = negative_vals_count / total_count * 100                strong_neg_ratio = strong_negative_vals_count / total_count * 100                plt.barh(f'{ELI}_{key}',strong_pos_ratio,color='g',zorder=1,linewidth=1,edgecolor='k',height=.5)                plt.barh(f'{ELI}_{key}',pos_ratio,color='g',zorder=0,linewidth=1,edgecolor='k',height=.5,alpha=0.05)                plt.barh(f'{ELI}_{key}',pos_ratio,color='none',zorder=2,linewidth=1,edgecolor='k',height=.5)                plt.barh(f'{ELI}_{key}',-neg_ratio,color='r',zorder=0,linewidth=1,edgecolor='k',height=.5,alpha=0.05)                plt.barh(f'{ELI}_{key}',-neg_ratio,color='none',zorder=2,linewidth=1,edgecolor='k',height=.5)                plt.barh(f'{ELI}_{key}',-strong_neg_ratio,color='r',zorder=1,linewidth=1,edgecolor='k',height=.5)                plt.text(pos_ratio,f'{ELI}_{key}',f'{pos_ratio:.0f} ({strong_pos_ratio:.0f})',ha='left',va='center')                plt.text(-neg_ratio,f'{ELI}_{key}',f'{neg_ratio:.0f} ({strong_neg_ratio:.0f})',ha='right',va='center')        plt.xlim(-200,200)        plt.tight_layout()        # plt.show()        outf = join(outdir,'bar_Drought_year_NDVI_percentage_spatial_tif.pdf')        plt.savefig(outf)        T.open_path_and_file(outdir)    def AI_gradient_Drought_year_spatial_tif(self):        delta_fpath = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        outdir = join(self.this_class_png,'AI_gradient_Drought_year_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        spatial_dics['delta'] = DIC_and_TIF().spatial_tif_to_dic(delta_fpath)        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        # ELI_class_list = global_ELI_class_list        key = 'delta'        # plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))        AI_bins = np.arange(0.1, 3, 0.1)        df_group,bins_list_str = T.df_bin(df, 'aridity_index', AI_bins)        x_list = []        y_list = []        error_list = []        for name,df_group_i in df_group:            vals = df_group_i[key].tolist()            mean = np.nanmean(vals)            error = np.nanstd(vals) / 4            x = name[0].left            x_list.append(x)            y_list.append(mean)            error_list.append(error)        # plt.plot(x_list,y_list)        plt.errorbar(x_list,y_list,yerr=error_list,capsize=2)        plt.ylim(-0.55,0.55)        # plt.show()        # outf = join(outdir,'{}.pdf'.format(key))        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)    def rs_rt_area_ratio_bar(self,df):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_bar')        T.mk_dir(outdir)        df = Load_dataframe()        threshold_list = [-np.inf,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,np.inf]        # threshold_list = [-np.inf,-0.2,-0.1,-0.05]        threshold_list = np.array(threshold_list)        threshold_list = threshold_list + 1        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        bottom = 0        for i in range(len(threshold_list)):            if i + 1 == len(threshold_list):                break            x_list = []            y_list = []            for ELI_class in ELI_class_list:                for drt in drought_type_list:                    df_ELI = df[df['ELI_class'] == ELI_class]                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_drt_copy = df_drt.copy()                    df_drt_copy = df_drt_copy.dropna(subset=['ELI', 'rt'], how='any')                    vals = df_drt_copy['rt']                    vals = np.array(vals)                    threshold_left = threshold_list[i]                    threshold_right = threshold_list[i+1]                    vals = vals[vals < threshold_right]                    vals = vals[vals > threshold_left]                    # vals = vals[vals < (1 - threshold)]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_drt_copy) * 100                    x_list.append(f'{ELI_class}_{drt}')                    y_list.append(ratio)            y_list = np.array(y_list)            # y_list = y_list + bottom            plt.bar(x_list,y_list,bottom=bottom,label=threshold_list[i+1])            bottom = bottom + y_list        plt.legend()        plt.xticks(rotation=30)        plt.tight_layout()        plt.show()        # outf = join(outdir,'rs_rt_area_ratio_bar.pdf')        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)        # plt.show()    def delta_area_ratio_bar(self):        outdir = join(self.this_class_png, 'delta_area_ratio_bar')        T.mk_dir(outdir)        tif = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(tif)        df = T.spatial_dics_to_df({'delta':spatial_dict})        df = Dataframe_func(df).df        # threshold_list = [-np.inf,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,np.inf]        # threshold_list = [-np.inf,-1,-0.8,-0.6,-0.4,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,0.4,0.6,0.8,1,np.inf]        threshold_list = [-np.inf,-0.5,-0.25,0,0.25,0.5,np.inf]        color_list = T.gen_colors(len(threshold_list))        # threshold_list = [-np.inf,-0.2,-0.1,-0.05]        # threshold_list = np.array(threshold_list)        # threshold_list = threshold_list + 1        ELI_class_list = global_ELI_class_list[::-1]        bottom = 0        y_list_all = []        for i in range(len(threshold_list)):            if i + 1 == len(threshold_list):                break            x_list = []            y_list = []            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                df_ELI_copy = df_ELI.copy()                df_ELI_copy = df_ELI_copy.dropna(subset=['ELI', 'delta'], how='any')                vals = df_ELI_copy['delta']                vals = np.array(vals)                threshold_left = threshold_list[i]                threshold_right = threshold_list[i+1]                vals = vals[vals < threshold_right]                vals = vals[vals > threshold_left]                # vals = vals[vals < (1 - threshold)]                # vals = vals[vals > (1 + threshold)]                ratio = len(vals) / len(df_ELI_copy) * 100                x_list.append(f'{ELI_class}')                y_list.append(ratio)            y_list = np.array(y_list)            y_list_all.append(y_list)            # y_list = y_list + bottom            plt.bar(x_list,y_list,bottom=bottom,label=f'{threshold_list[i]}~{threshold_list[i+1]}',color=color_list[i],                    width=0.3)            bottom = bottom + y_list        plt.legend()        plt.xticks(rotation=0)        plt.xlim(-1,2)        plt.tight_layout()        y_position1 = 0        y_position2 = 0        for yi in range(len(y_list_all)):            plt.text(0, y_position1, f'{y_list_all[yi][0]:.2f}', ha='center', va='bottom', fontsize=8)            plt.text(1, y_position2, f'{y_list_all[yi][1]:.2f}', ha='center', va='bottom', fontsize=8)            y_position1 = y_position1 + y_list_all[yi][0]            y_position2 = y_position2 + y_list_all[yi][1]        outf = join(outdir,'delta_area_ratio_bar.pdf')        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)        plt.show()    def delta_area_ratio_gradient_bar(self):        outdir = join(self.this_class_png, 'delta_area_ratio_gradient_bar')        T.mk_dir(outdir)        tif = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(tif)        df = T.spatial_dics_to_df({'delta':spatial_dict})        df = Dataframe_func(df).df        # threshold_list = [-np.inf,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,np.inf]        # threshold_list = [-np.inf,-1,-0.8,-0.6,-0.4,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,0.4,0.6,0.8,1,np.inf]        threshold_list = [-np.inf,-0.5,-0.25,0,0.25,0.5,np.inf]        color_list = T.gen_colors(len(threshold_list))        # threshold_list = [-np.inf,-0.2,-0.1,-0.05]        # threshold_list = np.array(threshold_list)        # threshold_list = threshold_list + 1        plt.figure(figsize=(15*centimeter_factor,6*centimeter_factor))        bottom = 0        y_list_all = []        for i in range(len(threshold_list)):            if i + 1 == len(threshold_list):                break            x_list = []            y_list = []            AI_bins = np.arange(0.1, 3, 0.1)            df_group, bins_list_str = T.df_bin(df, 'aridity_index', AI_bins)            for name, df_group_i in df_group:                x = name[0].left                df_group_i = df_group_i.dropna(subset=['delta'], how='any')                vals = df_group_i['delta']                vals = np.array(vals)                threshold_left = threshold_list[i]                threshold_right = threshold_list[i+1]                vals = vals[vals < threshold_right]                vals = vals[vals > threshold_left]                # vals = vals[vals < (1 - threshold)]                # vals = vals[vals > (1 + threshold)]                ratio = len(vals) / len(df_group_i) * 100                x_list.append(x)                y_list.append(ratio)            y_list = np.array(y_list)            y_list_all.append(y_list)            # y_list = y_list + bottom            plt.bar(x_list,y_list,bottom=bottom,label=f'{threshold_list[i]}~{threshold_list[i+1]}',color=color_list[i],width=0.08)                    # width=0.1,edgecolor='k')            bottom = bottom + y_list        plt.legend()        plt.xticks(rotation=0)        plt.ylim(0, 100)        # plt.xlim(-1,2)        # plt.twinx()        # self.AI_gradient_Drought_year_spatial_tif()        plt.tight_layout()        # outf = join(outdir,'delta_area_ratio_bar.pdf')        outf = join(outdir,'legend.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()    def delta_area_statistic(self):        tif = join(self.this_class_tif, 'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(tif)        df = T.spatial_dics_to_df({'delta': spatial_dict})        # df = Dataframe_func(df).df        df_less_than_0 = df[df['delta']<-0]        df_more_than_0 = df[df['delta']>0]        ratio_less_than_0 = len(df_less_than_0) / len(df) * 100        ratio_more_than_0 = len(df_more_than_0) / len(df) * 100        print(f'ratio_less_than_0:{ratio_less_than_0:.2f}')        print(f'ratio_more_than_0:{ratio_more_than_0:.2f}')        arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)        plt.imshow(arr,cmap='RdBu',vmin=-1,vmax=1,interpolation='nearest')        plt.show()        exit()class Drought_timing:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Drought_timing', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Drought_timing.df')        pass    def run(self):        # df = Over_shoot_phenology().add_NDVI_process()        df = self.__gen_df_init()        # Dataframe        # df = self.add_drought_season(df)        # T.save_df(df, self.dff)        # T.df_to_excel(df, self.dff)        # statistic        # self.timing_trajectory(df)        # self.delta_season_tif(df)        # self.delta_season_bar(df)        self.delta_season_bar_all(df)        # self.delta_season_bar_ANOVA(df)        # self.delta_season_bar_error_bar(df)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def add_drought_season(self,df):        season_list = []        for i, row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['drought_season'] = season_list        return df    def timing_trajectory(self,df):        outdir = join(self.this_class_png, 'timing_trajectory')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        season_list = []        for i,row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['drought_season'] = season_list        for timing in timing_list:            for ELI_class in ELI_class_list:                plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))                for drt in drought_type_list:                    df_ELI = df[df['ELI_class'] == ELI_class]                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process = np.array(NDVI_process)                    NDVI_process_mean = np.nanmean(NDVI_process,axis=0)                    NDVI_process_mean = NDVI_process_mean[:3*6]                    plt.plot(NDVI_process_mean,label=f'{drt}')                plt.legend()                plt.title(f'{timing}\n{ELI_class}')                plt.ylim(-1.1,0.5)                plt.grid()                plt.xticks(list(range(len(NDVI_process_mean)))[::6],[-1,0,1])                fname = f'{timing}_{ELI_class}.pdf'                outf = join(outdir,fname)                plt.savefig(outf)                plt.close()                # plt.show()        T.open_path_and_file(outdir)        pass    def delta_season_tif(self,df):        outdir = join(self.this_class_tif, 'delta_season')        T.mk_dir(outdir)        drought_season_list = global_drought_season_list        for season in drought_season_list:            df_season = df[df['drought_season'] == season]            # print(df_season)            pix_list = T.get_df_unique_val_list(df_season, 'pix')            # print(len(pix_list))            drought_type_list = global_drought_type_list            # drought_year_list = range(1, 5)            drought_year_list = [1]            for drought_year_i in drought_year_list:                df_group_dict = T.df_groupby(df_season, 'pix')                spatial_dict = {}                for pix in tqdm(pix_list):                    df_pix = df_group_dict[pix]                    df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                    df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                    if len(df_hot) == 0 or len(df_normal) == 0:                        continue                    # NDVI_progress = row['NDVI_progress'].tolist()                    # NDVI_progress = np.array(NDVI_progress)                    # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                    # drought_year_NDVI = NDVI_progress_reshape[1]                    NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                    NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                    mean_hot = np.nanmean(NDVI_progress_hot, axis=0)                    mean_normal = np.nanmean(NDVI_progress_normal, axis=0)                    mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)                    mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)                    mean_hot_drought_year = mean_hot_reshape[1:drought_year_i + 1]                    mean_normal_drought_year = mean_normal_reshape[1:drought_year_i + 1]                    mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                    mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                    delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                    spatial_dict[pix] = delta                outf = join(outdir, f'{season}_{drought_year_i}.tif')                DIC_and_TIF().pix_dic_to_tif(spatial_dict, outf)        T.open_path_and_file(outdir)    def delta_season_bar(self,df):        outdir = join(self.this_class_png, 'delta_season_bar')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        drought_year_index = 1        # drought_year_index = 2        plt.figure(figsize=(9 * centimeter_factor, 6 * centimeter_factor))        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process = np.array(NDVI_process)                    NDVI_process_mean = np.nanmean(NDVI_process, axis=0)                    NDVI_process_mean_reshape = NDVI_process_mean.reshape(-1, 6)                    drought_year_NDVI_process = NDVI_process_mean_reshape[drought_year_index]                    drought_year_NDVI_process_mean = np.nanmean(drought_year_NDVI_process)                    result_dict_i[drt] = drought_year_NDVI_process_mean                # delta = result_dict_i['hot-drought'] - result_dict_i['normal-drought']                delta = result_dict_i['normal-drought'] - result_dict_i['hot-drought']                key = f'{timing}_{ELI_class}'                result_dict[key] = delta        print(result_dict)        keys = list(result_dict.keys())        values = [result_dict[key] for key in keys]        plt.bar(keys, values, color='grey', width=0.4)        plt.plot(keys,[0]*len(keys),'k--',linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-0.5, 0.5)        # plt.grid()        plt.tight_layout()        # outf = join(outdir, f'delta_season_bar_{drought_year_index}.pdf')        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)        plt.show()    def delta_season_bar_all(self,df):        outdir = join(self.this_class_png, 'delta_season_bar_all')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        drought_year_index = 1        # drought_year_index = 2        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process = np.array(NDVI_process)                    NDVI_process_mean = np.nanmean(NDVI_process, axis=0)                    NDVI_process_mean_reshape = NDVI_process_mean.reshape(-1, 6)                    drought_year_NDVI_process = NDVI_process_mean_reshape[drought_year_index]                    drought_year_NDVI_process_mean = np.nanmean(drought_year_NDVI_process)                    result_dict_i[drt] = drought_year_NDVI_process_mean                delta = result_dict_i['hot-drought'] - result_dict_i['normal-drought']                # delta = result_dict_i['normal-drought'] - result_dict_i['hot-drought']                key = f'{timing}_{ELI_class}'                # result_dict[key] = delta                result_dict[key] = {                    'delta':delta,                    'normal-drought':result_dict_i['normal-drought'],                    'hot-drought':result_dict_i['hot-drought'],                }        print(result_dict)        keys = list(result_dict.keys())        values_delta = [result_dict[key]['delta'] for key in keys]        value_hot = [result_dict[key]['hot-drought'] for key in keys]        value_normal = [result_dict[key]['normal-drought'] for key in keys]        values_delta_str = [f'{value_delta:.2f}' for value_delta in values_delta]        value_hot_str = [f'{value_hot:.2f}' for value_hot in value_hot]        value_normal_str = [f'{value_normal:.2f}' for value_normal in value_normal]        plt.figure(figsize=(18 * centimeter_factor, 6 * centimeter_factor))        plt.subplot(1,3,1)        plt.bar(keys, values_delta, color='grey', width=0.4)        for i in range(len(keys)):            plt.text(keys[i],values_delta[i],values_delta_str[i],ha='center',va='bottom',fontsize=8)        # print(keys)        plt.plot(keys,[0]*len(keys),'k--',linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-0.5, 0.5)        plt.title('delta')        plt.subplot(1, 3, 2)        plt.bar(keys, value_hot, color='grey', width=0.4)        for i in range(len(keys)):            plt.text(keys[i],value_hot[i],value_hot_str[i],ha='center',va='bottom',fontsize=8)        plt.plot(keys,[0]*len(keys),'k--',linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-1, 1)        plt.title('hot-drought')        plt.subplot(1, 3, 3)        plt.bar(keys, value_normal, color='grey', width=0.4)        for i in range(len(keys)):            plt.text(keys[i],value_normal[i],value_normal_str[i],ha='center',va='bottom',fontsize=8)        plt.plot(keys,[0]*len(keys),'k--',linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-1, 1)        plt.title('normal-drought')        plt.tight_layout()        # outf = join(outdir, f'delta_season_bar_{drought_year_index}.pdf')        outf = join(outdir, f'delta_season_bar_{drought_year_index}_legend.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()    def delta_season_bar_ANOVA(self,df):        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        # drought_year_index = 1        drought_year_index = 2        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process_i_reshape_drought_year_mean_list = []                    for i in range(len(NDVI_process)):                        NDVI_process_i = NDVI_process[i]                        NDVI_process_i_reshape = np.array(NDVI_process_i).reshape(-1, 6)                        NDVI_process_i_reshape_drought_year = NDVI_process_i_reshape[drought_year_index]                        NDVI_process_i_reshape_drought_year_mean = np.nanmean(NDVI_process_i_reshape_drought_year)                        NDVI_process_i_reshape_drought_year_mean_list.append(NDVI_process_i_reshape_drought_year_mean)                    NDVI_process_i_reshape_drought_year_mean_list = np.array(NDVI_process_i_reshape_drought_year_mean_list)                    NDVI_process_i_reshape_drought_year_mean_list = T.remove_np_nan(NDVI_process_i_reshape_drought_year_mean_list)                    key = f'{timing}_{ELI_class}_{drt}'                    result_dict[key] = NDVI_process_i_reshape_drought_year_mean_list                    # print(NDVI_process_i_reshape_drought_year_mean_list)                    # exit()        # print(result_dict)        # exit()        # 'normal-drought', 'hot-drought'        for timing in timing_list:            for ELI_class in ELI_class_list:                key1 = f'{timing}_{ELI_class}_normal-drought'                key2 = f'{timing}_{ELI_class}_hot-drought'                f,p = f_oneway(result_dict[key1],result_dict[key2])                print(f'{key1} vs {key2} f={f},p={p}')    def delta_season_bar_error_bar(self,df):        outdir = join(self.this_class_png, 'delta_season_bar_error_bar')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        result_dict_err = {}        # drought_year_index = 1        drought_year_index = 2        plt.figure(figsize=(9 * centimeter_factor, 6 * centimeter_factor))        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    mean_list = []                    for NDVI_process_i in NDVI_process:                        NDVI_process_i_reshape = np.array(NDVI_process_i).reshape(-1, 6)                        NDVI_process_i_reshape_drought_year = NDVI_process_i_reshape[drought_year_index]                        NDVI_process_i_reshape_drought_year_mean = np.nanmean(NDVI_process_i_reshape_drought_year)                        mean_list.append(NDVI_process_i_reshape_drought_year_mean)                    result_dict_i[drt] = mean_list                vals_hotdrought = result_dict_i['hot-drought']                vals_normaldrought = result_dict_i['normal-drought']                delta_list = []                for i in tqdm(range(10000),desc=f'{timing}_{ELI_class}'):                    vals_choice_hot_drought = np.random.choice(vals_hotdrought, int(len(vals_hotdrought)*0.5))                    vals_choice_normal_drought = np.random.choice(vals_normaldrought, int(len(vals_normaldrought)*0.5))                    vals_choice_hot_drought_mean = np.nanmean(vals_choice_hot_drought)                    vals_choice_normal_drought_mean = np.nanmean(vals_choice_normal_drought)                    delta_i = vals_choice_hot_drought_mean - vals_choice_normal_drought_mean                    delta_list.append(delta_i)                delta_mean = np.nanmean(delta_list)                delta_std = np.nanstd(delta_list)                key = f'{timing}_{ELI_class}'                result_dict[key] = delta_mean                result_dict_err[key] = delta_std        keys = list(result_dict.keys())        values = [result_dict[key] for key in keys]        values_err = [result_dict_err[key] for key in keys]        plt.bar(keys, values, color='grey', width=0.4, yerr=values_err, capsize=2)        plt.plot(keys, [0] * len(keys), 'k--', linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-0.5, 0.5)        # plt.grid()        plt.tight_layout()        outf = join(outdir, f'delta_season_bar_{drought_year_index}.pdf')        # plt.show()        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)class Random_Forests:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Random_Forests', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Dataframe.df')        pass    def run(self):        # df = Over_shoot_phenology().add_NDVI_process()        df = self.__gen_df_init()        # df = self.gen_Y(df)        # df = self.add_drought_season(df)        df = self.add_SOS(df)        df = self.add_EOS(df)        # df = self.add_seasonal_Temperature(df)        # df = self.add_seasonal_Precipitation(df)        # df = self.add_seasonal_SPI(df)        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        ##############################        # self.random_forest_train(df)        # self.plot_rf_result()        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def gen_Y(self,df):        Y_list = []        drought_year_index = 1        for i,row in tqdm(df.iterrows(),total=len(df),desc='gen_Y'):            NDVI_progress = row['NDVI_progress']            NDVI_progress_reshape = np.array(NDVI_progress).reshape(-1,6)            NDVI_progress_reshape_drought_year = NDVI_progress_reshape[drought_year_index]            NDVI_progress_reshape_drought_year_mean = np.nanmean(NDVI_progress_reshape_drought_year)            Y_list.append(NDVI_progress_reshape_drought_year_mean)        df['Y'] = Y_list        return df    def add_drought_season(self,df):        season_list = []        for i, row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['season'] = season_list        return df    def phenology_anomaly_dict(self,phenology_dict):        vals = list(phenology_dict.values())        mean = np.nanmean(vals)        phenology_anomaly_dict = {}        for year in phenology_dict:            val = phenology_dict[year]            anomaly = val - mean            phenology_anomaly_dict[year] = anomaly        return phenology_anomaly_dict    def add_SOS(self,df):        import analysis        pheno_str = 'early_start'        fpath = join(analysis.Phenology().this_class_arr, 'phenology_df/phenology_df.df')        phenology_df = T.load_df(fpath)        cols = list(phenology_df.columns)        print(cols)        pheno_spatial_dict = {}        for i, row in phenology_df.iterrows():            pix = row['pix']            early_start = row[pheno_str]            early_start_dict = dict(early_start)            phenology_anomaly_dict = self.phenology_anomaly_dict(early_start_dict)            pheno_spatial_dict[pix] = phenology_anomaly_dict        pheno_val_list = []        for i,row in df.iterrows():            pix = row['pix']            year = row['drought_year']            if not pix in pheno_spatial_dict:                pheno_val_list.append(np.nan)                continue            if not year in pheno_spatial_dict[pix]:                pheno_val_list.append(np.nan)                continue            pheno_val = pheno_spatial_dict[pix][year]            pheno_val_list.append(pheno_val)        df['SOS'] = pheno_val_list        return df    def add_EOS(self,df):        import analysis        pheno_str = 'late_end'        fpath = join(analysis.Phenology().this_class_arr, 'phenology_df/phenology_df.df')        phenology_df = T.load_df(fpath)        cols = list(phenology_df.columns)        print(cols)        pheno_spatial_dict = {}        for i, row in phenology_df.iterrows():            pix = row['pix']            early_start = row[pheno_str]            early_start_dict = dict(early_start)            phenology_anomaly_dict = self.phenology_anomaly_dict(early_start_dict)            pheno_spatial_dict[pix] = phenology_anomaly_dict        pheno_val_list = []        for i,row in df.iterrows():            pix = row['pix']            year = row['drought_year']            if not pix in pheno_spatial_dict:                pheno_val_list.append(np.nan)                continue            if not year in pheno_spatial_dict[pix]:                pheno_val_list.append(np.nan)                continue            pheno_val = pheno_spatial_dict[pix][year]            pheno_val_list.append(pheno_val)        df['EOS'] = pheno_val_list        return df    def add_seasonal_Temperature(self,df):        # seasonal temperature        temperature_spatial_dict = Meta_information().load_data('Temperature-anomaly_detrend')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc='add_seasonal_Temperature'):                pix = row['pix']                drought_year = row['drought_year']                vals = temperature_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1,12)                vals_reshape_dict = dict(zip(year_list,vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['Temperature-anomaly_'+season] = season_val_list        return df    def add_seasonal_Precipitation(self,df):        # seasonal precipitation        precip_spatial_dict = Meta_information().load_data('Precipitation-anomaly_detrend')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i, row in tqdm(df.iterrows(), total=len(df), desc='add_seasonal_Precipitation'):                pix = row['pix']                drought_year = row['drought_year']                vals = precip_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1, 12)                vals_reshape_dict = dict(zip(year_list, vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['Precipitation-anomaly_' + season] = season_val_list        return df        pass    def add_seasonal_SPI(self,df):        # seasonal SPI        precip_spatial_dict = Meta_information().load_data('SPI')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i, row in tqdm(df.iterrows(), total=len(df), desc='add_seasonal_SPI'):                pix = row['pix']                drought_year = row['drought_year']                vals = precip_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1, 12)                vals_reshape_dict = dict(zip(year_list, vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['SPI_' + season] = season_val_list        return df    def random_forest_train(self,df):        outdir = join(self.this_class_arr,'random_forest')        T.mk_dir(outdir,force=True)        # 'early', 'mid', 'late'        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early',],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid', 'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late',]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train',drought_type,ELI_class,season)                    df_drt = df[df['drought_type']==drought_type]                    df_ELI = df_drt[df_drt['ELI_class']==ELI_class]                    df_season = df_ELI[df_ELI['season']==season]                    Y = df_season['Y'].tolist()                    variable_list = variable_list_dict[season]                    df_new = df_season[variable_list]                    df_new['Y'] = Y                    df_new = df_new.dropna()                    X = df_new[variable_list]                    Y_new = df_new['Y']                    # T.print_head_n(df_new)                    clf, importances_dic, mse, r_model, score, Y_test, y_pred = self._random_forest_train(X,Y_new,variable_list)                    outf = join(outdir,f'{drought_type}_{ELI_class}_{season}.npy')                    result_dict = {                        'importances_dic':importances_dic,                        'mse':mse,                        'r_model':r_model,                        'score':score,                        'Y_test':Y_test,                        'y_pred':y_pred                    }                    T.save_npy(result_dict,outf)    def _random_forest_train(self, X, Y, variable_list):        '''        :param X: a dataframe of x variables        :param Y: a dataframe of y variable        :param variable_list: a list of x variables        :return: details of the random forest model and the importance of each variable        '''        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1) # split the data into training and testing        clf = RandomForestRegressor(n_estimators=100, n_jobs=7) # build a random forest model        clf.fit(X_train, Y_train) # train the model        result = permutation_importance(clf, X_train, Y_train, scoring=None,                                        n_repeats=50, random_state=1,                                        n_jobs=7) # calculate the importance of each variable using permutation importance        importances = result.importances_mean # get the importance of each variable        importances_dic = dict(zip(variable_list, importances)) # put the importance of each variable into a dictionary        labels = []        importance = []        for key in variable_list:            labels.append(key)            importance.append(importances_dic[key])        y_pred = clf.predict(X_test) # predict the y variable using the testing data        r_model = stats.pearsonr(Y_test, y_pred)[0] # calculate the correlation between the predicted y variable and the actual y variable        mse = sklearn.metrics.mean_squared_error(Y_test, y_pred) # calculate the mean squared error        score = clf.score(X_test, Y_test) # calculate the R^2        return clf, importances_dic, mse, r_model, score, Y_test, y_pred    def plot_rf_result(self):        fdir = join(self.this_class_arr,'random_forest')        outdir = join(self.this_class_png,'random_forest')        T.mk_dir(outdir,force=True)        for f in T.listdir(fdir):            fpath = join(fdir,f)            result_dict = T.load_npy(fpath)            importances_dic = result_dict['importances_dic']            r_model = result_dict['r_model']            score = result_dict['score']            title = f'{f}\nR^2={score}, r={r_model}'            x = importances_dic.keys()            y = [importances_dic[key] for key in x]            plt.figure(figsize=(10,5))            plt.bar(x,y)            plt.title(title)            outf = join(outdir,f'{f}.pdf')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)class Partial_Dependence_Plots:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Partial_Dependence_Plots', result_root_this_script, mode=2)        self.dff = Random_Forests().dff        pass    def run(self):        # self.run_partial_dependence_plots()        self.plot_run_partial_dependence_plots()        pass    def run_partial_dependence_plots(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_arr,'partial_dependence_plots')        T.mk_dir(outdir,force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    result_dic = self.partial_dependence_plots(df_season, variable_list_dict[season], 'Y')                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.npy')                    T.save_npy(result_dic, outf)    def plot_run_partial_dependence_plots(self):        fdir = join(self.this_class_arr,'partial_dependence_plots')        outdir = join(self.this_class_png,'partial_dependence_plots')        T.mk_dir(outdir,force=True)        for f in T.listdir(fdir):            fpath = join(fdir,f)            result_dict = T.load_npy(fpath)            plt.figure(figsize=(5, 7))            flag = 1            for key in result_dict:                result_dict_i = result_dict[key]                x = result_dict_i['x']                y = result_dict_i['y']                y_std = result_dict_i['y_std']                plt.subplot(3,2,flag)                flag += 1                plt.plot(x,y,label=key)                plt.fill_between(x,y-y_std,y+y_std,alpha=0.5)                plt.legend()                plt.ylim(-1.5,1)            plt.suptitle(f)            plt.tight_layout()            outf = join(outdir,f'{f}.pdf')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def partial_dependence_plots(self,df,x_vars,y_var):        '''        :param df: a dataframe        :param x_vars: a list of x variables        :param y_var: a y variable        :return:        '''        all_vars = copy.copy(x_vars) # copy the x variables        all_vars.append(y_var) # add the y variable to the list        all_vars_df = df[all_vars] # get the dataframe with the x variables and the y variable        all_vars_df = all_vars_df.dropna() # drop rows with missing values        X = all_vars_df[x_vars]        Y = all_vars_df[y_var]        model, r2 = self.__train_model(X, Y) # train a Random Forests model        flag = 0        result_dic = {}        for var in x_vars:            flag += 1            df_PDP = self.__get_PDPvalues(var, X, model) # get the partial dependence plot values            ppx = df_PDP[var]            ppy = df_PDP['PDs']            ppy_std = df_PDP['PDs_std']            result_dic[var] = {'x':ppx,                               'y':ppy,                               'y_std':ppy_std,                               'r2':r2}        return result_dic    def __train_model(self,X,y):        '''        :param X: a dataframe of x variables        :param y: a dataframe of y variable        :return: a random forest model and the R^2        '''        X_train, X_test, y_train, y_test = train_test_split(            X, y, random_state=1, test_size=0.2) # split the data into training and testing        rf = RandomForestRegressor(n_estimators=100, random_state=42,n_jobs=4) # build a random forest model        rf.fit(X_train, y_train) # train the model        r2 = rf.score(X_test,y_test)        return rf,r2    def __get_PDPvalues(self, col_name, data, model, grid_resolution=50):        '''        :param col_name: a variable        :param data: a dataframe of x variables        :param model: a random forest model        :param grid_resolution: the number of points in the partial dependence plot        :return: a dataframe of the partial dependence plot values        '''        Xnew = data.copy()        sequence = np.linspace(np.min(data[col_name]), np.max(data[col_name]), grid_resolution) # create a sequence of values        Y_pdp = []        Y_pdp_std = []        for each in sequence:            Xnew[col_name] = each            Y_temp = model.predict(Xnew)            Y_pdp.append(np.mean(Y_temp))            Y_pdp_std.append(np.std(Y_temp))        return pd.DataFrame({col_name: sequence, 'PDs': Y_pdp, 'PDs_std': Y_pdp_std})class Single_Variable_Analysis:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Single_Variable_Analysis', result_root_this_script, mode=2)        self.dff = Random_Forests().dff        pass    def run(self):        # self.run_corr()        # self.plot_corr()        self.bin_plot()        pass    def run_corr(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_arr, 'correlation')        T.mk_dir(outdir, force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    variable_list = variable_list_dict[season]                    result_dic = {}                    for var_i in variable_list:                        x = df_season[var_i].values                        y = df_season['Y'].values                        r, p = T.nan_correlation(x, y)                        result_dic[var_i] = {'r': r, 'p': p}                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.npy')                    T.save_npy(result_dic, outf)        pass    def plot_corr(self):        fdir = join(self.this_class_arr, 'correlation')        for f in T.listdir(fdir):            fpath = join(fdir, f)            result_dic = T.load_npy(fpath)            # print(result_dic)            # exit()            plt.figure(figsize=(10, 5))            x_list = []            y_list = []            for x_i in result_dic:                x_list.append(x_i)                y = result_dic[x_i]['r']                y_list.append(y)            plt.bar(x_list, y_list)        plt.show()    def bin_plot(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_png, 'bin_plot')        T.mk_dir(outdir, force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        bin_dict = {            'SOS': np.linspace(-25, 25, 21),            'EOS': np.linspace(-25, 25, 21),        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    variable_list = variable_list_dict[season]                    result_dic = {}                    plt.figure(figsize=(5, 7))                    flag = 1                    for var_i in variable_list:                        bins = np.linspace(-3, 3, 21)                        if var_i in bin_dict:                            bins = bin_dict[var_i]                        df_group,bins_list_str = T.df_bin(df_season, var_i, bins)                        x_list = []                        y_list = []                        err_list = []                        for name,df_group_i in df_group:                            x = name[0].left                            vals = df_group_i['Y'].tolist()                            mean = np.nanmean(vals)                            x_list.append(x)                            y_list.append(mean)                            err,_,_ = T.uncertainty_err(vals)                            err_list.append(err)                        plt.subplot(3,2,flag)                        flag += 1                        plt.plot(x_list, y_list, label=var_i)                        plt.fill_between(x_list, np.array(y_list) - np.array(err_list),                                            np.array(y_list) + np.array(err_list), alpha=0.2)                        plt.legend()                        plt.ylim(-1.5, 1.5)                    plt.suptitle(f'{drought_type}_{ELI_class}_{season}')                    plt.tight_layout()                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.pdf')                    plt.savefig(outf, dpi=300)                    plt.close()        T.open_path_and_file(outdir)class Phenology_Statistic:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Phenology_Statistic', result_root_this_script, mode=2)        self.dff = Random_Forests().dff        pass    def run(self):        # df = self.__gen_df_init()        # self.tif_SOS_EOS(df)        # self.plot_tif_SOS_EOS()        self.plot_pdf_SOS_EOS()        pass    def tif_SOS_EOS(self,df):        outdir = join(self.this_class_tif,'SOS_EOS')        T.mk_dir(outdir,force=True)        var_list = ['SOS','EOS']        drought_type_list = global_drought_type_list        for var_i in var_list:            for drt in drought_type_list:                df_drt = df[df['drought_type']==drt]                df_group_dict = T.df_groupby(df_drt,'pix')                spatial_dict = {}                for pix in tqdm(df_group_dict,desc=f'{var_i}_{drt}'):                    df_i = df_group_dict[pix]                    vals = df_i[var_i].tolist()                    mean = np.nanmean(vals)                    spatial_dict[pix] = mean                arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)                outf = join(outdir,f'{var_i}_{drt}.tif')                DIC_and_TIF().arr_to_tif(arr,outf)        T.open_path_and_file(outdir)    def plot_tif_SOS_EOS(self):        fdir = join(self.this_class_tif,'SOS_EOS')        outdir = join(self.this_class_png,'SOS_EOS')        # color_list = ['purple', '#FFFFCC', 'g'][::-1]        color_list = ['purple', '#FFFFCC', 'g'][::-1]        color_list_r = ['purple', '#FFFFCC', 'g']        cmap = T.cmap_blend(color_list)        cmap_r = T.cmap_blend(color_list_r)        plt.register_cmap(name='mycmap', cmap=cmap)        plt.register_cmap(name='mycmap_r', cmap=cmap_r)        T.mk_dir(outdir,force=True)        for f in T.listdir(fdir):            if not f.endswith('.tif'):                continue            fpath = join(fdir,f)            if 'SOS' in f:                cmap = 'mycmap'            else:                cmap = 'mycmap_r'            Plot().plot_ortho(fpath,vmin=-10,vmax=10,cmap=cmap)            plt.title(f.replace('.tif',''))            outf = join(outdir,f.replace('.tif','.png'))            plt.savefig(outf,dpi=300)            plt.close()            # plt.show()        T.open_path_and_file(outdir)        pass    def plot_pdf_SOS_EOS(self):        fdir = join(self.this_class_tif,'SOS_EOS')        outdir = join(self.this_class_png,'pdf_SOS_EOS')        T.mk_dir(outdir,force=True)        all_dict = {}        for f in T.listdir(fdir):            if not f.endswith('.tif'):                continue            fpath = join(fdir,f)            spatial_dict = DIC_and_TIF().spatial_tif_to_dic(fpath)            key = f.replace('.tif','')            all_dict[key] = spatial_dict        df = T.spatial_dics_to_df(all_dict)        df = Dataframe_func(df).df        T.print_head_n(df)        var_list = ['SOS','EOS']        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for var_i in var_list:            for ELI in ELI_class_list:                df_eli = df[df['ELI_class']==ELI]                plt.figure(figsize=(12*centimeter_factor,6*centimeter_factor))                for drt in drought_type_list:                    key = f'{var_i}_{drt}'                    values = df_eli[key].tolist()                    x,y = Plot().plot_hist_smooth(values,alpha=0,bins=100,range=(-30,30))                    plt.plot(x,y,label=f'{drt}')                plt.legend()                plt.title(f'{var_i}_{ELI}')                plt.tight_layout()                outf = join(outdir,f'{var_i}_{ELI}.pdf')                plt.savefig(outf,dpi=300)                plt.close()                # plt.show()        T.open_path_and_file(outdir)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dffdef Load_dataframe():    dff = Dataframe().dff    df = T.load_df(dff)    return dfdef main():    # Dataframe().run()    # Hot_Normal_Rs_Rt().run()    # ELI_AI_gradient().run()    # Rt_Rs_change_overtime().run()    # Drought_events_process().run()    # Rt_Rs_relationship().run()    # Over_shoot_drought().run()    # Over_shoot_phenology().run()    # Compensation_Excerbation().run()    # Drought_timing().run()    # Random_Forests().run()    # Partial_Dependence_Plots().run()    # Single_Variable_Analysis().run()    Phenology_Statistic().run()    passif __name__ == '__main__':    main()