# coding=utf-8import tracebackimport matplotlib.pyplot as pltimport numpy as npfrom meta_info import *result_root_this_script = join(results_root, 'statistic')class Dataframe_func:    def __init__(self,df,is_clean_df=True):        print('add lon lat')        df = self.add_lon_lat(df)        print('add landcover')        df = self.add_GLC_landcover_data_to_df(df)        print('add NDVI mask')        df = self.add_NDVI_mask(df)        print('add Aridity Index')        df = self.add_AI_to_df(df)        print('add ELI')        df = self.add_ELI_to_df(df)        print('add ELI_reclass')        df = self.ELI_reclass(df)        print('add AI_reclass')        df = self.AI_reclass(df)        # print('add ELI_significance')        # df = self.add_ELI_significance(df)        print('add koppen')        df = self.add_koppen(df)        if is_clean_df == True:            df = self.clean_df(df)        self.df = df    def clean_df(self,df):        df = df[df['lat']>=30]        # df = df[df['landcover_GLC'] != 'Crop']        df = df[df['NDVI_MASK'] == 1]        # df = df[df['ELI_significance'] == 1]        return df    def add_GLC_landcover_data_to_df(self, df):        f = join(data_root,'GLC2000/reclass_lc_dic.npy')        val_dic=T.load_npy(f)        val_list = []        for i, row in tqdm(df.iterrows(), total=len(df)):            pix = row['pix']            if not pix in val_dic:                val_list.append(np.nan)                continue            vals = val_dic[pix]            val_list.append(vals)        df['landcover_GLC'] = val_list        return df    def add_NDVI_mask(self,df):        # f =rf'C:/Users/pcadmin/Desktop/Data/Base_data/NDVI_mask.tif'        f = join(data_root, 'NDVI4g/NDVI_mask.tif')        print(f)        array, originX, originY, pixelWidth, pixelHeight = ToRaster().raster2array(f)        array = np.array(array, dtype=float)        val_dic = DIC_and_TIF().spatial_arr_to_dic(array)        f_name = 'NDVI_MASK'        print(f_name)        # exit()        val_list = []        for i, row in tqdm(df.iterrows(), total=len(df)):            pix = row['pix']            if not pix in val_dic:                val_list.append(np.nan)                continue            vals = val_dic[pix]            if vals < -99:                val_list.append(np.nan)                continue            val_list.append(vals)        df[f_name] = val_list        return df    def add_AI_to_df(self, df):        f = join(data_root, 'Aridity_Index/aridity_index.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)        df = T.add_spatial_dic_to_df(df, spatial_dict, 'aridity_index')        return df    def add_lon_lat(self,df):        df = T.add_lon_lat_to_df(df, DIC_and_TIF())        return df    def add_ELI_to_df(self,df):        import analysis        f = join(analysis.Water_energy_limited_area().this_class_tif, 'ELI/GLEAM-ET_ERA-SM_Temperature.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)        df = T.add_spatial_dic_to_df(df, spatial_dict, 'ELI')        return df    def ELI_reclass(self,df):        ELI_class = []        for i, row in tqdm(df.iterrows(), total=len(df)):            ELI = row['ELI']            if ELI < 0:                ELI_class.append('Energy-Limited')            elif ELI > 0:                ELI_class.append('Water-Limited')            else:                ELI_class.append(np.nan)        df['ELI_class'] = ELI_class        return df    def AI_reclass(self,df):        AI_class = []        for i,row in df.iterrows():            AI = row['aridity_index']            if AI < 0.65:                AI_class.append('Arid')            elif AI >= 0.65:                AI_class.append('Humid')            elif np.isnan(AI):                AI_class.append(np.nan)            else:                print(AI)                raise ValueError('AI error')        df['AI_class'] = AI_class        return df    def add_koppen(self,df):        f = join(data_root, 'koppen/koppen_reclass_dic.npy')        val_dic = T.load_npy(f)        df = T.add_spatial_dic_to_df(df, val_dic, 'Koppen')        return df    # def add_ELI_significance(self,df):    #     from Chapter5 import analysis    #     f = join(Water_energy_limited_area().this_class_tif, 'significant_pix_r/ELI_Temp_significance.tif')    #     spatial_dict = DIC_and_TIF().spatial_tif_to_dic(f)    #     df = T.add_spatial_dic_to_df(df, spatial_dict, 'ELI_significance')    #    #     return dfclass Dataframe:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Dataframe', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'dataframe.df')        pass    def run(self):        df = self.copy_df()        df = self.__gen_df_init()        df = Dataframe_func(df).df        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def copy_df(self):        import analysis        dff = analysis.Resistance_Resilience().dff        df = T.load_df(dff)        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        return dfclass Hot_Normal_Rs_Rt:    '''    Rs/Rt in water limited and energy limited area under Normal/hot droughts    '''    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Hot_Normal_Rs_Rt', result_root_this_script, mode=2)        self.drought_type_list = ['normal-drought', 'hot-drought']        pass    def run(self):        # self.rs_rt_tif()        # self.plot_rs_rt_spatial()        #        # self.rs_rt_bar()        # self.rs_rt_hist()        # self.rs_rt_bar_water_energy_limited()        # self.rs_rt_bar_Humid_Arid()        # self.rs_rt_bar_PFTs()        # self.rs_rt_pfts_koppen_scatter()        # self.rs_rt_area_ratio_bar()        self.rs_rt_area_ratio_bar_two_regions()        # self.rs_rt_area_ratio_ELI_matrix()        # self.rs_rt_pfts_koppen_area_ratio_scatter()        pass    def rs_rt_tif(self):        outdir = join(self.this_class_tif, 'rs_rt_tif')        T.mk_dir(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        T.print_head_n(df, 5)        drought_type_list = T.get_df_unique_val_list(df, 'drought_type')        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            outdir_i = join(outdir, drt)            T.mk_dir(outdir_i)            for col in cols:                print(col)                outf = join(outdir_i, '{}_{}.tif'.format(drt,col))                spatial_dict = {}                df_group_dict = T.df_groupby(df_drt, 'pix')                for pix in df_group_dict:                    df_pix = df_group_dict[pix]                    vals = df_pix[col]                    vals = np.array(vals)                    mean = np.nanmean(vals)                    spatial_dict[pix] = mean                DIC_and_TIF().pix_dic_to_tif(spatial_dict, outf)    def plot_rs_rt_spatial(self):        fdir = join(self.this_class_tif, 'rs_rt_tif')        outdir = join(self.this_class_png,'rs_rt_spatial')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        for drt in self.drought_type_list:            fdir_i = join(fdir, drt)            outdir_i = join(outdir, drt)            T.mk_dir(outdir_i)            for f in T.listdir(fdir_i):                if not f.endswith('.tif'):                    continue                fpath = join(fdir_i, f)                plt.figure(figsize=(5, 5))                m,ret = Plot().plot_ortho(fpath, vmin=0.95,vmax=1.05,cmap=global_cmap)                m.colorbar(ret, location='bottom', pad="5%")                plt.title(f.replace('.tif',''))                outf = join(outdir_i, f.replace('.tif', '.png'))                # plt.show()                plt.savefig(outf,dpi=600)                plt.close()        pass    def rs_rt_bar(self):        outdir = join(self.this_class_png, 'rs_rt_bar')        T.mk_dir(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        y_list = []        x_list = []        err_list = []        for col in cols:            for drt in self.drought_type_list:                df_drt = df[df['drought_type'] == drt]                # print(col)                vals = df_drt[col]                vals = np.array(vals)                mean = np.nanmean(vals)                std = np.nanstd(vals)                err,_,_ = T.uncertainty_err(vals)                err = abs(err)                y_list.append(mean)                err_list.append(err)                tick = '{}_{}'.format(drt, col)                x_list.append(tick)        plt.figure(figsize=(6,3))        plt.bar(x_list, y_list, yerr=err_list)        plt.xticks(rotation=90)        plt.ylim(0.97, 1.01)        plt.tight_layout()        plt.show()        # outf = join(outdir, 'rs_rt_bar.pdf')        # plt.savefig(outf, dpi=300)    def rs_rt_bar_water_energy_limited(self):        outdir = join(self.this_class_png, 'rs_rt_bar_water_energy_limited')        T.mk_dir(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        limited_area_list = T.get_df_unique_val_list(df, 'ELI_class')        for ltd in limited_area_list:            df_ltd = df[df['ELI_class'] == ltd]            y_list = []            x_list = []            err_list = []            for col in cols:                for drt in self.drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    # print(col)                    vals = df_drt[col]                    vals = np.array(vals)                    mean = np.nanmean(vals)                    std = np.nanstd(vals)                    _,up,bottom = T.uncertainty_err(vals)                    err = abs(up-bottom) / 2                    y_list.append(mean)                    err_list.append(err)                    tick = '{}_{}'.format(drt, col)                    x_list.append(tick)            plt.figure(figsize=(6,3))            plt.bar(x_list, y_list, yerr=err_list)            plt.xticks(rotation=90)            plt.ylim(0.90, 1.01)            plt.title(ltd)            plt.tight_layout()            # plt.show()            outf = join(outdir, f'{ltd}-rs_rt_bar.png')            plt.savefig(outf, dpi=300)            plt.close()    def rs_rt_bar_Humid_Arid(self):        outdir = join(self.this_class_png, 'rs_rt_bar_Humid_Arid')        T.mk_dir(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        limited_area_list = T.get_df_unique_val_list(df, 'AI_class')        for ltd in limited_area_list:            df_ltd = df[df['AI_class'] == ltd]            y_list = []            x_list = []            err_list = []            for col in cols:                for drt in self.drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    # print(col)                    vals = df_drt[col]                    vals = np.array(vals)                    mean = np.nanmean(vals)                    std = np.nanstd(vals)                    err,_,_ = T.uncertainty_err(vals)                    y_list.append(mean)                    err_list.append(err)                    tick = '{}_{}'.format(drt, col)                    x_list.append(tick)            plt.figure(figsize=(6,3))            plt.bar(x_list, y_list, yerr=err_list)            plt.xticks(rotation=90)            plt.ylim(0.90, 1.01)            plt.title(ltd)            plt.tight_layout()            # plt.show()            outf = join(outdir, f'{ltd}-rs_rt_bar.png')            plt.savefig(outf, dpi=300)    def rs_rt_bar_PFTs(self):        outdir = join(self.this_class_png, 'rs_rt_bar_PFTs')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        limited_area_list = T.get_df_unique_val_list(df, 'landcover_GLC')        for ltd in limited_area_list:            df_ltd = df[df['landcover_GLC'] == ltd]            y_list = []            x_list = []            err_list = []            for col in cols:                for drt in self.drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    # print(col)                    vals = df_drt[col]                    vals = np.array(vals)                    mean = np.nanmean(vals)                    std = np.nanstd(vals)                    err,_,_ = T.uncertainty_err(vals)                    y_list.append(mean)                    err_list.append(err)                    tick = '{}_{}'.format(drt, col)                    x_list.append(tick)            plt.figure(figsize=(6,3))            plt.bar(x_list, y_list, yerr=err_list)            plt.xticks(rotation=90)            plt.ylim(0.90, 1.01)            plt.title(ltd)            plt.tight_layout()            # plt.show()            outf = join(outdir, f'{ltd}-rs_rt_bar.png')            plt.savefig(outf, dpi=300)            plt.close()    def rs_rt_hist(self):        outdir = join(self.this_class_png, 'rs_rt_hist')        T.mk_dir(outdir)        df = Load_dataframe()        cols = get_rs_rt_cols()        # DIC_and_TIF().plot_df_spatial_pix(df,land_tif)        # plt.show()        # print(cols)        # exit()        for drt in self.drought_type_list:            flag = 0            for col in cols:                df_drt = df[df['drought_type'] == drt]                # print(col)                vals = df_drt[col]                vals = np.array(vals)                x,y = Plot().plot_hist_smooth(vals, bins=200, alpha=0, range=(0.8,1.2))                y = y + flag * 0.03                if 'hot' in drt:                    alpha = 0.5                else:                    alpha = 1                plt.plot(x,y,label=f'{drt} {col}', alpha=alpha)                flag += 1        plt.legend()        # plt.title(drt)        plt.show()        # outf = join(outdir, '{}.png'.format(col))        # plt.savefig(outf, dpi=300)        # plt.close()    def rs_rt_pfts_koppen_scatter(self):        outdir = join(self.this_class_png, 'rs_rt_pfts_koppen_scatter')        T.mk_dir(outdir)        # rs_col = 'rt'        # rs_col = 'ELI'        rs_col = 'rs_1'        # rs_col = 'rs_2'        # rs_col = 'rs_3'        # rs_col = 'rs_4'        eli_col = 'ELI'        # eli_col = 'max_scale'        # eli_col = 'max_lag'        lc_col = 'landcover_GLC'        koppen_col = 'Koppen'        df = Load_dataframe()        drought_type_list = global_drought_type_list        lc_list = global_lc_list        koppen_list = global_koppen_list        lc_marker_dict = global_lc_marker_dict        koppen_color_dict = global_koppen_color_dict        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            plt.figure()            xx = []            yy = []            for lc in lc_list:                df_lc = df_drt[df_drt[lc_col] == lc]                for kp in koppen_list:                    df_kp = df_lc[df_lc[koppen_col] == kp]                    if len(df_kp) <= 100:                        continue                    x = df_kp[eli_col]                    y = df_kp[rs_col]                    x = np.array(x)                    y = np.array(y)                    x_err = T.uncertainty_err(x)[0]                    y_err = T.uncertainty_err(y)[0]                    # x_err = np.nanstd(x)                    # y_err = np.nanstd(y)                    x_mean = np.nanmean(x)                    y_mean = np.nanmean(y)                    xx.append(x_mean)                    yy.append(y_mean)                    plt.errorbar(x_mean, y_mean, xerr=x_err, yerr=y_err,color='gray', alpha=0.5,zorder=-99)                    plt.scatter(x_mean, y_mean, marker=lc_marker_dict[lc], color=koppen_color_dict[kp], label=f'{kp}-{lc}',edgecolors='k',zorder=0)            # plt.legend()            sns.regplot(xx, yy, scatter=False, color='gray')            plt.title(drt)            plt.xlabel(eli_col)            plt.ylabel(rs_col)            # plt.ylim(0.91, 1.02)            # outf = join(outdir, f'{drt}-{eli_col}-{rs_col}-scatter.png')            outf = join(outdir, f'{drt}-{eli_col}-{rs_col}-scatter.pdf')            plt.savefig(outf, dpi=300)            plt.close()        plt.show()    def rs_rt_pfts_koppen_area_ratio_scatter(self):        outdir = join(self.this_class_png, 'rs_rt_pfts_koppen_area_ratio_scatter')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = 0.05        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        lc_list = global_lc_list        koppen_list = global_koppen_list        eli_col = 'ELI'        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            for rs_col in rs_cols:                plt.figure()                xx = []                yy = []                for lc in lc_list:                    df_lc = df_drt[df_drt['landcover_GLC'] == lc]                    for kp in koppen_list:                        df_kp = df_lc[df_lc['Koppen'] == kp]                        df_kp_copy = df_kp.copy()                        df_kp_copy = df_kp_copy.dropna(subset=[eli_col, rs_col], how='any')                        vals = df_kp_copy[rs_col]                        vals = np.array(vals)                        vals = vals[vals < (1 - threshold)]                        # vals = vals[vals > (1 + threshold)]                        ratio = len(vals) / len(df_kp_copy) * 100                        x = df_kp_copy[eli_col]                        x = np.array(x)                        x_mean = np.nanmean(x)                        xx.append(x_mean)                        yy.append(ratio)                        plt.scatter(x_mean, ratio, marker=global_lc_marker_dict[lc], color=global_koppen_color_dict[kp],                                    label=f'{kp}-{lc}', edgecolors='k', zorder=0, s=100)                plt.legend()                sns.regplot(xx, yy, scatter=False, color='gray')                plt.title(f'{drt} {rs_col}')                # outf = join(outdir, f'{drt}-{rs_col}-area_ratio_scatter.png')                # outf = join(outdir, f'{drt}-{rs_col}-area_ratio_scatter.pdf')                outf = join(outdir, f'legend.pdf')                plt.savefig(outf, dpi=300)                plt.close()                exit()                # plt.show()                # plt.ylim(-0.3,0.7)            # plt.show()    def rs_rt_area_ratio_bar(self):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_bar')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = 0.05        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        data = pd.DataFrame()        drt_list = []        rs_col_list = []        ratio_list = []        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            for rs_col in rs_cols:                df_drt_copy = df_drt.copy()                df_drt_copy = df_drt_copy.dropna(subset=['ELI', rs_col], how='any')                vals = df_drt_copy[rs_col]                vals = np.array(vals)                vals = vals[vals < (1 - threshold)]                # vals = vals[vals > (1 + threshold)]                ratio = len(vals) / len(df_drt_copy) * 100                drt_list.append(drt)                rs_col_list.append(rs_col)                ratio_list.append(ratio)        data['drought_type'] = drt_list        data['rs_col'] = rs_col_list        data['ratio'] = ratio_list        # sns.pointplot(x='rs_col', y='ratio', hue='drought_type', data=data,kind='bar')        plt.figure(figsize=(8*centimeter_factor, 6*centimeter_factor))        sns.barplot(x='rs_col', y='ratio', hue='drought_type', data=data)        plt.ylim(0, 55)        # plt.show()        # outf = join(outdir, 'rs_rt_area_ratio_bar.png')        outf = join(outdir, 'rs_rt_area_ratio_bar.pdf')        plt.savefig(outf, dpi=300)        plt.close()        T.open_path_and_file(outdir)    def rs_rt_area_ratio_bar_two_regions(self):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_bar')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = 0.05        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        ltd_list = global_ELI_class_list        for ltd in ltd_list:            df_ltd = df[df['ELI_class'] == ltd]            data = pd.DataFrame()            drt_list = []            rs_col_list = []            ratio_list = []            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                for rs_col in rs_cols:                    df_drt_copy = df_drt.copy()                    df_drt_copy = df_drt_copy.dropna(subset=['ELI', rs_col], how='any')                    vals = df_drt_copy[rs_col]                    vals = np.array(vals)                    vals = vals[vals < (1 - threshold)]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_drt_copy) * 100                    drt_list.append(drt)                    rs_col_list.append(rs_col)                    ratio_list.append(ratio)            data['drought_type'] = drt_list            data['rs_col'] = rs_col_list            data['ratio'] = ratio_list            # sns.pointplot(x='rs_col', y='ratio', hue='drought_type', data=data,kind='bar')            plt.figure(figsize=(8*centimeter_factor, 6*centimeter_factor))            sns.barplot(x='rs_col', y='ratio', hue='drought_type', data=data)            plt.ylim(0, 55)            # plt.show()            # outf = join(outdir, 'rs_rt_area_ratio_bar.png')            outf = join(outdir, f'{ltd}.pdf')            plt.savefig(outf, dpi=300)            plt.close()        T.open_path_and_file(outdir)    def rs_rt_area_ratio_bar_two_regions_join(self):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_bar_two_regions_join')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = 0.05        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        data = pd.DataFrame()        drt_list = []        rs_col_list = []        ratio_list = []        ELI_List = []        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            for ELI in ELI_class_list:                df_eli = df_drt[df_drt['ELI_class'] == ELI]                for rs_col in rs_cols:                    df_eli_copy = df_eli.copy()                    df_eli_copy = df_eli_copy.dropna(subset=['ELI', rs_col], how='any')                    vals = df_eli_copy[rs_col]                    vals = np.array(vals)                    vals = vals[vals < (1 - threshold)]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_eli) * 100                    drt_list.append(drt)                    ELI_List.append(ELI)                    rs_col_list.append(rs_col)                    ratio_list.append(ratio)        data['drought_type'] = drt_list        data['ELI'] = ELI_List        data['rs_col'] = rs_col_list        data['ratio'] = ratio_list        T.print_head_n(data)        # sns.pointplot(x='rs_col', y='ratio', hue='drought_type', data=data,kind='bar')        plt.figure(figsize=(8*centimeter_factor, 6*centimeter_factor))        # plot all        x = []        y = []        flag = 0        for col in rs_cols:            for drt in drought_type_list:                data_drt = data[data['drought_type'] == drt]                # df_col = data[data['rs_col'] == col]                selected = data_drt[data_drt['rs_col']==col]                ratio = selected['ratio'].values                ratio = ratio.sum()                # x.append(f'{drt}-{col}')                x.append(flag)                y.append(ratio)                flag += 1            flag += 0.5        plt.bar(x,y,color='none',edgecolor='black')        x = []        y = []        label = []        flag = 0        for col in rs_cols:            for drt in drought_type_list:                data_drt = data[data['drought_type'] == drt]                for ELI in ELI_class_list:                    data_drt_eli = data_drt[data_drt['ELI'] == ELI]                    selected = data_drt_eli[data_drt_eli['rs_col'] == col]                    ratio = selected['ratio'].values                    ratio = ratio.sum()                    y.append(ratio)                    x.append(flag)                    label.append(f'{drt}-{ELI}-{col}')                    flag += 0.25                flag += 0.5            flag += 0.5        plt.bar(x,y,edgecolor='k',width=0.25,align='center')        # plt.xticks(x,label,rotation=45,ha='right')        plt.tight_layout()        # plt.show()        outf = join(outdir, 'rs_rt_area_ratio_bar_two_regions.pdf')        plt.savefig(outf)        T.open_path_and_file(outdir)    def rs_rt_area_ratio_ELI_matrix(self):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_ELI_matrix')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = global_threshold        rs_cols = get_rs_rt_cols()        # rs_cols.remove('rt')        drought_type_list = global_drought_type_list        ELI_col = 'ELI'        ELI_bins = np.linspace(-0.8,0.8,11)        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group,bins_list_str = T.df_bin(df_drt, ELI_col, ELI_bins)            matrix = []            y_ticks = []            for name,df_group_i in df_group:                # print(name[0].left)                y_ticks.append(name[0].left)                temp = []                for rs in rs_cols:                    df_group_i_copy = df_group_i.copy()                    df_group_i_copy = df_group_i_copy.dropna(subset=['ELI', rs], how='any')                    if len(df_group_i_copy) == 0:                        temp.append(np.nan)                        continue                    vals = df_group_i_copy[rs]                    vals = np.array(vals)                    vals = vals[vals < (1 - threshold)]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_group_i_copy) * 100                    temp.append(ratio)                matrix.append(temp)            matrix = np.array(matrix)            plt.figure(figsize=(8*centimeter_factor, 10*centimeter_factor))            # plt.imshow(matrix, cmap='RdBu_r', interpolation='nearest', aspect='auto', vmin=0, vmax=55)            # T.color_map_choice()            # plt.show()            # sns.heatmap(matrix, vmin=0, vmax=55, annot=True, fmt='.2f', annot_kws={'size': 8},linewidths=1,cmap='viridis_r')            # sns.heatmap(matrix, vmin=0, vmax=55, annot=True, fmt='.2f', annot_kws={'size': 8},linewidths=1,cmap='rocket_r')            sns.heatmap(matrix, vmin=0, vmax=55, annot=True, fmt='.0f', annot_kws={'size': 8},linewidths=1,cmap='magma_r')            # sns.heatmap(matrix, vmin=0, vmax=55, annot=True, fmt='.2f', annot_kws={'size': 8},linewidths=1,cmap='coolwarm')            plt.axis('equal')            # plt.colorbar()            plt.xticks(range(len(rs_cols)), rs_cols, rotation=0)            plt.yticks(range(len(y_ticks)), y_ticks)            plt.ylabel('Ecological Stress Index\n(Water-limited --> Energy-limited)')            plt.title(f'{drt}')            plt.tight_layout()            # outf = join(outdir, f'{drt}.png')            outf = join(outdir, f'{drt}.pdf')            plt.savefig(outf, dpi=300)            plt.close()        T.open_path_and_file(outdir)        # plt.show()        # plt.show()class ELI_AI_gradient:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('ELI_AI_gradient', result_root_this_script, mode=2)        pass    def run(self):        self.lag_ELI()        # self.lag_AI()        # self.scale_ELI()        # self.scale_AI()        # self.rt_rs_ELI()        # self.rt_rs_AI()        # self.max_r_ELI()        pass    def lag_ELI(self):        outdir = join(self.this_class_png, 'lag_ELI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        df_group_dict = T.df_groupby(df, 'pix')        lag_list = []        ELI_list = []        for pix in df_group_dict:            df_pix = df_group_dict[pix]            lag = df_pix['max_lag']            ELI = df_pix['ELI']            lag_mean = np.nanmean(lag)            ELI_mean = np.nanmean(ELI)            lag_list.append(lag_mean)            ELI_list.append(ELI_mean)        df_new = pd.DataFrame()        df_new['lag'] = lag_list        df_new['ELI'] = ELI_list        bins = np.linspace(-0.6, 0.6, 20)        df_group, bins_list_str = T.df_bin(df_new, 'ELI', bins)        x_list = []        y_list = []        err_list = []        for name,df_group_i in df_group:            vals = df_group_i['lag'].tolist()            mean = np.nanmean(vals)            err,_,_ = T.uncertainty_err(vals)            x_list.append(name.left)            y_list.append(mean)            err_list.append(err)        plt.figure(figsize=(6,3))        plt.errorbar(x_list, y_list, yerr=err_list)        plt.xlabel('ELI (energy-limited --> water-limited)')        plt.ylabel('Lag (years)')        plt.tight_layout()        # outf = join(outdir, 'lag_ELI.png')        outf = join(outdir, 'lag_ELI.pdf')        plt.savefig(outf, dpi=300)    def lag_AI(self):        outdir = join(self.this_class_png, 'lag_AI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        df_group_dict = T.df_groupby(df, 'pix')        lag_list = []        ELI_list = []        for pix in df_group_dict:            df_pix = df_group_dict[pix]            lag = df_pix['max_lag']            ELI = df_pix['aridity_index']            lag_mean = np.nanmean(lag)            ELI_mean = np.nanmean(ELI)            lag_list.append(lag_mean)            ELI_list.append(ELI_mean)        df_new = pd.DataFrame()        df_new['lag'] = lag_list        df_new['aridity_index'] = ELI_list        bins = np.linspace(0, 3, 20)        df_group, bins_list_str = T.df_bin(df_new, 'aridity_index', bins)        x_list = []        y_list = []        err_list = []        for name,df_group_i in df_group:            vals = df_group_i['lag'].tolist()            mean = np.nanmean(vals)            err,_,_ = T.uncertainty_err(vals)            x_list.append(name.left)            y_list.append(mean)            err_list.append(err)        plt.figure(figsize=(6,3))        plt.errorbar(x_list, y_list, yerr=err_list)        plt.xlabel('AI (Arid --> Humid)')        plt.ylabel('Lag (years)')        plt.tight_layout()        outf = join(outdir, 'lag_ELI.png')        plt.savefig(outf, dpi=300)    def scale_ELI(self):        outdir = join(self.this_class_png, 'scale_ELI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        df_group_dict = T.df_groupby(df, 'pix')        lag_list = []        ELI_list = []        for pix in df_group_dict:            df_pix = df_group_dict[pix]            lag = df_pix['max_scale']            ELI = df_pix['ELI']            lag_mean = np.nanmean(lag)            ELI_mean = np.nanmean(ELI)            lag_list.append(lag_mean)            ELI_list.append(ELI_mean)        df_new = pd.DataFrame()        df_new['max_scale'] = lag_list        df_new['ELI'] = ELI_list        bins = np.linspace(-0.6, 0.6, 20)        df_group, bins_list_str = T.df_bin(df_new, 'ELI', bins)        x_list = []        y_list = []        err_list = []        for name,df_group_i in df_group:            vals = df_group_i['max_scale'].tolist()            mean = np.nanmean(vals)            err,_,_ = T.uncertainty_err(vals)            x_list.append(name.left)            y_list.append(mean)            err_list.append(err)        plt.figure(figsize=(6,3))        plt.errorbar(x_list, y_list, yerr=err_list)        plt.xlabel('ELI (energy-limited --> water-limited)')        plt.ylabel('SPEI scale')        plt.tight_layout()        # outf = join(outdir, 'scale_ELI.png')        outf = join(outdir, 'scale_ELI.pdf')        plt.savefig(outf, dpi=300)    def scale_AI(self):        outdir = join(self.this_class_png, 'scale_AI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        df_group_dict = T.df_groupby(df, 'pix')        lag_list = []        ELI_list = []        for pix in df_group_dict:            df_pix = df_group_dict[pix]            lag = df_pix['max_scale']            ELI = df_pix['aridity_index']            lag_mean = np.nanmean(lag)            ELI_mean = np.nanmean(ELI)            lag_list.append(lag_mean)            ELI_list.append(ELI_mean)        df_new = pd.DataFrame()        df_new['max_scale'] = lag_list        df_new['aridity_index'] = ELI_list        bins = np.linspace(0, 3, 20)        df_group, bins_list_str = T.df_bin(df_new, 'aridity_index', bins)        x_list = []        y_list = []        err_list = []        for name,df_group_i in df_group:            vals = df_group_i['max_scale'].tolist()            mean = np.nanmean(vals)            err,_,_ = T.uncertainty_err(vals)            x_list.append(name.left)            y_list.append(mean)            err_list.append(err)        plt.figure(figsize=(6,3))        plt.errorbar(x_list, y_list, yerr=err_list)        plt.xlabel('AI (Arid --> Humid)')        plt.ylabel('SPEI scale')        plt.tight_layout()        outf = join(outdir, 'scale_ELI.png')        plt.savefig(outf, dpi=300)    def rt_rs_ELI(self):        outdir = join(self.this_class_png, 'rt_rs_ELI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group_dict = T.df_groupby(df_drt, 'pix')            for col in rs_rt_var_list:                vals_list = []                ELI_list = []                for pix in tqdm(df_group_dict,desc=f'{drt} {col}'):                    df_pix = df_group_dict[pix]                    vals = df_pix[col]                    ELI = df_pix['ELI']                    vals_mean = np.nanmean(vals)                    ELI_mean = np.nanmean(ELI)                    vals_list.append(vals_mean)                    ELI_list.append(ELI_mean)                df_new = pd.DataFrame()                df_new[col] = vals_list                df_new['ELI'] = ELI_list                bins = np.linspace(-0.6, 0.6, 20)                df_group, bins_list_str = T.df_bin(df_new, 'ELI', bins)                x_list = []                y_list = []                err_list = []                for name, df_group_i in df_group:                    vals = df_group_i[col].tolist()                    mean = np.nanmean(vals)                    err, _, _ = T.uncertainty_err(vals)                    x_list.append(name.left)                    y_list.append(mean)                    err_list.append(err)                plt.figure(figsize=(6, 3))                plt.errorbar(x_list, y_list, yerr=err_list)                plt.xlabel('ELI (energy-limited --> water-limited)')                plt.title(f'{drt} {col}')                if col == 'rt':                    plt.ylim(0.89,1.05)                else:                    plt.ylim(0.95, 1.05)                outf = join(outdir, f'{drt}_{col}.png')                plt.tight_layout()                plt.savefig(outf, dpi=300)                plt.close()    def rt_rs_AI(self):        outdir = join(self.this_class_png, 'rt_rs_AI')        T.mk_dir(outdir)        df = Load_dataframe()        T.print_head_n(df, 5)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group_dict = T.df_groupby(df_drt, 'pix')            for col in rs_rt_var_list:                vals_list = []                ELI_list = []                for pix in tqdm(df_group_dict,desc=f'{drt} {col}'):                    df_pix = df_group_dict[pix]                    vals = df_pix[col]                    ELI = df_pix['aridity_index']                    vals_mean = np.nanmean(vals)                    ELI_mean = np.nanmean(ELI)                    vals_list.append(vals_mean)                    ELI_list.append(ELI_mean)                df_new = pd.DataFrame()                df_new[col] = vals_list                df_new['aridity_index'] = ELI_list                bins = np.linspace(0, 3, 20)                df_group, bins_list_str = T.df_bin(df_new, 'aridity_index', bins)                x_list = []                y_list = []                err_list = []                for name, df_group_i in df_group:                    vals = df_group_i[col].tolist()                    mean = np.nanmean(vals)                    err, _, _ = T.uncertainty_err(vals)                    x_list.append(name.left)                    y_list.append(mean)                    err_list.append(err)                plt.figure(figsize=(6, 3))                plt.errorbar(x_list, y_list, yerr=err_list)                plt.xlabel('AI (Arid --> Humid)')                plt.title(f'{drt} {col}')                if col == 'rt':                    plt.ylim(0.89,1.05)                else:                    plt.ylim(0.95, 1.05)                outf = join(outdir, f'{drt}_{col}.png')                plt.tight_layout()                plt.savefig(outf, dpi=300)                plt.close()    def max_r_ELI(self):        outdir = join(self.this_class_png, 'max_r_ELI')        T.mk_dir(outdir)        df = Load_dataframe()        df_group_dict = T.df_groupby(df, 'pix')        lag_list = []        ELI_list = []        spatial_dict = {}        for pix in df_group_dict:            df_pix = df_group_dict[pix]            lag = df_pix['max_r']            ELI = df_pix['ELI']            lag_mean = np.nanmean(lag)            ELI_mean = np.nanmean(ELI)            lag_list.append(lag_mean)            ELI_list.append(ELI_mean)            spatial_dict[pix] = lag_mean        # arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)        # plt.imshow(arr, cmap='jet',vmin=0,vmax=1)        # plt.colorbar()        # plt.show()        df_new = pd.DataFrame()        df_new['max_r'] = lag_list        df_new['ELI'] = ELI_list        bins = np.linspace(-0.6, 0.6, 20)        df_group, bins_list_str = T.df_bin(df_new, 'ELI', bins)        x_list = []        y_list = []        err_list = []        for name,df_group_i in df_group:            vals = df_group_i['max_r'].tolist()            mean = np.nanmean(vals)            err,_,_ = T.uncertainty_err(vals)            # err = np.nanstd(vals)            x_list.append(name.left)            y_list.append(mean)            err_list.append(err)        plt.figure(figsize=(6,3))        plt.errorbar(x_list, y_list, yerr=err_list)        plt.xlabel('ELI (energy-limited --> water-limited)')        plt.ylabel('Correlation')        plt.tight_layout()        outf = join(outdir, 'r_ELI.pdf')        plt.savefig(outf, dpi=300)class Rt_Rs_change_overtime:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Rt_Rs_change_overtime', result_root_this_script, mode=2)        pass    def run(self):        self.every_year()        # self.every_5_year()        # self.every_5_year_area_ratio()        # self.every_5_year_area_ratio_matrix()        # self.every_1_year_area_ratio_matrix()        # self.every_10_year()        # self.two_periods()        # self.plot_two_periods_koppen_PFTs()        # self.plot_two_periods_water_energy_PFTs()        # self.plot_two_periods_water_energy_PFTs_area()        pass    def every_year(self):        outdir = join(self.this_class_png, 'every_year')        T.mk_dir(outdir)        df = Load_dataframe()        drought_year_col = 'drought_year'        ELI_class_col = 'ELI_class'        ELI_class_list = T.get_df_unique_val_list(df, ELI_class_col)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        for ltd in ELI_class_list:            df_ltd = df[df[ELI_class_col] == ltd]            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                for col in rs_rt_var_list:                    df_group_dict = T.df_groupby(df_drt, drought_year_col)                    year_list = []                    for year in df_group_dict:                        year_list.append(year)                    year_list.sort()                    vals_list = []                    err_list = []                    for year in year_list:                        df_year = df_group_dict[year]                        vals = df_year[col].tolist()                        mean = np.nanmean(vals)                        err, _, _ = T.uncertainty_err(vals)                        vals_list.append(mean)                        err_list.append(err)                    plt.errorbar(year_list, vals_list, yerr=err_list)                    title = f'{drt} {ltd} {col}'                    plt.title(title)                    plt.savefig(join(outdir, f'{title}.png'))                    plt.close()                    # plt.show()    def every_5_year(self):        outdir = join(self.this_class_png, 'every_5_year')        T.mk_dir(outdir)        df = Load_dataframe()        drought_year_col = 'drought_year'        ELI_class_col = 'ELI_class'        ELI_class_list = T.get_df_unique_val_list(df, ELI_class_col)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        group_year_list = [            [1982, 1983, 1984, 1985, 1986],            [1987, 1988, 1989, 1990, 1991],            [1992, 1993, 1994, 1995, 1996],            [1997, 1998, 1999, 2000, 2001],            [2002, 2003, 2004, 2005, 2006],            [2007, 2008, 2009, 2010, 2011],            [2012, 2013, 2014, 2015],        ]        for ltd in ELI_class_list:            df_ltd = df[df[ELI_class_col] == ltd]            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                for col in rs_rt_var_list:                    vals_list = []                    err_list = []                    year_list = []                    for years in group_year_list:                        df_years_list = []                        for year in years:                            df_year = df_drt[df_drt[drought_year_col] == year]                            df_years_list.append(df_year)                        df_years = pd.concat(df_years_list)                        vals = df_years[col].tolist()                        mean = np.nanmean(vals)                        err, _, _ = T.uncertainty_err(vals)                        vals_list.append(mean)                        err_list.append(err)                        year_list.append(f'{years[0]}-{years[-1]}')                    plt.figure(figsize=(6, 3))                    plt.errorbar(year_list, vals_list, yerr=err_list)                    title = f'{drt} {ltd} {col}'                    plt.title(title)                    plt.xticks(rotation=45)                    plt.tight_layout()                    plt.savefig(join(outdir, f'{title}.png'))                    plt.close()                    # plt.show()    def every_5_year_area_ratio(self):        outdir = join(self.this_class_png, 'every_5_year_area_ratio')        T.mk_dir(outdir)        df = Load_dataframe()        drought_year_col = 'drought_year'        ELI_class_col = 'ELI_class'        ELI_class_list = T.get_df_unique_val_list(df, ELI_class_col)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        threshold = global_threshold        group_year_list = [            [1982, 1983, 1984, 1985, 1986],            [1987, 1988, 1989, 1990, 1991],            [1992, 1993, 1994, 1995, 1996],            [1997, 1998, 1999, 2000, 2001],            [2002, 2003, 2004, 2005, 2006],            [2007, 2008, 2009, 2010, 2011],            [2012, 2013, 2014, 2015],        ]        for ltd in ELI_class_list:            df_ltd = df[df[ELI_class_col] == ltd]            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                for col in rs_rt_var_list:                    ratio_list = []                    year_list = []                    for years in group_year_list:                        df_years_list = []                        for year in years:                            df_year = df_drt[df_drt[drought_year_col] == year]                            df_years_list.append(df_year)                        df_years = pd.concat(df_years_list)                        vals = df_years[col].tolist()                        vals = np.array(vals)                        vals = vals[vals < (1 - threshold)]                        # vals = vals[vals > (1 + threshold)]                        ratio = len(vals) / len(df_years) * 100                        ratio_list.append(ratio)                        year_list.append(f'{years[0]}-{years[-1]}')                    plt.figure(figsize=(6, 3))                    plt.bar(year_list, ratio_list)                    title = f'{drt} {ltd} {col}'                    plt.title(title)                    plt.xticks(rotation=45,ha='right')                    plt.tight_layout()                    # plt.show()                    plt.savefig(join(outdir, f'{title}.png'))                    plt.close()    def every_1_year_area_ratio_matrix(self):        outdir = join(self.this_class_png, 'every_1_year_area_ratio_matrix')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = global_threshold        rs_cols = get_rs_rt_cols()        # rs_cols.remove('rt')        drought_type_list = global_drought_type_list        # group_year_list = [        #     [1982, 1983, 1984, 1985, 1986],        #     [1987, 1988, 1989, 1990, 1991],        #     [1992, 1993, 1994, 1995, 1996],        #     [1997, 1998, 1999, 2000, 2001],        #     [2002, 2003, 2004, 2005, 2006],        #     [2007, 2008, 2009, 2010, 2011],        #     [2012, 2013, 2014, 2015],        # ]        all_year_list = list(range(global_start_year, global_end_year + 1))        all_year_list = [[year] for year in all_year_list]        # print(all_year_list)        # exit()        ELI_col = 'ELI'        drought_year_col = 'drought_year'        ELI_bins = np.linspace(-0.8,0.8,11)        for col in rs_cols:            for drt in drought_type_list:                df_drt = df[df['drought_type'] == drt]                df_group,bins_list_str = T.df_bin(df_drt, ELI_col, ELI_bins)                matrix = []                y_ticks = []                for name,df_group_i in df_group:                    y_ticks.append(name.left)                    temp = []                    vals_list = []                    err_list = []                    year_list = []                    for years in all_year_list:                        df_years_list = []                        for year in years:                            df_year = df_group_i[df_group_i[drought_year_col] == year]                            df_years_list.append(df_year)                        df_years = pd.concat(df_years_list)                        if len(df_years) == 0:                            temp.append(np.nan)                            continue                        vals = df_years[col].tolist()                        vals = np.array(vals)                        # vals_mean = np.nanmean(vals)                        vals = vals[vals < (1 - threshold)]                        # vals = vals[vals > (1 + threshold)]                        ratio = len(vals) / len(df_years) * 100                        # year_list.append(f'{years[0]}-{years[-1]}')                        year_list.append(f'{years[0]}')                        temp.append(ratio)                        # temp.append(vals_mean)                    matrix.append(temp)                matrix = np.array(matrix)                plt.figure(figsize=(12, 4))                plt.imshow(matrix, cmap='RdBu_r', interpolation='nearest', aspect='auto', vmin=0, vmax=55)                # plt.imshow(matrix, cmap='RdBu_r', interpolation='nearest', aspect='auto', vmin=0.95, vmax=1.05)                plt.colorbar()                plt.xticks(range(len(list(range(global_start_year, global_end_year + 1)))), list(range(global_start_year, global_end_year + 1)), rotation=45, ha='right')                plt.yticks(range(len(y_ticks)), y_ticks)                plt.ylabel('Ecological Stress Index\n(Water-limited --> Energy-limited)')                plt.title(f'{drt} {col}')                plt.tight_layout()                outf = join(outdir, f'{drt} {col}.png')                # plt.show()                plt.savefig(outf)                plt.close()    def every_5_year_area_ratio_matrix(self):        outdir = join(self.this_class_png, 'every_5_year_area_ratio_matrix')        T.mk_dir(outdir)        df = Load_dataframe()        threshold = global_threshold        rs_cols = get_rs_rt_cols()        # rs_cols.remove('rt')        drought_type_list = global_drought_type_list        group_year_list = [            [1982, 1983, 1984, 1985, 1986],            [1987, 1988, 1989, 1990, 1991],            [1992, 1993, 1994, 1995, 1996],            [1997, 1998, 1999, 2000, 2001],            [2002, 2003, 2004, 2005, 2006],            [2007, 2008, 2009, 2010, 2011],            [2012, 2013, 2014, 2015],        ]        # print(all_year_list)        # exit()        ELI_col = 'ELI'        drought_year_col = 'drought_year'        ELI_bins = np.linspace(-0.8,0.8,11)        for col in rs_cols:            for drt in drought_type_list:                df_drt = df[df['drought_type'] == drt]                df_group,bins_list_str = T.df_bin(df_drt, ELI_col, ELI_bins)                matrix = []                y_ticks = []                for name,df_group_i in df_group:                    y_ticks.append(name.left)                    temp = []                    vals_list = []                    err_list = []                    year_list = []                    for years in group_year_list:                        df_years_list = []                        for year in years:                            df_year = df_group_i[df_group_i[drought_year_col] == year]                            df_years_list.append(df_year)                        df_years = pd.concat(df_years_list)                        if len(df_years) == 0:                            temp.append(np.nan)                            continue                        vals = df_years[col].tolist()                        vals = np.array(vals)                        # vals_mean = np.nanmean(vals)                        vals = vals[vals < (1 - threshold)]                        # vals = vals[vals > (1 + threshold)]                        ratio = len(vals) / len(df_years) * 100                        year_list.append(f'{years[0]}-{years[-1]}')                        # year_list.append(f'{years[0]}')                        temp.append(ratio)                        # temp.append(vals_mean)                    matrix.append(temp)                matrix = np.array(matrix)                plt.figure(figsize=(12, 8))                plt.imshow(matrix, cmap='RdBu_r', interpolation='nearest', aspect='auto', vmin=0, vmax=55)                # plt.imshow(matrix, cmap='RdBu_r', interpolation='nearest', aspect='auto', vmin=0.95, vmax=1.05)                plt.colorbar()                plt.xticks(range(len(year_list)), year_list, rotation=45, ha='right')                plt.yticks(range(len(y_ticks)), y_ticks)                plt.ylabel('Ecological Stress Index\n(Water-limited --> Energy-limited)')                plt.title(f'{drt} {col}')                plt.tight_layout()                outf = join(outdir, f'{drt} {col}.png')                # plt.show()                plt.savefig(outf)                plt.close()    def every_10_year(self):        outdir = join(self.this_class_png, 'every_10_year')        T.mk_dir(outdir)        df = Load_dataframe()        drought_year_col = 'drought_year'        ELI_class_col = 'ELI_class'        ELI_class_list = T.get_df_unique_val_list(df, ELI_class_col)        drought_type_list = global_drought_type_list        rs_rt_var_list = get_rs_rt_cols()        group_year_list = [            [1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991],            [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001],            [2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011],            [2012, 2013, 2014, 2015],        ]        for ltd in ELI_class_list:            df_ltd = df[df[ELI_class_col] == ltd]            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                for col in rs_rt_var_list:                    vals_list = []                    err_list = []                    year_list = []                    for years in group_year_list:                        df_years_list = []                        for year in years:                            df_year = df_drt[df_drt[drought_year_col] == year]                            df_years_list.append(df_year)                        df_years = pd.concat(df_years_list)                        vals = df_years[col].tolist()                        mean = np.nanmean(vals)                        err, _, _ = T.uncertainty_err(vals)                        vals_list.append(mean)                        err_list.append(err)                        year_list.append(f'{years[0]}-{years[-1]}')                    plt.figure(figsize=(6, 3))                    plt.errorbar(year_list, vals_list, yerr=err_list)                    title = f'{drt} {ltd} {col}'                    plt.title(title)                    plt.xticks(rotation=45)                    plt.tight_layout()                    plt.savefig(join(outdir, f'{title}.png'))                    plt.close()                    # plt.show()    def two_periods(self):        outdir = join(self.this_class_arr, 'two_periods')        T.mk_dir(outdir)        df = Load_dataframe()        rt_col = 'rt'        rs_cols = get_rs_rt_cols()        rs_cols.remove(rt_col)        # print(rs_col)        # exit()        first_part_year_list = list(range(1982,2000))        second_part_year_list = list(range(2000,2016))        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group_dict = T.df_groupby(df_drt, 'pix')            spatial_dict = {}            for rs_col in rs_cols:                for pix in tqdm(df_group_dict,total=len(df_group_dict),desc=f'{drt} {rs_col}'):                    df_i = df_group_dict[pix]                    df_first_part = df_i[df_i['drought_year'].isin(first_part_year_list)]                    df_second_part = df_i[df_i['drought_year'].isin(second_part_year_list)]                    rt_first_part = df_first_part[rt_col].tolist()                    rt_second_part = df_second_part[rt_col].tolist()                    rs_first_part = df_first_part[rs_col].tolist()                    rs_second_part = df_second_part[rs_col].tolist()                    rt_first_part_mean = np.nanmean(rt_first_part)                    rt_second_part_mean = np.nanmean(rt_second_part)                    rs_first_part_mean = np.nanmean(rs_first_part)                    rs_second_part_mean = np.nanmean(rs_second_part)                    spatial_dict[pix] = {                        'rt-1': rt_first_part_mean,                        'rt-2': rt_second_part_mean,                        f'{rs_col}-1': rs_first_part_mean,                        f'{rs_col}-2': rs_second_part_mean,                    }                df_result = T.dic_to_df(spatial_dict,'pix')                df_result = df_result.dropna()                df_result = Dataframe_func(df_result).df                outf = join(outdir, f'{drt}_{rs_col}.df')                T.save_df(df_result, outf)                T.df_to_excel(df_result,outf)                # exit()    def plot_two_periods_koppen_PFTs(self):        fdir = join(self.this_class_arr, 'two_periods')        outdir = join(self.this_class_png,'two_periods_koppen_PFTs')        T.mk_dir(outdir)        rt_col = 'rt'        rs_cols = get_rs_rt_cols()        rs_cols.remove(rt_col)        drought_type_list = global_drought_type_list        # drought_type_list = global_drought_type_list[1:]        lc_list = global_lc_list        kp_list = global_koppen_list        for drt in drought_type_list:            for rs_col in rs_cols:                fname = f'{drt}_{rs_col}.df'                df = T.load_df(join(fdir, fname))                plt.figure(figsize=(10,10))                for lc in lc_list:                    df_lc = df[df['landcover_GLC'] == lc]                    for kp in kp_list:                        df_kp = df_lc[df_lc['Koppen'] == kp]                        rt_1 = df_kp[f'{rt_col}-1']                        rt_2 = df_kp[f'{rt_col}-2']                        rs_1 = df_kp[f'{rs_col}-1']                        rs_2 = df_kp[f'{rs_col}-2']                        rt_1_mean = np.nanmean(rt_1)                        rt_2_mean = np.nanmean(rt_2)                        rs_1_mean = np.nanmean(rs_1)                        rs_2_mean = np.nanmean(rs_2)                        # plt.plot([rt_1,rt_2],[rs_1,rs_2],color='k',alpha=0.1)                        plt.plot([rt_1_mean, rt_2_mean], [rs_1_mean, rs_2_mean],label=f'{kp}',zorder=99,color=global_koppen_color_dict[kp],lw=4,alpha=0.3)                        plt.arrow(rt_1_mean, rs_1_mean, rt_2_mean - rt_1_mean, rs_2_mean - rs_1_mean,color='k',alpha=0.1)                        plt.text(rt_1_mean, rs_1_mean, f'{lc}', fontsize=8)                plt.title(f'{drt} {rs_col}')                plt.xlabel(f'{rt_col}')                plt.ylabel(f'{rs_col}')                plt.axis('equal')                # plt.legend()                outf = join(outdir, f'{drt}_{rs_col}.png')                plt.savefig(outf,dpi=300)                plt.close()                # plt.show()    def plot_two_periods_water_energy_PFTs(self):        fdir = join(self.this_class_arr, 'two_periods')        outdir = join(self.this_class_png,'two_periods_water_energy_PFTs')        T.mk_dir(outdir)        rt_col = 'rt'        rs_cols = get_rs_rt_cols()        rs_cols.remove(rt_col)        drought_type_list = global_drought_type_list        # drought_type_list = global_drought_type_list[1:]        lc_list = global_lc_list        ltd_list = global_ELI_class_list        for drt in drought_type_list:            for rs_col in rs_cols:                fname = f'{drt}_{rs_col}.df'                df = T.load_df(join(fdir, fname))                plt.figure(figsize=(10,10))                for lc in lc_list:                    df_lc = df[df['landcover_GLC'] == lc]                    for ltd in ltd_list:                        df_ltd = df_lc[df_lc['ELI_class'] == ltd]                        rt_1 = df_ltd[f'{rt_col}-1']                        rt_2 = df_ltd[f'{rt_col}-2']                        rs_1 = df_ltd[f'{rs_col}-1']                        rs_2 = df_ltd[f'{rs_col}-2']                        rt_1_mean = np.nanmean(rt_1)                        rt_2_mean = np.nanmean(rt_2)                        rs_1_mean = np.nanmean(rs_1)                        rs_2_mean = np.nanmean(rs_2)                        # plt.plot([rt_1,rt_2],[rs_1,rs_2],color='k',alpha=0.1)                        plt.plot([rt_1_mean, rt_2_mean], [rs_1_mean, rs_2_mean],label=f'{ltd}',zorder=99,color=global_ELI_class_color_dict[ltd],lw=4,alpha=0.3)                        plt.arrow(rt_1_mean, rs_1_mean, rt_2_mean - rt_1_mean, rs_2_mean - rs_1_mean,color='k',alpha=0.1)                        plt.text(rt_1_mean, rs_1_mean, f'{lc}', fontsize=8)                plt.title(f'{drt} {rs_col}')                plt.xlabel(f'{rt_col}')                plt.ylabel(f'{rs_col}')                plt.axis('equal')                # plt.legend()                outf = join(outdir, f'{drt}_{rs_col}.png')                plt.savefig(outf,dpi=300)                plt.close()                # plt.show()    def plot_two_periods_water_energy_PFTs_area(self):        fdir = join(self.this_class_arr, 'two_periods')        outdir = join(self.this_class_png,'two_periods_water_energy_PFTs_area')        threshold = global_threshold        T.mk_dir(outdir)        rt_col = 'rt'        rs_cols = get_rs_rt_cols()        rs_cols.remove(rt_col)        drought_type_list = global_drought_type_list        # drought_type_list = global_drought_type_list[1:]        lc_list = global_lc_list        ltd_list = global_ELI_class_list        for drt in drought_type_list:            for rs_col in rs_cols:                fname = f'{drt}_{rs_col}.df'                df = T.load_df(join(fdir, fname))                plt.figure(figsize=(4,4))                for lc in lc_list:                    df_lc = df[df['landcover_GLC'] == lc]                    for ltd in ltd_list:                        df_ltd = df_lc[df_lc['ELI_class'] == ltd]                        rt_1 = df_ltd[f'{rt_col}-1']                        rt_2 = df_ltd[f'{rt_col}-2']                        rs_1 = df_ltd[f'{rs_col}-1']                        rs_2 = df_ltd[f'{rs_col}-2']                        rt_1 = rt_1[rt_1 < (1 - threshold)]                        rt_2 = rt_2[rt_2 < (1 - threshold)]                        rs_1 = rs_1[rs_1 < (1 - threshold)]                        rs_2 = rs_2[rs_2 < (1 - threshold)]                        # vals = vals[vals > (1 + threshold)]                        ratio_rt_1 = len(rt_1) / len(df_ltd) * 100                        ratio_rt_2 = len(rt_2) / len(df_ltd) * 100                        ratio_rs_1 = len(rs_1) / len(df_ltd) * 100                        ratio_rs_2 = len(rs_2) / len(df_ltd) * 100                        # plt.plot([rt_1,rt_2],[rs_1,rs_2],color='k',alpha=0.1)                        # plt.plot([ratio_rt_1, ratio_rt_2], [ratio_rs_1, ratio_rs_2],label=f'{ltd}',zorder=99,color=global_ELI_class_color_dict[ltd],lw=4,alpha=0.0)                        # plt.xlim(-10, 70)                        # plt.ylim(-10, 30)                        plt.arrow(ratio_rt_1, ratio_rs_1, ratio_rt_2 - ratio_rt_1, ratio_rs_2 - ratio_rs_1,color=global_ELI_class_color_dict[ltd],head_width=1.5,head_length=1.5)                        plt.text(ratio_rt_2, ratio_rs_2, f'{lc}', fontsize=8)                plt.title(f'{drt} {rs_col}')                plt.xlabel(f'{rt_col}')                plt.ylabel(f'{rs_col}')                # plt.axis('equal')                plt.tight_layout()                # plt.legend()                outf = join(outdir, f'{drt}_{rs_col}.pdf')                plt.savefig(outf,dpi=300)                plt.close()                # plt.show()class Drought_events_process:    '''    introduce NDVI, CSIF, VOD, VPD, SM, ET, T, P    optimal Temperature?    '''    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Drought_events_process', result_root_this_script, mode=2)        # self.var_list = ['NDVI', 'VPD', 'CCI-SM', 'ET', 'Temperature', 'Precipitation']        # self.var_list = ['NDVI', 'VPD', 'ERA-SM', 'GLEAM-ET', ]        # self.var_list = ['NDVI', 'VOD-anomaly', 'CSIF-anomaly', 'VOD-k-band-anomaly']        self.var_list = ['NDVI-anomaly_detrend']        pass    def run(self):        # self.gen_variables_in_drought_proess_monthly()        self.plot_variables_in_drought_proess_monthly()        # self.plot_variables_in_drought_proess_monthly_ELI()        # self.plot_every_year_pdf()        pass    def gen_variables_in_drought_proess_monthly(self):        outdir = join(self.this_class_arr, 'variables_in_drought_proess_monthly')        T.mk_dir(outdir)        outf = join(outdir, 'dataframe.df')        var_list = self.var_list        df = Load_dataframe()        # gs_dict = Growing_season().longterm_growing_season()        gs = global_gs        for var in var_list:            # year_range = global_VIs_year_range_dict[var]            year_range = global_year_range            year_list = year_range_str_to_list(year_range)            spatial_dict = Meta_information().load_data(var,year_range)            spatial_dict_gs_monthly = {}            for pix in tqdm(spatial_dict,desc=f'monthly gs {var}'):                vals = spatial_dict[pix]                vals_gs = T.monthly_vals_to_annual_val(vals, gs, method='array')                # vals_gs_reshape = np.reshape(vals,(-1,12))                vals_gs_reshape = vals_gs                vals_gs_dict = T.dict_zip(year_list,vals_gs_reshape)                spatial_dict_gs_monthly[pix] = vals_gs_dict            flatten_vals_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc=f'{var}'):                pix = row['pix']                if not pix in spatial_dict_gs_monthly:                    flatten_vals_list.append(np.nan)                    continue                year = row['drought_year']                year = int(year)                pre_year_list = list(range(year-4,year))                post_year_list = list(range(year+1,year+5))                all_year_list = pre_year_list + [year] + post_year_list                all_vals_list = []                for year_i in all_year_list:                    if not year_i in spatial_dict_gs_monthly[pix]:                        all_vals_list.append([np.nan]*len(gs))                        continue                    vals = spatial_dict_gs_monthly[pix][year_i]                    all_vals_list.append(vals)                all_vals_list = np.array(all_vals_list)                all_vals_list_flat = all_vals_list.flatten()                flatten_vals_list.append(all_vals_list_flat)            df[f'{var}_monthly'] = flatten_vals_list        T.save_df(df,outf)        T.df_to_excel(df,outf)    def num_to_month(self,num):        month_dict = {            1:'Jan',            2:'Feb',            3:'Mar',            4:'Apr',            5:'May',            6:'Jun',            7:'Jul',            8:'Aug',            9:'Sep',            10:'Oct',            11:'Nov',            12:'Dec',        }        return month_dict[num]    def __reshape_9_year(self,vals_mean):        vals_mean_reshape = vals_mean.reshape(-1, 6)        vals_mean_reshape = vals_mean_reshape[3:]        vals_mean_reshape_flatten = vals_mean_reshape.flatten()        return vals_mean_reshape_flatten    def plot_variables_in_drought_proess_monthly(self):        outdir = join(self.this_class_png, 'variables_in_drought_proess_monthly')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly', 'dataframe.df')        cols = self.var_list        ltd_var = 'ELI_class'        limited_area_list = global_ELI_class        drought_type_list = global_drought_type_list        drought_type_color = {'normal-drought':'b','hot-drought':'r'}        gs = global_gs        df = T.load_df(dff)        for ltd in limited_area_list:            df_ltd = df[df[ltd_var] == ltd]            for col in cols:            # for col in ['VOD-anomaly']:                fname = f'{ltd}_{col}'                print(fname)                outf = join(outdir, f'{fname}.pdf')                plt.figure(figsize=(8*centimeter_factor, 6*centimeter_factor))                for drt in drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    vals = df_drt[f'{col}_monthly'].tolist()                    vals = np.array(vals)                    vals_clean = []                    for val in vals:                        if type(val) == float:                            continue                        vals_clean.append(val)                    vals_clean = np.array(vals_clean)                    vals_clean_new = []                    for ii in vals_clean:                        try:                            if T.is_all_nan(ii):                                continue                            else:                                vals_clean_new.append(list(ii))                        except:                            continue                    vals_clean = np.array(vals_clean_new)                    # exit()                    # for ll in vals_clean:                    #     print(len(ll))                    # print(vals_clean.shape)                    # vals_err = T.uncertainty_err_2d(vals_clean,axis=0)                    vals_err = np.nanstd(vals_clean,axis=0)                    vals_err = vals_err / 12.                    vals_mean = np.nanmean(vals_clean,axis=0)                    vals_err = self.__reshape_9_year(vals_err)                    vals_mean = self.__reshape_9_year(vals_mean)                    date_list = []                    date_str_list = []                    # for year in range(1996,2005):                    for year in range(-1,5):                        # for month in range(1,13):                        for month in range(gs[0],gs[-1]+1):                            # date = datetime.datetime(year,month,1)                            # date_list.append(date)                            date_str = self.num_to_month(month)                            date_str_list.append(f'{year}-{date_str}')                    # plt.errorbar(date_list,vals_mean,yerr=vals_err,label=drt,color=drought_type_color[drt])                    # plt.scatter(date_list,vals_mean,color=drought_type_color[drt],label=drt)                    # vals_mean = SMOOTH().smooth_convolve(vals_mean,window_len=3)                    # vals_err = SMOOTH().smooth_convolve(vals_err,window_len=3)                    # plt.scatter(date_str_list,vals_mean,color=drought_type_color[drt],label=drt)                    plt.plot(date_str_list,vals_mean,color=drought_type_color[drt])                    plt.fill_between(date_str_list,vals_mean-vals_err,vals_mean+vals_err,color=drought_type_color[drt],alpha=0.3,lw=0)                    # plt.plot(date_list,vals_mean)                    # plt.title(fname)                    # plt.xticks(rotation=45,horizontalalignment='right')                    plt.xticks(date_str_list[::6],rotation=45,horizontalalignment='right')                    plt.tight_layout()                # plt.grid()                # plt.show()                plt.hlines(0,0,len(date_str_list)-1,linestyles='--',colors='k')                plt.ylim(-1,0.4)                plt.savefig(outf,dpi=300)                plt.close()                # exit()        T.open_path_and_file(outdir)    def plot_variables_in_drought_proess_monthly_ELI(self):        outdir = join(self.this_class_png, 'plot_variables_in_drought_proess_monthly_ELI')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly', 'dataframe.df')        cols = self.var_list        ltd_var = 'ELI_class'        drought_type_list = global_drought_type_list        gs = global_gs        df = T.load_df(dff)        ELI_col = 'ELI'        ELI_bins = np.linspace(-0.6, 0.6, 11)        # cmap = 'Paired'        cmap_str = 'Spectral_r'        # cmap = sns.color_palette(cmap_str, n_colors=110)        # T.plot_colors_palette(cmap)        # plt.show()        drought_type_color = {'normal-drought':T.gen_colors(len(ELI_bins)-1, cmap_str),                              'hot-drought':T.gen_colors(len(ELI_bins)-1, cmap_str)                              }        for col in cols:            for drt in drought_type_list:                plt.figure(figsize=(14, 6))                df_drt = df[df['drought_type'] == drt]                df_group, bins_list_str = T.df_bin(df_drt, ELI_col, ELI_bins)                flag = 0                for name, df_group_i in df_group:                    ELI_val_left = name.left                    ELI_val_right = name.right                    vals = df_group_i[f'{col}_monthly'].tolist()                    vals = np.array(vals)                    vals_clean = []                    for val in vals:                        if type(val) == float:                            continue                        vals_clean.append(val)                    vals_clean = np.array(vals_clean)                    # vals_err = np.nanstd(vals_clean,axis=0)                    vals_mean = np.nanmean(vals_clean,axis=0)                    date_list = []                    date_str_list = []                    # for year in range(1996,2005):                    for year in range(-4,5):                        # for month in range(1,13):                        for month in range(gs[0],gs[-1]+1):                            # date = datetime.datetime(year,month,1)                            # date_list.append(date)                            date_str = self.num_to_month(month)                            date_str_list.append(f'{year}-{date_str}')                    vals_mean = SMOOTH().smooth_convolve(vals_mean, window_len=7)                    plt.plot(date_str_list,vals_mean,color=drought_type_color[drt][flag],label=f'{ELI_val_left}_{ELI_val_right}',lw=2)                    flag += 1                    plt.xticks(rotation=45,horizontalalignment='right')                plt.title(f'{col}_{drt}')                plt.grid()                plt.legend()                plt.tight_layout()                outf = join(outdir, f'{col}_{drt}.png')                plt.savefig(outf,dpi=300)                plt.close()                # plt.show()    def plot_every_year_pdf(self):        outdir = join(self.this_class_png,'plot_every_year_pdf')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly', 'dataframe.df')        cols = self.var_list        ltd_var = 'ELI_class'        drought_type_list = global_drought_type_list        ELI_class = global_ELI_class_list        gs = global_gs        df = T.load_df(dff)        year_index_list = range(5)        year_index_list = np.array(year_index_list,dtype=int)        year_index_list = year_index_list + 4        # T.print_head_n(df, 10)        for VI in self.var_list:            outdir_i = join(outdir,VI)            T.mk_dir(outdir_i)            for ELI in ELI_class:                df_ELI = df[df['ELI_class'] == ELI]                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    flag = 0                    plt.figure(figsize=(9 * centimeter_factor, 4 * centimeter_factor))                    for year_ind in year_index_list:                        all_vals = []                        for i,row in tqdm(df_drt.iterrows(),total=len(df_drt),desc=f'{year_ind}'):                            vals = row[f'{VI}_monthly']                            vals_year = vals[year_ind*6:(year_ind+1)*6]                            for v in vals_year:                                if np.isnan(v):                                    continue                                all_vals.append(v)                        all_vals = np.array(all_vals)                        all_vals[all_vals<-2] = np.nan                        all_vals[all_vals>2] = np.nan                        all_vals[all_vals==0] = np.nan                        mean = np.nanmedian(all_vals)                        # mean = np.nanmean(all_vals)                        x,y = Plot().plot_hist_smooth(all_vals, bins=100, interpolate_window=5,alpha=0,range=(-2,2))                        y = T.normalize(y,norm_min=0,norm_max=1)                        y = y+flag                        plt.fill_between(x,y,flag,alpha=0.5,label=f'{year_ind}',color=global_ELI_class_color_dict[ELI],lw=0)                        plt.scatter(mean,flag+.5,color=global_ELI_class_color_dict[ELI],zorder=100,s=1)                        plt.yticks([])                        plt.xticks([-2,-1,0,1,2])                        plt.xlim(-2,2)                        plt.title(f'{drt}_{ELI}')                        flag -= 1                        # plt.plot(x,y,label=f'{year_ind}')                    # plt.legend()                    # plt.show()                    outf = join(outdir_i,f'{drt}_{ELI}.pdf')                    plt.savefig(outf)                    plt.close()                    # exit()        passclass Rt_Rs_relationship:    '''    Rt, Rs trade off    '''    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Rt_Rs_relationship', result_root_this_script, mode=2)        pass    def run(self):        self.rs_rt()        pass    def rs_rt(self):        outdir = join(self.this_class_png, 'rs_rt')        T.mk_dir(outdir)        rs_rt_col = get_rs_rt_cols()        rs_rt_col.remove('rt')        rs_col = rs_rt_col        ltd_var = 'ELI_class'        limited_area_list = global_ELI_class        drought_type_list = global_drought_type_list        drought_type_color = {'normal-drought': 'b', 'hot-drought': 'r'}        drought_type_cmap = {'normal-drought': 'Blues', 'hot-drought': 'Reds'}        df = Load_dataframe()        for ltd in limited_area_list:            df_ltd = df[df[ltd_var] == ltd]            for rs_col_i in rs_col:                ax = plt.subplot(111)                for drt in drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    rs = df_drt[rs_col_i].tolist()                    rt = df_drt['rt'].tolist()                    rs = np.array(rs)                    rt = np.array(rt)                    x_lim = (0.9, 1.1)                    y_lim = (0.9, 1.1)                    df_new = pd.DataFrame()                    df_new['rs'] = rs                    df_new['rt'] = rt                    df_new = df_new.dropna()                    df_new = df_new[df_new['rt'] > x_lim[0]]                    df_new = df_new[df_new['rt'] < x_lim[1]]                    df_new = df_new[df_new['rs'] > y_lim[0]]                    df_new = df_new[df_new['rs'] < y_lim[1]]                    rt = df_new['rt'].tolist()                    rs = df_new['rs'].tolist()                    # KDE_plot().plot_scatter_hex(rs,rt,xlim=x_lim,ylim=y_lim,gridsize=40)                    cmap = KDE_plot().cmap_with_transparency(drought_type_cmap[drt], max_alpha=0.2)                    KDE_plot().plot_scatter(rt,rs,cmap=cmap,s=40,ax=ax,marker='o')                plt.xlabel('rt')                plt.ylabel(rs_col_i)                plt.title(f'{ltd}')                outf = join(outdir, f'{ltd}_{rs_col_i}.pdf')                # plt.show()                plt.savefig(outf,dpi=300)                plt.close()                exit()class Over_shoot_drought:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Over_shoot_drought', result_root_this_script, mode=2)        pass    def run(self):        # self.pick_overshoot()        # self.gen_variables_in_drought_proess_monthly()        # self.add_SPI_in_drought_proess_monthly()        # self.add_monthly_ELI_in_drought_proess_monthly()        # self.plot_variables_in_drought_proess_monthly()        # self.plot_variables_in_drought_proess_monthly_overshoot()        self.over_shoot_ratio_ELI()        # self.over_shoot_pfts_koppen_area_ratio_scatter()        # self.over_shoot_every_5_year_area_ratio()        # self.rs_rt_vs_overshoot_ELI_matrix()        # self.rt_vs_overshoot()        # self.overshoot_rs()        # self.post_drought_correlation()        # self.tif_post_drought_correlation()        # self.compare_overshoot_and_longterm_correlation()        pass    def pick_overshoot(self):        outdir= join(self.this_class_arr, 'pick_overshoot')        T.mk_dir(outdir)        df = Load_dataframe()        # dff = join(Drought_events_proess().this_class_arr, 'variables_in_drought_proess_monthly', 'dataframe.df')        # df = T.load_df(dff)        # VI_name = 'NDVI'        # VI_name = 'VOD-anomaly'        # VI_name = 'CSIF-anomaly'        VI_name = 'VOD-k-band-anomaly'        # VI_name = 'GOME2_SIF-anomaly'        year_range = global_VIs_year_range_dict[VI_name]        ndvi_anomaly_dict = Meta_information().load_data(VI_name, year_range)        outf = join(outdir, f'{VI_name}_pick_overshoot.df')        gs = global_gs        start_year = int(year_range.split('-')[0])        end_year = int(year_range.split('-')[1])        year_range_list = list(range(start_year, end_year + 1))        is_over_shoot_list = []        late_min_list = []        late_mean_list = []        drought_year_mean_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            if type(pix) == float:                is_over_shoot_list.append(np.nan)                continue            drought_year = row['drought_year']            ndvi_anomaly = ndvi_anomaly_dict[pix]            ndvi_anomaly_annual = T.monthly_vals_to_annual_val(ndvi_anomaly,gs,method='array')            ndvi_anomaly_annual_dict = T.dict_zip(year_range_list,ndvi_anomaly_annual)            if not drought_year in ndvi_anomaly_annual_dict:                is_over_shoot_list.append(np.nan)                continue            drought_year_ndvi_anomaly = ndvi_anomaly_annual_dict[drought_year]            if type(drought_year_ndvi_anomaly) == float:                is_over_shoot_list.append(np.nan)                continue            early_gs_ndvi_anomaly = drought_year_ndvi_anomaly[:3]            late_gs_ndvi_anomaly = drought_year_ndvi_anomaly[3:]            early_mean = np.nanmean(early_gs_ndvi_anomaly)            late_mean = np.nanmean(late_gs_ndvi_anomaly)            late_min = np.nanmin(late_gs_ndvi_anomaly)            drought_year_mean = np.nanmean(drought_year_ndvi_anomaly)            # if early_mean > 0.5 and late_mean < -0.5:            if early_mean > 0. and late_mean < 0.:            # if early_mean > 0.:            # if early_mean > 0.5 and late_mean < -0.5:                is_over_shoot = 1            else:                is_over_shoot = 0            is_over_shoot_list.append(is_over_shoot)            late_min_list.append(late_min)            late_mean_list.append(late_mean)            drought_year_mean_list.append(drought_year_mean)        df['over_shoot'] = is_over_shoot_list        # df['late_min'] = late_min_list        # df['late_mean'] = late_mean_list        # df['drought_year_mean'] = drought_year_mean_list        # dff = GLobal_var().dff()        T.save_df(df,outf)        T.df_to_excel(df,outf)    def gen_variables_in_drought_proess_monthly(self):        fdir = join(self.this_class_arr,'pick_overshoot')        outdir = join(self.this_class_arr, 'variables_in_drought_proess_monthly')        T.mk_dir(outdir)        # var_list = ['NDVI','GOME2_SIF-anomaly']        var_list = ['NDVI']        gs = global_gs        for var in var_list:            dff = join(fdir, f'{var}_pick_overshoot.df')            df = T.load_df(dff)            outf = join(outdir, f'{var}.df')            year_range = global_VIs_year_range_dict[var]            start_year = int(year_range.split('-')[0])            end_year = int(year_range.split('-')[1])            year_range_list = list(range(start_year, end_year + 1))            spatial_dict = Meta_information().load_data(var,year_range=year_range)            spatial_dict_gs_monthly = {}            for pix in tqdm(spatial_dict,desc=f'monthly gs {var}'):                vals = spatial_dict[pix]                vals_gs = T.monthly_vals_to_annual_val(vals, gs, method='array')                # vals_gs_reshape = np.reshape(vals,(-1,12))                vals_gs_reshape = vals_gs                vals_gs_dict = T.dict_zip(year_range_list,vals_gs_reshape)                spatial_dict_gs_monthly[pix] = vals_gs_dict            flatten_vals_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc=f'{var}'):                pix = row['pix']                if not pix in spatial_dict_gs_monthly:                    flatten_vals_list.append(np.nan)                    continue                year = row['drought_year']                year = int(year)                pre_year_list = list(range(year-4,year))                post_year_list = list(range(year+1,year+5))                all_year_list = pre_year_list + [year] + post_year_list                all_vals_list = []                for year_i in all_year_list:                    if not year_i in spatial_dict_gs_monthly[pix]:                        all_vals_list.append([np.nan]*len(gs))                        continue                    vals = spatial_dict_gs_monthly[pix][year_i]                    all_vals_list.append(vals)                all_vals_list = np.array(all_vals_list)                all_vals_list_flat = all_vals_list.flatten()                flatten_vals_list.append(all_vals_list_flat)            df[f'{var}_monthly'] = flatten_vals_list            T.save_df(df,outf)            T.df_to_excel(df,outf,random=True)    def add_SPI_in_drought_proess_monthly(self):        fdir = join(self.this_class_arr,'variables_in_drought_proess_monthly')        # var_list = ['NDVI','GOME2_SIF-anomaly']        var_list = ['NDVI']        gs = global_gs        for var in var_list:            dff = join(fdir, f'{var}.df')            df = T.load_df(dff)            year_range = global_VIs_year_range_dict[var]            start_year = int(year_range.split('-')[0])            end_year = int(year_range.split('-')[1])            year_range_list = list(range(start_year, end_year + 1))            SPI_data = Meta_information().load_data('SPI',year_range=year_range)            # spatial_dict_gs_monthly = {}            # for pix in tqdm(spatial_dict,desc=f'monthly gs {var}'):            #     vals = spatial_dict[pix]            #     vals_gs = T.monthly_vals_to_annual_val(vals, gs, method='array')            #     # vals_gs_reshape = np.reshape(vals,(-1,12))            #     vals_gs_reshape = vals_gs            #     vals_gs_dict = T.dict_zip(year_range_list,vals_gs_reshape)            #     spatial_dict_gs_monthly[pix] = vals_gs_dict            flatten_vals_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc=f'{var}'):                pix = row['pix']                max_scale = row['max_scale']                max_scale_str = f'spi{int(max_scale):02d}'                spi_spatial_dict = SPI_data[max_scale_str]                if not pix in spi_spatial_dict:                    flatten_vals_list.append(np.nan)                    continue                spi_vals = spi_spatial_dict[pix]                spi_vals = np.array(spi_vals)                vals_gs_reshape = T.monthly_vals_to_annual_val(spi_vals, gs, method='array')                vals_gs_dict = T.dict_zip(year_range_list, vals_gs_reshape)                year = row['drought_year']                year = int(year)                pre_year_list = list(range(year-4,year))                post_year_list = list(range(year+1,year+5))                all_year_list = pre_year_list + [year] + post_year_list                all_vals_list = []                for year_i in all_year_list:                    # print(year_i)                    # print(vals_gs_dict)                    if not year_i in vals_gs_dict:                        all_vals_list.append([np.nan]*len(gs))                        continue                    vals = vals_gs_dict[year_i]                    all_vals_list.append(vals)                all_vals_list = np.array(all_vals_list)                all_vals_list_flat = all_vals_list.flatten()                flatten_vals_list.append(all_vals_list_flat)            df[f'spi_monthly'] = flatten_vals_list            # T.print_head_n(df,10)            # exit()            T.save_df(df,dff)            T.df_to_excel(df,dff,random=False)    def add_monthly_ELI_in_drought_proess_monthly(self):        fdir = join(self.this_class_arr,'variables_in_drought_proess_monthly')        # var_list = ['NDVI','GOME2_SIF-anomaly']        var_list = ['NDVI']        gs = global_gs        for var in var_list:            dff = join(fdir, f'{var}.df')            df = T.load_df(dff)            year_range = global_VIs_year_range_dict[var]            start_year = int(year_range.split('-')[0])            end_year = int(year_range.split('-')[1])            year_range_list = list(range(start_year, end_year + 1))            # monthly_ELI_data = Meta_information().load_data('monthly-ELI',year_range=year_range)            monthly_ELI_data = Meta_information().load_data('monthly-ELI-anomaly',year_range=year_range)            flatten_vals_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc=f'{var}'):                pix = row['pix']                if not pix in monthly_ELI_data:                    flatten_vals_list.append(np.nan)                    continue                monthly_ELI = monthly_ELI_data[pix]                if type(monthly_ELI) == float:                    flatten_vals_list.append(np.nan)                    continue                monthly_ELI = np.array(monthly_ELI,dtype=float)                monthly_ELI[monthly_ELI<-999] = np.nan                if T.is_all_nan(monthly_ELI):                    flatten_vals_list.append(np.nan)                    continue                vals_gs_reshape = T.monthly_vals_to_annual_val(monthly_ELI, gs, method='array')                vals_gs_dict = T.dict_zip(year_range_list, vals_gs_reshape)                year = row['drought_year']                year = int(year)                pre_year_list = list(range(year-4,year))                post_year_list = list(range(year+1,year+5))                all_year_list = pre_year_list + [year] + post_year_list                all_vals_list = []                for year_i in all_year_list:                    # print(year_i)                    # print(vals_gs_dict)                    if not year_i in vals_gs_dict:                        all_vals_list.append([np.nan]*len(gs))                        continue                    vals = vals_gs_dict[year_i]                    all_vals_list.append(vals)                all_vals_list = np.array(all_vals_list)                all_vals_list_flat = all_vals_list.flatten()                flatten_vals_list.append(all_vals_list_flat)            df[f'monthly-ELI-anomaly'] = flatten_vals_list            # T.print_head_n(df,10)            # exit()            T.save_df(df,dff)            T.df_to_excel(df,dff,random=False)    def plot_variables_in_drought_proess_monthly(self):        outdir = join(self.this_class_png, 'variables_in_drought_proess_monthly')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        # VI_list = ['NDVI','GOME2_SIF-anomaly'][::-1]        # variable_list = ['NDVI_monthly','monthly_ELI']        # variable_list = ['monthly-ELI-anomaly']        variable_list = ['NDVI_monthly']        for variable in variable_list:            dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly', f'NDVI.df')            df = T.load_df(dff)            ltd_var = 'ELI_class'            drought_type_list = global_drought_type_list            limited_area = global_ELI_class_list            drought_type_color = {'normal-drought':'b','hot-drought':'r'}            gs = global_gs            # col = 'NDVI'            # col = 'GOME2_SIF-anomaly'            for ltd in limited_area:                df_ltd = df[df[ltd_var] == ltd]                fname = f'{variable}_{ltd}'                print(fname)                outf = join(outdir, f'{fname}.png')                plt.figure(figsize=(14, 6))                for drt in drought_type_list:                    df_drt = df_ltd[df_ltd['drought_type'] == drt]                    vals = df_drt[variable].tolist()                    vals = np.array(vals)                    vals_clean = []                    for val in vals:                        if type(val) == float:                            continue                        # if VI == 'GOME2_SIF-anomaly':                        #     if not len(val) == 54:                        #         continue                        vals_clean.append(val)                    vals_clean = np.array(vals_clean)                    # vals_err = T.uncertainty_err_2d(vals_clean,axis=0)                    vals_err = np.nanstd(vals_clean,axis=0)                    vals_mean = np.nanmean(vals_clean,axis=0)                    vals_mean = SMOOTH().smooth_convolve(vals_mean, window_len=7)                    date_list = []                    date_str_list = []                    # for year in range(1996,2005):                    for year in range(-4,5):                        # for month in range(1,13):                        for month in range(gs[0],gs[-1]+1):                            # date = datetime.datetime(year,month,1)                            # date_list.append(date)                            date_str = Drought_events_process().num_to_month(month)                            date_str_list.append(f'{year}-{date_str}')                    # plt.errorbar(date_list,vals_mean,yerr=vals_err,label=drt,color=drought_type_color[drt])                    # plt.scatter(date_list,vals_mean,color=drought_type_color[drt],label=drt)                    plt.scatter(date_str_list,vals_mean,color=drought_type_color[drt],label=drt)                    plt.plot(date_str_list,vals_mean,color=drought_type_color[drt])                    # plt.plot(date_list,vals_mean)                    plt.title(fname)                    # plt.xticks(rotation=45,horizontalalignment='right')                    plt.xticks(list(range(len(date_str_list)))[::3], date_str_list[::3], rotation=45,                               horizontalalignment='right')                    plt.tight_layout()                plt.grid()                plt.legend()                # plt.show()                plt.savefig(outf,dpi=300)                plt.close()                # exit()    def plot_variables_in_drought_proess_monthly_overshoot(self):        outdir = join(self.this_class_png, 'plot_variables_in_drought_proess_monthly_overshoot')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        # VI_list = ['NDVI','GOME2_SIF-anomaly'][::-1]        drought_type_list = global_drought_type_list        limited_area = global_ELI_class_list        # variable_list = ['monthly-ELI-anomaly']        # variable_list = ['monthly_ELI']        variable_list = ['NDVI_monthly']        for variable in variable_list:            dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly', f'NDVI.df')            df = T.load_df(dff)            over_shoot_list = [0,1]            drought_type_color = {'normal-drought':'b','hot-drought':'r'}            gs = global_gs            for ltd in limited_area:                df_ltd = df[df['ELI_class'] == ltd]                title = f'{variable}_{ltd}'                outf = join(outdir, f'{title}.png')                plt.figure(figsize=(14, 6))                # for drt in drought_type_list:                    # df_drt = df_ltd[df_ltd['drought_type'] == drt]                for over_shoot in over_shoot_list:                    df_os = df_ltd[df_ltd['over_shoot'] == over_shoot]                    vals = df_os[variable].tolist()                    vals = np.array(vals)                    vals_clean = []                    for val in vals:                        if type(val) == float:                            continue                        vals_clean.append(val)                    vals_clean = np.array(vals_clean)                    vals_err = np.nanstd(vals_clean,axis=0)                    vals_mean = np.nanmean(vals_clean,axis=0)                    date_list = []                    date_str_list = []                    for year in range(-4,5):                        for month in range(gs[0],gs[-1]+1):                            date_str = Drought_events_process().num_to_month(month)                            date_str_list.append(f'{year}-{date_str}')                    plt.scatter(date_str_list,vals_mean,label=f'{over_shoot}')                    plt.plot(date_str_list,vals_mean)                plt.title(title)                # plt.xticks(rotation=45,horizontalalignment='right')                plt.xticks(list(range(len(date_str_list)))[::3],date_str_list[::3],rotation=45,horizontalalignment='right')                plt.tight_layout()                plt.grid()                plt.legend()                # plt.show()                plt.savefig(outf,dpi=300)                plt.close()    def over_shoot_ratio_ELI(self):        # VI = 'CSIF-anomaly'        # VI = 'VOD-anomaly'        VI = 'VOD-k-band-anomaly'        # VI = 'NDVI'        dff = join(self.this_class_arr, f'pick_overshoot/{VI}_pick_overshoot.df')        df = T.load_df(dff)        df = df.dropna(subset=['over_shoot'])        outdir = join(self.this_class_png, 'over_shoot_ratio_ELI')        T.mk_dir(outdir)        ltd_var = 'ELI_class'        drought_type_list = global_drought_type_list        ELI_col = 'ELI'        plt.figure(figsize=(8.8*centimeter_factor, 7*centimeter_factor))        # ELI_bins = np.linspace(-0.6, 0.6, 41)        ELI_bins = np.arange(-0.8, 0.66, 0.05)        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            eli_vals = df_drt[ELI_col].tolist()            eli_vals = np.array(eli_vals)            df_group,bins_list_str = T.df_bin(df_drt, ELI_col, ELI_bins)            x = []            y = []            for name,df_group_i in df_group:                left = name.left                df_group_i = df_group_i.dropna(subset=['over_shoot',ELI_col],how='any')                vals = df_group_i['over_shoot'].tolist()                vals = np.array(vals)                vals = vals[vals==1]                ratio = len(vals)/len(df_group_i) * 100                x.append(left)                y.append(ratio)            # plt.figure(figsize=(14, 6))            x = np.array(x)            y = np.array(y)            y = SMOOTH().smooth_convolve(y,window_len=9)            plt.plot(x,y,c=global_drought_type_color_dict[drt],label=drt)            plt.scatter(x,y,c=global_drought_type_color_dict[drt],s=6)        plt.title(VI)        # plt.grid()        plt.legend()        plt.ylabel('over_shoot_ratio (%)')        plt.xlabel('ELI (Energy-limited --> Water-limited)')        # plt.savefig(outf,dpi=300)        # plt.close()        # plt.show()        plt.twinx()        eli_vals = df[ELI_col].tolist()        eli_vals = np.array(eli_vals)        # plt.hist(eli_vals, bins=100, alpha=0.5,density=True,range=(ELI_bins[0],ELI_bins[-1]))        x,y = Plot().plot_hist_smooth(eli_vals,bins=100, alpha=0.0,range=(ELI_bins[0],ELI_bins[-1]))        # plt.plot(x,y)        plt.fill_between(x,y,0,facecolor='gray',alpha=0.2)        plt.ylabel('ELI density')        plt.tight_layout()        # outf = join(outdir, 'eli_hist.png')        outf = join(outdir, f'{VI}.pdf')        plt.savefig(outf,dpi=300)        plt.close()        # plt.show()    def over_shoot_pfts_koppen_area_ratio_scatter(self):        outdir = join(self.this_class_png, 'over_shoot_pfts_koppen_area_ratio_scatter')        T.mk_dir(outdir)        df = Load_dataframe()        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        lc_list = global_lc_list        koppen_list = global_koppen_list        # eli_col = 'ELI'        eli_col = 'late_mean'        # eli_col = 'max_lag'        # eli_col = 'rt'        # eli_col = 'lat'        # eli_col = 'aridity_index'        col = 'over_shoot'        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            plt.figure()            xx = []            yy = []            for lc in lc_list:                df_lc = df_drt[df_drt['landcover_GLC'] == lc]                for kp in koppen_list:                    df_kp = df_lc[df_lc['Koppen'] == kp]                    df_kp_copy = df_kp.copy()                    df_kp_copy = df_kp_copy.dropna(subset=[eli_col, col], how='any')                    vals = df_kp_copy[col]                    vals = np.array(vals)                    vals = vals[vals==1]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_kp_copy) * 100                    x = df_kp_copy[eli_col]                    x = np.array(x)                    x_mean = np.nanmean(x)                    xx.append(x_mean)                    yy.append(ratio)                    plt.scatter(x_mean, ratio, marker=global_lc_marker_dict[lc], color=global_koppen_color_dict[kp],                                label=f'{kp}-{lc}', edgecolors='k', zorder=0, s=100)            # plt.legend()            sns.regplot(xx, yy, scatter=False, color='gray')            plt.title(f'{drt}')            # plt.ylim(20,85)            plt.xlabel(eli_col)            plt.ylabel('over_shoot_ratio (%)')            outf = join(outdir, f'{drt}_{eli_col}.png')            plt.savefig(outf, dpi=300)            plt.close()        # plt.show()    def over_shoot_every_5_year_area_ratio(self):        outdir = join(self.this_class_png, 'over_shoot_every_5_year_area_ratio')        T.mk_dir(outdir)        df = Load_dataframe()        drought_year_col = 'drought_year'        ELI_class_col = 'ELI_class'        col = 'over_shoot'        ELI_class_list = T.get_df_unique_val_list(df, ELI_class_col)        drought_type_list = global_drought_type_list        threshold = global_threshold        group_year_list = [            [1982, 1983, 1984, 1985, 1986],            [1987, 1988, 1989, 1990, 1991],            [1992, 1993, 1994, 1995, 1996],            [1997, 1998, 1999, 2000, 2001],            [2002, 2003, 2004, 2005, 2006],            [2007, 2008, 2009, 2010, 2011],            [2012, 2013, 2014, 2015],        ]        for ltd in ELI_class_list:            df_ltd = df[df[ELI_class_col] == ltd]            for drt in drought_type_list:                df_drt = df_ltd[df_ltd['drought_type'] == drt]                ratio_list = []                year_list = []                for years in group_year_list:                    df_years_list = []                    for year in years:                        df_year = df_drt[df_drt[drought_year_col] == year]                        df_years_list.append(df_year)                    df_years = pd.concat(df_years_list)                    vals = df_years[col].tolist()                    # vals = vals[vals > (1 + threshold)]                    vals = np.array(vals)                    vals = vals[vals == 1]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_years) * 100                    ratio_list.append(ratio)                    year_list.append(f'{years[0]}-{years[-1]}')                # plt.figure(figsize=(6, 3))                plt.plot(year_list, ratio_list, c=global_drought_type_color_dict[drt], label=f'{drt} {ltd}')                plt.scatter(year_list, ratio_list, c=global_drought_type_color_dict[drt])            plt.xticks(rotation=45, ha='right')            plt.title(f'{ltd}')            plt.tight_layout()            plt.legend()            plt.grid()            # plt.show()            plt.savefig(join(outdir, f'{ltd}.png'))            plt.close()        pass    def rs_rt_vs_overshoot_ELI_matrix(self):        outdir = join(self.this_class_png, 'rs_rt_vs_overshoot_ELI_matrix')        T.mk_dir(outdir)        df = Load_dataframe()        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        rs_bins = np.arange(0.9, 1.1, 0.02)        ELI_bins = np.arange(-0.6, 0.65, 0.1)        # rs_cols = ['rt']        for drt in drought_type_list:            outdir_i = join(outdir, drt)            T.mk_dir(outdir_i)            df_drt = df[df['drought_type'] == drt]            for col in rs_cols:                df_group_rs,bins_list_str_rs = T.df_bin(df_drt, col, rs_bins)                matrix = []                y_ticks = []                x_ticks = None                for name_rs,df_group_i_rs in df_group_rs:                    y_ticks.append(name_rs.left)                    df_group_eli,bins_list_str_eli = T.df_bin(df_group_i_rs, 'ELI', ELI_bins)                    temp = []                    x_ticks = []                    for name_eli,df_group_i_eli in df_group_eli:                        x_ticks.append(name_eli.left)                        df_group_i_eli_overshoot = df_group_i_eli[df_group_i_eli['over_shoot'] == 1]                        if len(df_group_i_eli) == 0:                            temp.append(np.nan)                            continue                        ratio = len(df_group_i_eli_overshoot) / len(df_group_i_eli) * 100                        temp.append(ratio)                    matrix.append(temp)                matrix = np.array(matrix)                plt.figure()                plt.imshow(matrix, cmap='RdBu_r', aspect='auto',vmin=0,vmax=40)                plt.colorbar()                plt.yticks(np.arange(len(y_ticks)), y_ticks)                plt.xticks(np.arange(len(x_ticks)), x_ticks)                plt.title(f'{col}_{drt}')                plt.xlabel('ELI')                plt.ylabel(col)                outf = join(outdir_i, f'{col}_{drt}.png')                plt.savefig(outf, dpi=300)                plt.close()        # plt.show()    def rt_vs_overshoot(self):        outdir = join(self.this_class_png, 'rt_vs_overshoot')        T.mk_dir(outdir)        df = Load_dataframe()        rs_cols = get_rs_rt_cols()        drought_type_list = global_drought_type_list        # rs_bins = np.arange(0.9, 1.1, 0.02)        rs_bins = np.arange(-2.5, -0., 0.2)        # rs_bins = np.arange(-2.5, 2.5, 0.05)        # rs_bins = np.arange(-2.5,0, 0.1)        # rs_bins = np.arange(-0,2.5, 0.1)        # print(len(rs_bins))        # exit()        # rs_cols = ['rt']        # rs_cols = ['rs_1']        # rs_cols = ['rs_2']        # rs_cols = ['rs_3']        # rs_cols = ['rs_4']        rs_cols = ['late_min']        # rs_cols = ['late_mean']        # rs_cols = ['drought_year_mean']        # rs_cols = ['delta']        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            for col in rs_cols:                vals = df_drt[col].tolist()                # plt.hist(vals, bins=80, label=drt)                # plt.show()                df_group_rs,bins_list_str_rs = T.df_bin(df_drt, col, rs_bins)                x = []                y = []                for name_rs,df_group_i_rs in df_group_rs:                    df_group_i_eli_overshoot = df_group_i_rs[df_group_i_rs['over_shoot'] == 1]                    if len(df_group_i_rs) == 0:                        x.append(np.nan)                        y.append(np.nan)                        continue                    ratio = len(df_group_i_eli_overshoot) / len(df_group_i_rs) * 100                    x.append(name_rs.left)                    y.append(ratio)                plt.plot(x, y, label=drt)                plt.scatter(x, y)        plt.legend()        plt.grid()        plt.title(f'{col}')        # outf = join(outdir, 'rt_vs_overshoot.png')        # plt.savefig(outf)        # plt.close()        plt.show()    def overshoot_rs(self):        dff = join(self.this_class_arr, 'variables_in_drought_proess_monthly/dataframe.df')        df = T.load_df(dff)        T.print_head_n(df)        over_shoot_col = 'over_shoot'        over_shoot_list = [0,1]        rs_cols = get_rs_rt_cols()        ELI_class_list = global_ELI_class_list        # df = df[df['drought_type'] == 'hot-drought']        df = df[df['ELI_class'] == 'Energy-Limited']        flag = 0        for rs_col in rs_cols:            # plt.figure()            df_eli_over_shoot_1 = df[df[over_shoot_col] == 1]            df_eli_over_shoot_0 = df[df[over_shoot_col] == 0]            vals_1 = df_eli_over_shoot_1[rs_col].tolist()            vals_0 = df_eli_over_shoot_0[rs_col].tolist()            vals_1 = np.array(vals_1)            vals_0 = np.array(vals_0)            vals_1_ratio = len(vals_1[vals_1 < (1 - global_threshold)]) / len(vals_1) * 100            vals_0_ratio = len(vals_0[vals_0 < (1 - global_threshold)]) / len(vals_0) * 100            plt.bar(0+flag*2, vals_1_ratio,color='r')            plt.bar(1+flag*2, vals_0_ratio,color='gray')            flag += 1        plt.show()    def post_drought_correlation(self):        fdir = join(self.this_class_arr,'variables_in_drought_proess_monthly')        # VI_list = ['NDVI', 'GOME2_SIF-anomaly']        gs = global_gs        VI_list = ['NDVI']        for VI in VI_list:            dff = join(fdir,f'{VI}.df')            df = T.load_df(dff)            corr_list = []            for i,row in tqdm(df.iterrows(),total=len(df)):                NDVI_monthly = row['NDVI_monthly']                spei_monthly = row['spi_monthly']                if type(NDVI_monthly) ==float:                    corr_list.append(np.nan)                    continue                if type(spei_monthly) ==float:                    corr_list.append(np.nan)                    continue                NDVI_monthly_post_drought = NDVI_monthly[len(gs)*5:]                spei_monthly_post_drought = spei_monthly[len(gs)*5:]                try:                    r,p = T.nan_correlation(NDVI_monthly_post_drought,spei_monthly_post_drought)                except:                    r = np.nan                corr_list.append(r)            df['post_drought_correlation'] = corr_list            T.save_df(df,dff)            T.df_to_excel(df,dff)    def tif_post_drought_correlation(self):        outdir = join(self.this_class_tif,'post_drought_correlation')        T.mk_dir(outdir)        T.open_path_and_file(outdir)        dff = join(self.this_class_arr,'variables_in_drought_proess_monthly/NDVI.df')        df = T.load_df(dff)        T.print_head_n(df)        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        over_shoot_list = [0,1]        col = 'post_drought_correlation'        for drought_type in drought_type_list:            df_drt = df[df['drought_type'] == drought_type]            for over_shoot in over_shoot_list:                df_over_shoot = df_drt[df_drt['over_shoot'] == over_shoot]                pix_list = T.get_df_unique_val_list(df_over_shoot,'pix')                spatial_dict = T.df_groupby(df_over_shoot,'pix')                # spatial_dict = T.df_to_dic_non_unique_key(df_over_shoot,'pix','post_drought_correlation')                spatial_dict1 = {}                for pix in spatial_dict:                    post_drought_correlation = spatial_dict[pix][col].tolist()                    post_drought_correlation_mean = np.nanmean(post_drought_correlation)                    spatial_dict1[pix] = post_drought_correlation_mean                arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict1)                outf = join(outdir,f'{drought_type}_over_shoot_{over_shoot}.tif')                DIC_and_TIF().arr_to_tif(arr,outf)        pass    def compare_overshoot_and_longterm_correlation(self):        import analysis        fdir = join(self.this_class_tif,'post_drought_correlation')        max_corr_tif = join(analysis.Max_Scale_and_Lag_correlation_SPI().this_class_tif,                            'max_scale_and_month/pearson/pearson_max_r.tif')        max_corr_dict = DIC_and_TIF().spatial_tif_to_dic(max_corr_tif)        arr = DIC_and_TIF().pix_dic_to_spatial_arr(max_corr_dict)        for f in T.listdir(fdir):            if not f.endswith('.tif'):                continue            fpath = join(fdir,f)            spatial_dict_i = DIC_and_TIF().spatial_tif_to_dic(fpath)            arr_i = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict_i)            delta = arr_i - arr            plt.figure()            plt.imshow(delta,cmap='jet',vmin=-0.8,vmax=0.8)            plt.title(f)            plt.colorbar()        plt.show()        pass    def overshoot_test(self):        # 1 decline faster        # 2 sensitivity        # 3 following decline more        # 交界处        # eli 回复时间        passclass Over_shoot_phenology:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Over_shoot_phenology', result_root_this_script, mode=2)        self.VI_list = ['NDVI', 'CSIF-anomaly', 'VOD-anomaly', 'VOD-k-band-anomaly']        pass    def run(self):        # self.add_phenology_sos()        # self.add_phenology_mid()        # self.add_phenology_eos()        # self.add_drought_timing()        # self.phenology_hist()        # self.eos_hist()        # self.phenology_ELI_matrix_overshoot_ratio()        # self.phenology_bin_overshoot_ratio()        # self.phenology_ELI()        # self.phenology_deepest_impact()        # self.phenology_drought_year_tif()        # self.eos_drought_year_tif()        # self.plot_phenology_drought_year_tif()        # self.plot_eos_drought_year_tif()        # self.phenology_and_drought_timing()        # df = self.add_NDVI_process()        # self.add_ET_process()        # self.add_ERA_SM_process()        # self.add_CCI_SM_process()        # self.add_Temprature_process()        # self.add_VPD_process()        # self.add_drought_recovery_time()        # self.process_drought_timing()        # self.process_drought_timing_season()        # self.process_phenology_drought_timing()        # self.process_phenology()        # self.neteffect_drought_timing()        # self.rs_rt_phenology_drought_timing()        # self.legacy_vs_recovery_time_ELI()        # self.legacy_vs_recovery_time_ELI_drought_timing()        pass    def add_phenology_sos(self):        from Chapter4 import analysis        outdir = join(self.this_class_arr,'dataframe')        T.mk_dir(outdir)        dff = join(Over_shoot_drought().this_class_arr, 'pick_overshoot/NDVI_pick_overshoot.df')        df = T.load_df(dff)        outdf = join(outdir,'NDVI.df')        sos_f = join(analysis.Main_flow_Early_Peak_Late_Dormant().this_class_arr,'phenology_0.5_deg/early_start.npy')        sos_dict = T.load_npy(sos_f)        all_year_len = len(global_year_range_list)        sos_spatial_dict = {}        for pix in sos_dict:            sos_list = sos_dict[pix]            if len(sos_list) != all_year_len:                continue            sos_list_anomlay = Pre_Process().cal_anomaly_juping(sos_list)            sos_list_anomlay[sos_list_anomlay>40] = np.nan            sos_list_anomlay[sos_list_anomlay<-40] = np.nan            std = np.nanstd(sos_list)            # sos_list_anomlay = sos_list_anomlay/std            sos_dict_i = T.dict_zip(global_year_range_list,sos_list_anomlay)            sos_spatial_dict[pix] = sos_dict_i        sos_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            year = row['drought_year']            if pix not in sos_spatial_dict:                sos_list.append(np.nan)                continue            sos = sos_spatial_dict[pix][year]            sos_list.append(sos)        df['sos'] = sos_list        # df = Dataframe_func(df).df        T.save_df(df,outdf)        T.df_to_excel(df,outdf)        T.open_path_and_file(outdir)    def add_phenology_mid(self):        from Chapter4 import analysis        outdir = join(self.this_class_arr, 'dataframe')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        early_end_f = join(analysis.Main_flow_Early_Peak_Late_Dormant().this_class_arr,                     'phenology_0.5_deg/early_end.npy')        late_start_f = join(analysis.Main_flow_Early_Peak_Late_Dormant().this_class_arr,                     'phenology_0.5_deg/late_start.npy')        early_end_dict = T.load_npy(early_end_f)        late_start_dict = T.load_npy(late_start_f)        sos_dict = {}        for pix in early_end_dict:            early_end_list = early_end_dict[pix]            late_start_list = late_start_dict[pix]            if len(early_end_list) != len(late_start_list):                continue            mid_list = []            for i in range(len(early_end_list)):                mid = (early_end_list[i] + late_start_list[i])/2                mid_list.append(mid)            sos_dict[pix] = mid_list        all_year_len = len(global_year_range_list)        sos_spatial_dict = {}        for pix in sos_dict:            sos_list = sos_dict[pix]            if len(sos_list) != all_year_len:                continue            sos_list_anomlay = Pre_Process().cal_anomaly_juping(sos_list)            sos_list_anomlay[sos_list_anomlay > 40] = np.nan            sos_list_anomlay[sos_list_anomlay < -40] = np.nan            std = np.nanstd(sos_list)            # sos_list_anomlay = sos_list_anomlay/std            sos_dict_i = T.dict_zip(global_year_range_list, sos_list_anomlay)            sos_spatial_dict[pix] = sos_dict_i        sos_list = []        for i, row in tqdm(df.iterrows(), total=len(df)):            pix = row['pix']            year = row['drought_year']            if pix not in sos_spatial_dict:                sos_list.append(np.nan)                continue            sos = sos_spatial_dict[pix][year]            sos_list.append(sos)        df['mid_doy'] = sos_list        # df = Dataframe_func(df).df        T.save_df(df, dff)        T.df_to_excel(df, dff)        T.open_path_and_file(outdir)    def add_phenology_eos(self):        from Chapter4 import analysis        outdir = join(self.this_class_arr,'dataframe')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        sos_f = join(analysis.Main_flow_Early_Peak_Late_Dormant().this_class_arr,'phenology_0.5_deg/late_end.npy')        sos_dict = T.load_npy(sos_f)        all_year_len = len(global_year_range_list)        sos_spatial_dict = {}        for pix in sos_dict:            sos_list = sos_dict[pix]            if len(sos_list) != all_year_len:                continue            sos_list_anomlay = Pre_Process().cal_anomaly_juping(sos_list)            sos_list_anomlay[sos_list_anomlay>40] = np.nan            sos_list_anomlay[sos_list_anomlay<-40] = np.nan            std = np.nanstd(sos_list)            # sos_list_anomlay = sos_list_anomlay/std            sos_dict_i = T.dict_zip(global_year_range_list,sos_list_anomlay)            sos_spatial_dict[pix] = sos_dict_i        sos_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            year = row['drought_year']            if pix not in sos_spatial_dict:                sos_list.append(np.nan)                continue            sos = sos_spatial_dict[pix][year]            sos_list.append(sos)        df['eos'] = sos_list        # df = Dataframe_func(df).df        T.save_df(df,dff)        T.df_to_excel(df,dff)        T.open_path_and_file(outdir)    def add_drought_timing(self):        import analysis        df = Load_dataframe()        gs = global_gs        drought_timing_fdir = join(analysis.Pick_Drought_Events().this_class_arr,'drought_timing_df')        fpath = join(drought_timing_fdir,'drought_timing.df')        df_timing = T.load_df(fpath)        df_timing_pix_group = T.df_groupby(df_timing,'pix')        drought_mon_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            df_i = df_timing_pix_group[pix]            df_i = df_i[df_i['year']==drought_year]            drought_mon =df_i['mon'].tolist()[0]            drought_mon_list.append(drought_mon)        df['drought_mon'] = drought_mon_list        dff = Dataframe().dff        T.save_df(df,dff)        T.df_to_excel(df,dff)    def phenology_hist(self):        outdir = join(self.this_class_png,'phenology_hist')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        over_shoot_list = [0,1]        flag = 1        plt.figure(figsize=(18*centimeter_factor, 6*centimeter_factor))        for ELI in ELI_list:            plt.subplot(1, 2, flag)            plt.title(f'{ELI}')            flag += 1            df_eli = df[df['ELI_class'] == ELI]            for drought_type in drought_type_list:                df_drt = df_eli[df_eli['drought_type'] == drought_type]                sos_list = df_drt['sos'].tolist()                x,y = Plot().plot_hist_smooth(sos_list,bins=80,alpha=0.0)                plt.plot(x,y,label=drought_type)            plt.legend()            plt.xlabel('SOS anomaly')            plt.ylabel('Density')        plt.tight_layout()        outf = join(outdir,'phenology_hist.pdf')        plt.show()        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)    def eos_hist(self):        outdir = join(self.this_class_png,'eos_hist')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        over_shoot_list = [0,1]        flag = 1        plt.figure(figsize=(18*centimeter_factor, 6*centimeter_factor))        for ELI in ELI_list:            plt.subplot(1, 2, flag)            plt.title(f'{ELI}')            flag += 1            df_eli = df[df['ELI_class'] == ELI]            for drought_type in drought_type_list:                df_drt = df_eli[df_eli['drought_type'] == drought_type]                sos_list = df_drt['eos'].tolist()                x,y = Plot().plot_hist_smooth(sos_list,bins=80,alpha=0.0)                plt.plot(x,y,label=drought_type)            plt.legend()            plt.xlabel('EOS anomaly')            plt.ylabel('Density')        plt.tight_layout()        outf = join(outdir,'phenology_hist.pdf')        # plt.show()        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)    def phenology_ELI_matrix_overshoot_ratio(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        ELI_bins = np.arange(-0.8, 0.85, .2)        SOS_bins = np.arange(-40, 40, 10)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_ELI_bin,df_ELI_bin_str = T.df_bin(df_drt, 'ELI', ELI_bins)            matrix = []            for name_ELI,df_group_ELI_i in df_ELI_bin:                df_SOS_bin,df_SOS_bin_str = T.df_bin(df_group_ELI_i, 'sos', SOS_bins)                temp = []                for name_SOS,df_group_SOS_i in df_SOS_bin:                    # over_shoot_list = df_group_SOS_i['over_shoot'].tolist()                    # rt_list = df_group_SOS_i['rt'].tolist()                    # rt_list = df_group_SOS_i['rs_3'].tolist()                    rt_list = df_group_SOS_i['NDVI-origin_post_0_year_net_change'].tolist()                    # if len(over_shoot_list) == 0:                    #     temp.append(np.nan)                    #     continue                    # one_ratio = over_shoot_list.count(1)/len(over_shoot_list) * 100                    # temp.append(one_ratio)                    mean = np.nanmean(rt_list)                    temp.append(mean)                matrix.append(temp)            matrix = np.array(matrix)            # matrix[matrix==0] = np.nan            plt.figure()            # plt.imshow(matrix, cmap='jet',vmin=0,vmax=50)            # sns.heatmap(matrix, vmin=0, vmax=40, annot=True, fmt='.0f', annot_kws={'size': 8}, linewidths=1,            #             cmap='magma_r')            sns.heatmap(matrix, annot=True, fmt='.2f', annot_kws={'size': 8}, linewidths=1,                        cmap='RdBu')            plt.xticks(np.arange(len(df_SOS_bin_str)), df_SOS_bin_str, rotation=90)            plt.yticks(np.arange(len(df_ELI_bin_str)), df_ELI_bin_str, rotation=0)            plt.title(f'{drt}')            plt.xlabel('SOS anomaly')            plt.ylabel('ELI')        plt.show()        pass    def phenology_bin_overshoot_ratio(self):        outdir = join(self.this_class_png,'phenology_bin_overshoot_ratio')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        SOS_bins = np.arange(-40, 40, 5)        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            for eli in ELI_class_list:                df_eli = df_drt[df_drt['ELI_class'] == eli]                df_SOS_bin,df_SOS_bin_str = T.df_bin(df_eli, 'sos', SOS_bins)                ratio_list = []                for name_SOS,df_group_SOS_i in df_SOS_bin:                    over_shoot_list = df_group_SOS_i['over_shoot'].tolist()                    if len(over_shoot_list) == 0:                        ratio_list.append(np.nan)                        continue                    one_ratio = over_shoot_list.count(1)/len(over_shoot_list) * 100                    ratio_list.append(one_ratio)                # plt.figure()                plt.figure(figsize=(8 * centimeter_factor, 6 * centimeter_factor))                plt.plot(df_SOS_bin_str,ratio_list)                plt.scatter(df_SOS_bin_str,ratio_list,s=20,lw=0,c='r')                plt.title(f'{drt} {eli}')                plt.xlabel('SOS anomaly')                plt.ylabel('Over shoot ratio')                plt.ylim(0,35)                outf = join(outdir,f'{drt}_{eli}.pdf')                # plt.savefig(outf)                # plt.close()        plt.show()        # T.open_path_and_file(outdir)        pass    def phenology_ELI(self):        outdir = join(self.this_class_png,'phenology_bin_overshoot_ratio')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        drought_type_list = global_drought_type_list        ELI_bins = np.arange(-0.8, 0.85, .05)        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_ELI_bin,df_ELI_bin_str = T.df_bin(df_drt, 'ELI', ELI_bins)            x = []            y = []            err = []            for name_ELI,df_group_ELI_i in df_ELI_bin:                sos_list = df_group_ELI_i['sos'].tolist()                if len(sos_list) == 0:                    continue                sos_mean = np.nanmean(sos_list)                # sos_std = np.nanstd(sos_list) / 8.                e,_,_ = T.uncertainty_err(sos_list)                x.append(name_ELI.left)                y.append(sos_mean)                err.append(e)            # plt.figure()            plt.plot(x,y,label=f'{drt}')            # plt.scatter(x,y,s=20,lw=0,c='r')            plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)            # plt.title(f'{drt}')            plt.xlabel('ELI')            plt.ylabel('SOS anomaly')        plt.ylim(-10,10)        plt.legend()        plt.show()        pass    def phenology_deepest_impact(self):        # todo: find the deepest impact of drought, and the relationship between Phenology and deepest impact        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        # df = df[df['drought_type'] == 'hot-drought']        # df = df[df['drought_type'] == 'normal-drought']        # df = df[df['ELI_class'] == 'Energy-Limited']        gs = global_gs        SOS_bins = np.arange(-40, 40, 4)        # SOS_bins = np.arange(-25, 0, 1)        # SOS_bins = np.arange(-20, 20, 1)        VI_spatial_dict = Meta_information().load_data('NDVI')        all_year_range = global_year_range_list        min_val_list = []        for i,row in tqdm(df.iterrows(),total=df.shape[0]):            pix = row['pix']            year = row['drought_year']            VI_vals = VI_spatial_dict[pix]            annual_VI = T.monthly_vals_to_annual_val(VI_vals,grow_season=gs,method='array')            annual_VI_dict = T.dict_zip(all_year_range,annual_VI)            VI_gs = annual_VI_dict[year]            min_VI_gs = np.nanmin(VI_gs)            # min_VI_gs = np.nanmax(VI_gs)            # min_VI_gs = np.nanmean(VI_gs)            # min_VI_gs = np.nansum(VI_gs)            min_val_list.append(min_VI_gs)        df['min_VI_gs'] = min_val_list        # min_val_bins = np.arange(-1.5,1.6,0.1)        # print(min_val_bins)        # exit()        df_group,bins_list_str = T.df_bin(df,'sos',SOS_bins)        # df_group,bins_list_str = T.df_bin(df,'min_VI_gs',min_val_bins)        x = []        y = []        err = []        for name,df_group_i in df_group:            if len(df_group_i) == 0:                continue            vals = df_group_i['min_VI_gs'].tolist()            # vals = df_group_i['sos'].tolist()            mean = np.nanmean(vals)            # mean = np.nanmedian(vals)            # mean = np.nanmin(vals)            err_i,_,_ = T.uncertainty_err(vals)            # err_i = np.nanstd(vals)            x.append(name.left)            y.append(mean)            err.append(err_i)        # x = SMOOTH().smooth_convolve(x,window_len=7)        # y = SMOOTH().smooth_convolve(y,window_len=11)        # err = SMOOTH().smooth_convolve(err,window_len=11)        plt.plot(x,y)        plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)        plt.show()    def phenology_drought_year_tif(self):        outdir = join(self.this_class_tif,'phenology_drought_year')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group_dict = T.df_groupby(df_drt,'pix')            spatial_dict = {}            for pix in df_group_dict:                df_i = df_group_dict[pix]                ELI_class = df_i['ELI_class'].tolist()[0]                sos = df_i['sos'].tolist()                sos_mean = np.nanmean(sos)                spatial_dict[pix] = sos_mean            arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)            out_tif = join(outdir,f'{drt}.tif')            DIC_and_TIF().arr_to_tif(arr,out_tif)    def eos_drought_year_tif(self):        outdir = join(self.this_class_tif,'eos_drought_year_tif')        T.mk_dir(outdir)        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type'] == drt]            df_group_dict = T.df_groupby(df_drt,'pix')            spatial_dict = {}            for pix in df_group_dict:                df_i = df_group_dict[pix]                ELI_class = df_i['ELI_class'].tolist()[0]                sos = df_i['eos'].tolist()                sos_mean = np.nanmean(sos)                spatial_dict[pix] = sos_mean            arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)            out_tif = join(outdir,f'{drt}.tif')            DIC_and_TIF().arr_to_tif(arr,out_tif)    def plot_phenology_drought_year_tif(self):        outdir = join(self.this_class_png,'phenology_drought_year')        T.mk_dir(outdir)        fdir = join(self.this_class_tif,'phenology_drought_year')        drt_list = global_drought_type_list        # T.color_map_choice()        # plt.show()        color_list = ['purple','#FFFFCC','g'][::-1]        cmap = T.cmap_blend(color_list)        plt.register_cmap(name='mycmap',cmap=cmap)        for drt in drt_list:            fpath = join(fdir,f'{drt}.tif')            outf = join(outdir,f'{drt}.png')            fig = plt.figure(figsize=(8 * centimeter_factor, 8 * centimeter_factor))            Plot().plot_ortho(fpath,vmin=-10,vmax=10,is_plot_colorbar=True,cmap='mycmap')            plt.title(drt)            # plt.show()            plt.savefig(outf, dpi=900)            plt.close()        T.open_path_and_file(outdir)    def plot_eos_drought_year_tif(self):        outdir = join(self.this_class_png,'eos_drought_year')        T.mk_dir(outdir)        fdir = join(self.this_class_tif,'eos_drought_year_tif')        drt_list = global_drought_type_list        # T.color_map_choice()        # plt.show()        color_list = ['purple','#FFFFCC','g']        cmap = T.cmap_blend(color_list)        plt.register_cmap(name='mycmap',cmap=cmap)        for drt in drt_list:            fpath = join(fdir,f'{drt}.tif')            outf = join(outdir,f'{drt}.png')            fig = plt.figure(figsize=(8 * centimeter_factor, 8 * centimeter_factor))            Plot().plot_ortho(fpath,vmin=-10,vmax=10,is_plot_colorbar=True,cmap='mycmap')            plt.title(drt)            # plt.show()            plt.savefig(outf, dpi=900)            plt.close()        T.open_path_and_file(outdir)    def phenology_and_drought_timing(self):        outdir = join(self.this_class_png,'phenology_and_drought_timing')        T.mk_dir(outdir)        df = Load_dataframe()        # T.print_head_n(df,10)        mon_list = range(4,11)        mon_list = list(mon_list)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        flag = 1        plt.figure(figsize=(16*centimeter_factor, 8*centimeter_factor))        for ELI in ELI_class_list:            df_ELI = df[df['ELI_class'] == ELI]            plt.subplot(1, 2, flag)            flag += 1            plt.title(f'{ELI}')            for drt in drt_list:                df_drt = df_ELI[df_ELI['drought_type'] == drt]                df_group_dict = T.df_groupby(df_drt, 'drought_mon')                x = []                y = []                err = []                box_list = []                for mon in mon_list:                    df_i = df_group_dict[mon]                    sos_list = df_i['sos'].tolist()                    sos_list = T.remove_np_nan(sos_list)                    mean = np.nanmean(sos_list)                    err_i,_,_ = T.uncertainty_err(sos_list)                    x.append(mon)                    y.append(mean)                    err.append(err_i)                    box_list.append(sos_list)                plt.boxplot(box_list,labels=mon_list,showfliers=False)                plt.plot(x,y,label=drt)                plt.scatter(x,y,zorder=10)                plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)                plt.xticks(mon_list)        outf = join(outdir,f'phenology_and_drought_timing.pdf')        plt.legend()        plt.show()        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)        pass    def add_NDVI_process(self):        df = Load_dataframe()        NDVI_spatial_dict = Meta_information().load_data('NDVI-anomaly_detrend')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['NDVI_progress'] = NDVI_list_all        return df    def add_ET_process(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        NDVI_spatial_dict = Meta_information().load_data('GLEAM-ET')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['ET_progress'] = NDVI_list_all        T.save_df(df,dff)        T.df_to_excel(df,dff)    def add_ERA_SM_process(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        NDVI_spatial_dict = Meta_information().load_data('ERA-SM')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['ERA_SM_progress'] = NDVI_list_all        T.save_df(df,dff)        T.df_to_excel(df,dff)    def add_CCI_SM_process(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        NDVI_spatial_dict = Meta_information().load_data('CCI-SM')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['CCI-SM_progress'] = NDVI_list_all        T.save_df(df,dff)        T.df_to_excel(df,dff)    def add_VPD_process(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        NDVI_spatial_dict = Meta_information().load_data('VPD')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['VPD_progress'] = NDVI_list_all        T.save_df(df,dff)        T.df_to_excel(df,dff)    def add_Temprature_process(self):        dff = join(self.this_class_arr,'dataframe/NDVI.df')        df = T.load_df(dff)        NDVI_spatial_dict = Meta_information().load_data('Temperature-detrend')        year_list = global_year_range_list        gs = global_gs        NDVI_list_all = []        for i,row in tqdm(df.iterrows(),total=len(df)):            pix = row['pix']            drought_year = row['drought_year']            NDVI = NDVI_spatial_dict[pix]            NDVI_gs = T.monthly_vals_to_annual_val(NDVI,gs,method='array')            NDVI_gs_dict = T.dict_zip(year_list,NDVI_gs)            NDVI_list = []            year_list_i = []            for y in range(-1,5):                y_i = drought_year+y                if y_i in NDVI_gs_dict:                    NDVI_list.append(NDVI_gs_dict[drought_year+y])                else:                    NDVI_list.append([np.nan]*len(gs))                year_list_i.append(y_i)            NDVI_list = np.array(NDVI_list)            NDVI_list = NDVI_list.flatten()            NDVI_list_all.append(NDVI_list)        df['Temperature_progress'] = NDVI_list_all        T.save_df(df,dff)        T.df_to_excel(df,dff)    def add_drought_recovery_time(self):        from Chapter4 import analysis        recovery_tif = join(analysis.result_root_this_script, 'Main_flow_Tif/tif_recovery_time/tif_recovery_time_Y_new.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(recovery_tif)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        df = T.add_spatial_dic_to_df(df, spatial_dict, 'recovery_time')        T.print_head_n(df, 10)        T.save_df(df, dff)        T.df_to_excel(df, dff)        pass    def process_drought_timing(self):        # outdir = join(self.this_class_png, 'phenology_and_drought_timing')        # T.mk_dir(outdir)        df = self.add_NDVI_process()        # T.print_head_n(df,10)        mon_list = range(4, 11)        mon_list = list(mon_list)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        flag = 1        color_list = T.gen_colors(len(mon_list))        # plt.figure(figsize=(16 * centimeter_factor, 8 * centimeter_factor))        for ELI in ELI_class_list:            df_ELI = df[df['ELI_class'] == ELI]            # plt.subplot(1, 2, flag)            # plt.title(f'{ELI}')            for drt in drt_list:                df_drt = df_ELI[df_ELI['drought_type'] == drt]                df_group_dict = T.df_groupby(df_drt, 'drought_mon')                plt.subplot(2, 2, flag)                flag += 1                for mon in mon_list:                    df_i = df_group_dict[mon]                    NDVI_progress = df_i['NDVI_progress'].tolist()                    # NDVI_progress = df_i['Temperature_progress'].tolist()                    y = np.nanmean(NDVI_progress,axis=0)                    # y = SMOOTH().smooth_convolve(y,window_len=3)                    err= T.uncertainty_err_2d(NDVI_progress)                    x = list(range(len(NDVI_progress[0])))                    plt.plot(x,y,label=mon,color=color_list[mon-4])                    # plt.ylim(-1,0.4)                    # plt.scatter(x,y,zorder=10)                    # plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)                title = f'{ELI}_{drt}'                plt.title(title)                plt.legend()        plt.show()    def process_phenology(self):        outdir = join(self.this_class_png, 'process_phenology')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        # T.print_head_n(df,10)        df = df.dropna(subset=['sos'])        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        sos_type = ['advanced','delayed']        color_dict = {            'advanced':'g',            'delayed':'purple'        }        plt.figure(figsize=(16 * centimeter_factor, 8 * centimeter_factor))        for sos_type_i in sos_type:            drought_type = df['drought_type'].tolist()            ELI_class = df['ELI_class'].tolist()            drought_type = np.array(drought_type)            ELI_class = np.array(ELI_class)            condition_drt = drought_type == 'hot-drought'            condition_ELI = ELI_class == 'Water-limited'            condition = np.logical_and(condition_drt,condition_ELI)            # modify sos under condition            # df.loc[condition,'sos'] = df.loc[condition,'sos'] + 10            # exit()            if sos_type_i == 'advanced':                df_sos = df[df['sos'] < 0]            else:                df_sos = df[df['sos'] > 0]            flag = 1            for ELI in ELI_class_list:                df_ELI = df_sos[df_sos['ELI_class'] == ELI]                for drt in drt_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    NDVI_progress = df_drt['NDVI_progress'].tolist()                    # NDVI_progress = df_i['Temperature_progress'].tolist()                    y = np.nanmean(NDVI_progress,axis=0)                    # y1 = SMOOTH().smooth_convolve(y,window_len=9)                    # err= T.uncertainty_err_2d(NDVI_progress)                    err = np.nanstd(NDVI_progress,axis=0)/16.                    x = list(range(len(NDVI_progress[0])))                    plt.subplot(2, 2, flag)                    flag += 1                    plt.plot(x,y,label=f'{sos_type_i}',color=color_dict[sos_type_i])                    plt.hlines(0,0,x[-1],linestyles='--',color='gray')                    # plt.plot(x,y1,'--')                    plt.ylim(-0.8,0.5)                    # plt.scatter(x,y,zorder=10)                    plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.1,color=color_dict[sos_type_i],linewidth=0)                    title = f'{ELI}_{drt}'                    plt.title(title)                    plt.legend()        # plt.show()        outf = join(outdir, 'process_phenology.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)    def process_phenology_drought_timing(self):        outdir = join(self.this_class_png, 'process_phenology_drought_timing')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        # T.print_head_n(df,10)        df = df.dropna(subset=['sos'])        early = [5.,6.]        peak = [7.,8.]        late = [9.,10.]        df['early'] = df['drought_mon'].apply(lambda x: 1 if x in early else 0)        df['peak'] = df['drought_mon'].apply(lambda x: 1 if x in peak else 0)        df['late'] = df['drought_mon'].apply(lambda x: 1 if x in late else 0)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        sos_type = ['advanced', 'delayed']        color_dict = {            'advanced': 'g',            'delayed': 'purple'        }        drought_timing_list = ['early','peak','late']        for drought_timing in drought_timing_list:            df_timing = df[df[drought_timing] == 1]            plt.figure(figsize=(16 * centimeter_factor, 8 * centimeter_factor))            for sos_type_i in sos_type:                drought_type = df_timing['drought_type'].tolist()                ELI_class = df_timing['ELI_class'].tolist()                drought_type = np.array(drought_type)                ELI_class = np.array(ELI_class)                condition_drt = drought_type == 'hot-drought'                condition_ELI = ELI_class == 'Water-limited'                condition = np.logical_and(condition_drt, condition_ELI)                # modify sos under condition                # df.loc[condition,'sos'] = df.loc[condition,'sos'] + 10                # exit()                if sos_type_i == 'advanced':                    df_sos = df_timing[df_timing['sos'] < 0]                else:                    df_sos = df_timing[df_timing['sos'] > 0]                flag = 1                for ELI in ELI_class_list:                    df_ELI = df_sos[df_sos['ELI_class'] == ELI]                    for drt in drt_list:                        df_drt = df_ELI[df_ELI['drought_type'] == drt]                        NDVI_progress = df_drt['NDVI_progress'].tolist()                        # NDVI_progress = df_i['Temperature_progress'].tolist()                        y = np.nanmean(NDVI_progress, axis=0)                        # y1 = SMOOTH().smooth_convolve(y,window_len=9)                        # err= T.uncertainty_err_2d(NDVI_progress)                        err = np.nanstd(NDVI_progress, axis=0) / 16.                        x = list(range(len(NDVI_progress[0])))                        plt.subplot(2, 2, flag)                        flag += 1                        plt.plot(x, y, label=f'{sos_type_i}', color=color_dict[sos_type_i])                        plt.hlines(0, 0, x[-1], linestyles='--', color='gray')                        # plt.plot(x,y1,'--')                        plt.ylim(-0.8, 0.5)                        # plt.scatter(x,y,zorder=10)                        plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.1,                                         color=color_dict[sos_type_i], linewidth=0)                        title = f'{ELI}_{drt}'                        plt.title(title)                        # plt.legend()            plt.suptitle(f'{drought_timing}')            # plt.show()            outf = join(outdir, f'{drought_timing}' + '.pdf')            plt.savefig(outf)            plt.close()            T.open_path_and_file(outdir)            pass    def process_drought_timing_season(self):        outdir = join(self.this_class_png, 'process_drought_timing_season')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        # T.print_head_n(df,10)        df = df.dropna(subset=['sos'])        early = [5.,6.]        peak = [7.,8.]        late = [9.,10.]        df['early'] = df['drought_mon'].apply(lambda x: 1 if x in early else 0)        df['peak'] = df['drought_mon'].apply(lambda x: 1 if x in peak else 0)        df['late'] = df['drought_mon'].apply(lambda x: 1 if x in late else 0)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        drought_timing_list = ['early','peak','late']        flag = 1        plt.figure(figsize=(16 * centimeter_factor, 14 * centimeter_factor))        for drought_timing in drought_timing_list:            df_timing = df[df[drought_timing] == 1]            for ELI in ELI_class_list:                df_ELI = df_timing[df_timing['ELI_class'] == ELI]                for drt in drt_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    # NDVI_progress = df_drt['NDVI_progress'].tolist()                    # NDVI_progress = df_drt['ET_progress'].tolist()                    # NDVI_progress = df_drt['ERA_SM_progress'].tolist()                    NDVI_progress = df_drt['VPD_progress'].tolist()                    # NDVI_progress = df_i['Temperature_progress'].tolist()                    NDVI_progress_new = []                    for v in NDVI_progress:                        if len(v) == 6:                            continue                        NDVI_progress_new.append(v)                    NDVI_progress = np.array(NDVI_progress_new)                    y = np.nanmean(NDVI_progress, axis=0)                    # exit()                    # y1 = SMOOTH().smooth_convolve(y,window_len=9)                    # err= T.uncertainty_err_2d(NDVI_progress)                    err = np.nanstd(NDVI_progress, axis=0) / 8.                    x = list(range(len(NDVI_progress[0])))                    plt.subplot(3,2, flag)                    plt.plot(x, y,color=global_drought_type_color_dict[drt],label=f'{drt}')                    plt.xticks(list(range(len(x)))[::6],[-1,0,1,2,3,4])                    plt.hlines(0, 0, x[-1], linestyles='--', color='gray')                    # plt.plot(x,y1,'--')                    # plt.ylim(-1.5, 0.6)                    plt.ylim(-.8, 1.6)                    # plt.scatter(x,y,zorder=10)                    plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2,                                     linewidth=0)                    title = f'{ELI}_{drought_timing}'                    plt.title(title)                    # plt.legend()                flag += 1            # plt.suptitle(f'{drought_timing}')        plt.tight_layout()        plt.legend()        # plt.show()        # outf = join(outdir, 'process_drought_timing_season.pdf')        outf = join(outdir, 'VPD.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        pass    def rs_rt_phenology_drought_timing(self):        outdir = join(self.this_class_png, 'rs_rt_phenology_drought_timing')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        # T.print_head_n(df,10)        # exit()        rs_list = ['rt','rs_1','rs_2','rs_3','rs_4']        df = df.dropna(subset=['sos'])        early = [5.,6.]        peak = [7.,8.]        late = [9.,10.]        df['early'] = df['drought_mon'].apply(lambda x: 1 if x in early else 0)        df['peak'] = df['drought_mon'].apply(lambda x: 1 if x in peak else 0)        df['late'] = df['drought_mon'].apply(lambda x: 1 if x in late else 0)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        sos_type = ['advanced', 'delayed']        color_dict = {            'advanced': 'g',            'delayed': 'purple'        }        drought_timing_list = ['early','peak','late']        for drought_timing in drought_timing_list:            df_timing = df[df[drought_timing] == 1]            # plt.figure(figsize=(16 * centimeter_factor, 8 * centimeter_factor))            for sos_type_i in sos_type:                drought_type = df_timing['drought_type'].tolist()                ELI_class = df_timing['ELI_class'].tolist()                drought_type = np.array(drought_type)                ELI_class = np.array(ELI_class)                condition_drt = drought_type == 'hot-drought'                condition_ELI = ELI_class == 'Water-limited'                condition = np.logical_and(condition_drt, condition_ELI)                # modify sos under condition                # df.loc[condition,'sos'] = df.loc[condition,'sos'] + 10                # exit()                if sos_type_i == 'advanced':                    df_sos = df_timing[df_timing['sos'] < 0]                else:                    df_sos = df_timing[df_timing['sos'] > 0]                flag = 1                for ELI in ELI_class_list:                    df_ELI = df_sos[df_sos['ELI_class'] == ELI]                    for drt in drt_list:                        df_drt = df_ELI[df_ELI['drought_type'] == drt]                        x = []                        y = []                        flag1 = 0                        for rs in rs_list:                            # NDVI_progress = df_drt['NDVI_progress'].tolist()                            rs_val = df_drt[rs].tolist()                            rs_val = np.array(rs_val)                            rs_val_less_than_0 = rs_val < .95                            ratio = np.sum(rs_val_less_than_0) / len(rs_val) * 100                            # NDVI_progress = df_i['Temperature_progress'].tolist()                            # y = np.nanmean(NDVI_progress, axis=0)                            y.append(ratio)                            # y1 = SMOOTH().smooth_convolve(y,window_len=9)                            # err= T.uncertainty_err_2d(NDVI_progress)                            # err = np.nanstd(NDVI_progress, axis=0) / 16.                            if sos_type_i == 'advanced':                                factor = 1                            else:                                factor = 0                            x.append(flag1+factor)                            flag1 += 3                        plt.subplot(2, 2, flag)                        flag += 1                        plt.bar(x, y, label=f'{sos_type_i}', color=color_dict[sos_type_i])                        # plt.hlines(0, 0, x[-1], linestyles='--', color='gray')                        # plt.plot(x,y1,'--')                        plt.ylim(0, 65)                        # plt.scatter(x,y,zorder=10)                        # plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.1,                        #                  color=color_dict[sos_type_i], linewidth=0)                        title = f'{ELI}_{drt}'                        plt.title(title)                        # plt.legend()            plt.suptitle(f'{drought_timing}')            # plt.show()            outf = join(outdir, f'{drought_timing}' + '.pdf')            plt.savefig(outf)            plt.close()        T.open_path_and_file(outdir)        pass    def neteffect_drought_timing(self):        outdir = join(self.this_class_png, 'neteffect_drought_timing')        T.mk_dir(outdir)        # df = Load_dataframe()        df = self.add_NDVI_process()        # T.print_head_n(df,10)        mon_list = range(5, 11)        mon_list = list(mon_list)        drt_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        # ELI_class_list = ['Water-Limited']        # ELI_class_list = ['Energy-Limited']        gs = global_gs        year_post_drought = range(1,6)        for year_post in year_post_drought:            print(year_post)            neteffect_list = []            for i,row in df.iterrows():                pix = row['pix']                drought_year = row['drought_year']                NDVI_progress = row['NDVI_progress'].tolist()                NDVI_progress_reshape = np.reshape(NDVI_progress,(len(gs),-1))                # drought_year_NDVI = NDVI_progress_reshape[1:7]                # drought_year_NDVI = NDVI_progress_reshape[1:1+year_post]                drought_year_NDVI = NDVI_progress_reshape[year_post]                # neteffect = np.nansum(drought_year_NDVI)/len(drought_year_NDVI)                neteffect = np.nanmean(drought_year_NDVI)                neteffect_list.append(neteffect)            df[f'neteffect_{year_post}'] = neteffect_list        plt.figure(figsize=(20 * centimeter_factor, 7.5 * centimeter_factor))        flag = 1        ylim_dict = {'Water-Limited':[-1,0.5],'Energy-Limited':[-.5,0.5]}        for ELI in ELI_class_list:            for year_post in year_post_drought:                df_ELI = df[df['ELI_class'] == ELI]                plt.subplot(2, 5, flag)                flag += 1                for drt in drt_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_group_dict = T.df_groupby(df_drt, 'drought_mon')                    x = []                    y = []                    err = []                    for mon in mon_list:                        df_i = df_group_dict[mon]                        neteffect = df_i[f'neteffect_{year_post}'].tolist()                        x.append(mon)                        y.append(np.nanmean(neteffect))                        err_i,_,_ = T.uncertainty_err(neteffect)                        # err_i = np.nanstd(neteffect)/16.                        err.append(err_i)                    plt.plot(x,y,color=global_drought_type_color_dict[drt])                    plt.scatter(x,y,zorder=10,color=global_drought_type_color_dict[drt],linewidth=0)                    plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2,color=global_drought_type_color_dict[drt],linewidth=0)                    # plt.ylim(ylim_dict[ELI])                    plt.ylim(ylim_dict[ELI])                    plt.xticks(x)        plt.tight_layout()        plt.show()        outf = join(outdir, 'neteffect_drought_timing.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)    def legacy_vs_recovery_time_ELI(self):        outdir = join(self.this_class_png, 'legacy_vs_recovery_time_ELI')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        T.print_head_n(df,10)        rs_rt_list = get_rs_rt_cols()        recovery_bins = np.linspace(0, 9, 10)        drt_type = global_drought_type_list        ELI_list = global_ELI_class_list        y_lim_dict = {            'Water-Limited': [85, 105],            'Energy-Limited': [95, 101],        }        plt.figure(figsize=(20 * centimeter_factor, 9 * centimeter_factor))        flag = 1        for ELI in ELI_list:            df_ELI = df[df['ELI_class'] == ELI]            for rs_rt in rs_rt_list:                plt.subplot(2, 5, flag)                flag += 1                for drt in drt_type:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    x = []                    y = []                    err = []                    df_group, bins_list_str = T.df_bin(df_drt, 'recovery_time', recovery_bins)                    for name, df_group_i in df_group:                        rs = df_group_i[rs_rt].tolist()                        rs_mean = np.nanmean(rs) * 100                        err_i,_,_= T.uncertainty_err(rs)                        err_i = err_i * 100                        x.append(name.left)                        y.append(rs_mean)                        err.append(err_i)                    plt.plot(x,y,color=global_drought_type_color_dict[drt])                    plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)                    plt.title(f'{rs_rt}, {ELI}')                    plt.ylim(y_lim_dict[ELI])                    plt.hlines(100, 0, 8, linestyles='dashed',colors='grey')        plt.tight_layout()        outf = join(outdir, 'legacy_vs_recovery_time_ELI.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)    def legacy_vs_recovery_time_ELI_drought_timing(self):        outdir = join(self.this_class_png, 'legacy_vs_recovery_time_ELI_drought_timing')        T.mk_dir(outdir)        dff = join(self.this_class_arr, 'dataframe/NDVI.df')        df = T.load_df(dff)        T.print_head_n(df,10)        rs_rt_list = get_rs_rt_cols()        recovery_bins = np.linspace(0, 9, 10)        drt_type = global_drought_type_list        ELI_list = global_ELI_class_list        y_lim_dict = {            'Water-Limited': [82, 108],            'Energy-Limited': [92, 103],        }        early = [5., 6.]        peak = [7., 8.]        late = [9., 10.]        df['early'] = df['drought_mon'].apply(lambda x: 1 if x in early else 0)        df['peak'] = df['drought_mon'].apply(lambda x: 1 if x in peak else 0)        df['late'] = df['drought_mon'].apply(lambda x: 1 if x in late else 0)        drought_timing_list = ['early', 'peak', 'late']        for drought_timing in drought_timing_list:            df_timing = df[df[drought_timing] == 1]            plt.figure(figsize=(20 * centimeter_factor, 9 * centimeter_factor))            flag = 1            for ELI in ELI_list:                df_ELI = df_timing[df_timing['ELI_class'] == ELI]                for rs_rt in rs_rt_list:                    plt.subplot(2, 5, flag)                    flag += 1                    for drt in drt_type:                        df_drt = df_ELI[df_ELI['drought_type'] == drt]                        x = []                        y = []                        err = []                        df_group, bins_list_str = T.df_bin(df_drt, 'recovery_time', recovery_bins)                        for name, df_group_i in df_group:                            rs = df_group_i[rs_rt].tolist()                            rs_mean = np.nanmean(rs) * 100                            err_i,_,_= T.uncertainty_err(rs)                            err_i = err_i * 100                            x.append(name.left)                            y.append(rs_mean)                            err.append(err_i)                        plt.plot(x,y,color=global_drought_type_color_dict[drt])                        plt.fill_between(x, np.array(y) - np.array(err), np.array(y) + np.array(err), alpha=0.2)                        plt.title(f'{rs_rt}, {ELI}')                        plt.ylim(y_lim_dict[ELI])                        plt.hlines(100, 0, 8, linestyles='dashed',colors='grey')            plt.tight_layout()            outf = join(outdir, f'{drought_timing}.pdf')            plt.savefig(outf)            plt.close()        T.open_path_and_file(outdir)class Compensation_Excerbation:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Compensation_Excerbation', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Compensation_Excerbation.df')        pass    def run(self):        # df = Over_shoot_phenology().add_NDVI_process()        df = self.__gen_df_init()        # calculate        # df = self.identification_two_modes(df)        # df = self.magnitude(df)        # T.save_df(df, self.dff)        # T.df_to_excel(df, self.dff)        # statistic        # self.plot_different_modes(df)        # self.two_mode_ratio(df)        # self.spatial_two_mode_magnitude(df)        # self.plot_spatial_two_mode_magnitude()        # self.two_region_delta_bar()        # self.two_region_trajectory(df)        # self.spatial_two_mode_ratio(df)        # self.two_region_ratio(df)        # self.ELI_gradient(df)        # self.ELI_gradient_ratio(df)        # self.Drought_year_spatial_tif(df)        # self.plot_Drought_year_spatial_tif()        # self.pdf_Drought_year_spatial_tif()        # self.AI_gradient_Drought_year_spatial_tif()        # self.rs_rt_area_ratio_bar(df)        self.delta_area_ratio_bar()        # self.timing_trajectory(df)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def identification_two_modes(self,df):        mode_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            drought_year = row['drought_year']            NDVI_progress = row['NDVI_progress'].tolist()            NDVI_progress = np.array(NDVI_progress)            NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            drought_year_NDVI = NDVI_progress_reshape[1]            max_NDVI = np.nanmax(drought_year_NDVI)            min_NDVI = np.nanmin(drought_year_NDVI)            max_NDVI_arg = np.nanargmax(drought_year_NDVI)            min_NDVI_arg = np.nanargmin(drought_year_NDVI)            if max_NDVI > 0 and min_NDVI < 0:                if abs(max_NDVI) > abs(min_NDVI):                    ratio = abs(max_NDVI) / abs(min_NDVI)                else:                    ratio = abs(min_NDVI) / abs(max_NDVI)                # print('ratio',ratio)                if max_NDVI_arg < min_NDVI_arg:                    if max_NDVI_arg <= 2 and min_NDVI_arg >= 2:                        if ratio < 3:                            mode = 'Compensation'                        else:                            mode = 'other'                    else:                        mode = 'other'                else:                    mode = 'other'            elif min_NDVI> 0:                mode = 'Positive_effect'            elif max_NDVI < 0:                mode = 'Exacerbation'            else:                raise IOError('error')            mode_list.append(mode)        df['Compensation_Exacerbation'] = mode_list        return df    def magnitude(self,df):        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        magnitude_list = []        for i,row in tqdm(df.iterrows(),total=len(df)):            mode = row['Compensation_Exacerbation']            NDVI_progress = row['NDVI_progress'].tolist()            NDVI_progress = np.array(NDVI_progress)            NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            drought_year_NDVI = NDVI_progress_reshape[1]            max_NDVI = np.nanmax(drought_year_NDVI)            min_NDVI = np.nanmin(drought_year_NDVI)            if mode == 'Compensation':                magnitude = max_NDVI - min_NDVI            elif mode == 'Exacerbation':                magnitude = min_NDVI            elif mode == 'Positive_effect':                magnitude = max_NDVI            elif mode == 'other':                magnitude = np.nan            else:                raise IOError('error')            magnitude_list.append(magnitude)        df['magnitude'] = magnitude_list        return df    def plot_different_modes(self,df):        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        for mode in Compensation_Exacerbation_mode_list:            df_mode = df[df['Compensation_Exacerbation'] == mode]            vals_list = []            for i,row in df_mode.iterrows():                NDVI_progress = row['NDVI_progress'].tolist()                NDVI_progress = np.array(NDVI_progress)                NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                drought_year_NDVI = NDVI_progress_reshape[1]                vals_list.append(drought_year_NDVI)            mean = np.nanmean(vals_list,axis=0)            std = np.nanstd(vals_list,axis=0) / 4.            plt.figure()            plt.plot(mean,label=mode)            plt.fill_between(range(len(mean)),mean-std,mean+std,alpha=0.3)            plt.legend()        plt.show()    def two_mode_ratio(self,df):        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        Compensation_Exacerbation_mode_list = ('Compensation', 'Exacerbation', 'Positive_effect', 'other')        for drt in drought_type_list:            for ELI_class in ELI_class_list:                df_drt = df[df['drought_type'] == drt]                df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                # print(drt,ELI_class,len(df_ELI))                mode_list = df_ELI['Compensation_Exacerbation'].tolist()                print('------------------')                print(drt,ELI_class,len(mode_list))                print('------------------')                for mode in Compensation_Exacerbation_mode_list:                    mode_count = mode_list.count(mode)                    ratio = mode_count / len(mode_list)                    print(mode,ratio)    def spatial_two_mode_magnitude(self,df):        outdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        T.mk_dir(outdir)        pix_list = T.get_df_unique_val_list(df,'pix')        # print(len(pix_list))        drought_type_list = global_drought_type_list        drought_year_list = range(1, 5)        for drought_year_i in drought_year_list:            df_group_dict = T.df_groupby(df,'pix')            spatial_dict = {}            for pix in tqdm(pix_list):                df_pix = df_group_dict[pix]                df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                if len(df_hot) == 0 or len(df_normal) == 0:                    continue                # NDVI_progress = row['NDVI_progress'].tolist()                # NDVI_progress = np.array(NDVI_progress)                # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                # drought_year_NDVI = NDVI_progress_reshape[1]                NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                mean_hot = np.nanmean(NDVI_progress_hot,axis=0)                mean_normal = np.nanmean(NDVI_progress_normal,axis=0)                mean_hot_reshape = np.array(mean_hot).reshape(-1,6)                mean_normal_reshape = np.array(mean_normal).reshape(-1,6)                mean_hot_drought_year = mean_hot_reshape[1:drought_year_i+1]                mean_normal_drought_year = mean_normal_reshape[1:drought_year_i+1]                mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                spatial_dict[pix] = delta            outf = join(outdir, f'spatial_two_mode_magnitude_{drought_year_i}.tif')            DIC_and_TIF().pix_dic_to_tif(spatial_dict,outf)            # arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)            # plt.imshow(arr,vmin=-1,vmax=1,cmap='bwr_r',interpolation='nearest')            # plt.colorbar()            # DIC_and_TIF().plot_back_ground_arr(global_land_tif)            # plt.show()    def plot_spatial_two_mode_magnitude(self):        fdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        outdir = join(self.this_class_png, 'spatial_two_mode_magnitude')        T.mk_dir(outdir)        for f in T.listdir(fdir):            fpath = join(fdir,f)            outf = join(outdir,f.replace('.tif','.png'))            m,ret = Plot().plot_ortho(fpath,vmin=-1,vmax=1,cmap='RdBu')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def two_region_delta_bar(self):        fdir = join(self.this_class_tif,'spatial_two_mode_magnitude')        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        spatial_dicts = {}        key_list = []        for f in T.listdir(fdir):            fpath = join(fdir,f)            spatial_dict = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dicts[f.replace('.tif','')] = spatial_dict            key_list.append(f.replace('.tif',''))        df = T.spatial_dics_to_df(spatial_dicts)        df = Dataframe_func(df).df        flag = 0        for ELI_class in ELI_class_list:            # plt.figure(figsize=(12, 6))            df_ELI = df[df['ELI_class'] == ELI_class]            mean_list = []            err_list = []            for key in key_list:                vals = df_ELI[key].tolist()                mean = np.nanmean(vals)                std = np.nanstd(vals) / 8                mean_list.append(mean)                err_list.append(std)            x = range(len(key_list))            x = np.array(x)            # plt.errorbar(x+flag*0.2,mean_list,yerr=err_list,label=ELI_class)            plt.errorbar(x+flag*0.2,mean_list,yerr=err_list,label=ELI_class)            plt.xticks(range(len(key_list)),key_list)        plt.legend()        plt.show()    def spatial_two_mode_ratio(self,df):        pix_list = T.get_df_unique_val_list(df,'pix')        # print(len(pix_list))        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df,'pix')        spatial_dict = {}        for pix in tqdm(pix_list):            df_pix = df_group_dict[pix]            df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']            df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']            if len(df_hot) == 0 or len(df_normal) == 0:                continue            # NDVI_progress = row['NDVI_progress'].tolist()            # NDVI_progress = np.array(NDVI_progress)            # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            # drought_year_NDVI = NDVI_progress_reshape[1]            NDVI_progress_hot = df_hot['NDVI_progress'].tolist()            NDVI_progress_normal = df_normal['NDVI_progress'].tolist()            mean_hot = np.nanmean(NDVI_progress_hot,axis=0)            mean_normal = np.nanmean(NDVI_progress_normal,axis=0)            mean_hot_reshape = np.array(mean_hot).reshape(-1,6)            mean_normal_reshape = np.array(mean_normal).reshape(-1,6)            mean_hot_drought_year = mean_hot_reshape[1]            mean_normal_drought_year = mean_normal_reshape[1]            mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)            Compensation_num = 0            for i,row in df_hot.iterrows():                NDVI_progress_hot_i = row['NDVI_progress'].tolist()                mean_hot_reshape_i = np.array(NDVI_progress_hot_i).reshape(-1, 6)                drought_year_NDVI_i = mean_hot_reshape_i[1]                mean_drought_year_NDVI_i = np.nanmean(drought_year_NDVI_i)                delta = mean_drought_year_NDVI_i - mean_normal_drought_NDVI                if delta > 0:                    mode = 'Compensation'                    mode_num = 1                elif delta < 0:                    mode = 'Exacerbation'                    mode_num = -1                else:                    mode = 'other'                    mode_num = 0                if mode_num == 1:                    Compensation_num += 1            ratio = Compensation_num / len(df_hot)            spatial_dict[pix] = ratio        arr = DIC_and_TIF().pix_dic_to_spatial_arr(spatial_dict)        plt.imshow(arr,vmin=0,vmax=1,cmap='RdBu',interpolation='nearest')        plt.colorbar()        DIC_and_TIF().plot_back_ground_arr(global_land_tif)        plt.show()    def ELI_gradient(self,df):        pix_list = T.get_df_unique_val_list(df, 'pix')        # print(len(pix_list))        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df, 'pix')        spatial_dict = {}        for pix in tqdm(pix_list):            df_pix = df_group_dict[pix]            df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']            df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']            if len(df_hot) == 0 or len(df_normal) == 0:                continue            ELI = df_pix['ELI'].tolist()[0]            aridity_index = df_pix['aridity_index'].tolist()[0]            # NDVI_progress = row['NDVI_progress'].tolist()            # NDVI_progress = np.array(NDVI_progress)            # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)            # drought_year_NDVI = NDVI_progress_reshape[1]            NDVI_progress_hot = df_hot['NDVI_progress'].tolist()            NDVI_progress_normal = df_normal['NDVI_progress'].tolist()            mean_hot = np.nanmean(NDVI_progress_hot, axis=0)            mean_normal = np.nanmean(NDVI_progress_normal, axis=0)            mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)            mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)            mean_hot_drought_year = mean_hot_reshape[1]            mean_normal_drought_year = mean_normal_reshape[1]            mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)            mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)            delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI            # result_dict = {'ELI': ELI, 'delta': delta}            result_dict = {'ELI': aridity_index, 'delta': delta}            spatial_dict[pix] = result_dict        df = T.dic_to_df(spatial_dict,'pix')        df = df[df['ELI']<3]        x = df['ELI'].tolist()        y = df['delta'].tolist()        # KDE_plot().plot_scatter_hex(x,y,xlim=(-1,1),ylim=(-1,1))        a, b, r, p = KDE_plot().plot_scatter(x,y,plot_fit_line=True,s=1)        print(a,b,r,p)        plt.show()    def ELI_gradient_ratio(self,df):        outdir = join(self.this_class_png,'ELI_gradient_ratio')        T.mk_dir(outdir)        pix_list = T.get_df_unique_val_list(df, 'pix')        # print(len(pix_list))        ELI_list = global_ELI_class_list        drought_type_list = global_drought_type_list        df_group_dict = T.df_groupby(df, 'pix')        drought_year = range(1,5)        for drought_year_i in drought_year:            spatial_dict = {}            for pix in tqdm(pix_list):                df_pix = df_group_dict[pix]                df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                if len(df_hot) == 0 or len(df_normal) == 0:                    continue                ELI = df_pix['ELI'].tolist()[0]                aridity_index = df_pix['aridity_index'].tolist()[0]                # NDVI_progress = row['NDVI_progress'].tolist()                # NDVI_progress = np.array(NDVI_progress)                # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                # drought_year_NDVI = NDVI_progress_reshape[1]                NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                mean_hot = np.nanmean(NDVI_progress_hot, axis=0)                mean_normal = np.nanmean(NDVI_progress_normal, axis=0)                mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)                mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)                mean_hot_drought_year = mean_hot_reshape[1:drought_year_i+1]                mean_normal_drought_year = mean_normal_reshape[1:drought_year_i+1]                mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                # result_dict = {'ELI': ELI, 'delta': delta}                result_dict = {'ELI': aridity_index, 'delta': delta}                spatial_dict[pix] = result_dict            df = T.dic_to_df(spatial_dict,'pix')            df = df[df['ELI']<3]            ELI_bins = np.arange(0.1,3,0.2)            df_group,bins_list_str = T.df_bin(df,'ELI',ELI_bins)            x = []            y = []            for name,df_group_i in df_group:                x_i = name[0].left                vals = df_group_i['delta'].tolist()                # mean = np.nanmean(vals)                vals = np.array(vals)                positive_vals_count = len(vals[vals>0])                ratio = positive_vals_count/len(vals)                x.append(x_i)                y.append(ratio)            y_smooth = SMOOTH().smooth_convolve(y,window_len=5)            # y_smooth = y            plt.plot(x,y_smooth,label=drought_year_i)        plt.legend()        outf = join(outdir,'ELI_gradient_ratio_5.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()        # x = df['ELI'].tolist()        # y = df['delta'].tolist()        # # KDE_plot().plot_scatter_hex(x,y,xlim=(-1,1),ylim=(-1,1))        # a, b, r, p = KDE_plot().plot_scatter(x,y,plot_fit_line=True,s=1)        # print(a,b,r,p)        # plt.show()    def two_region_trajectory(self,df):        outdir = join(self.this_class_png,'two_region_trajectory')        T.mk_dir(outdir)        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        for ELI in ELI_class_list:            plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))            for drt in drought_type_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI_drt = df_ELI[df_ELI['drought_type']==drt]                NDVI = df_ELI_drt['NDVI_progress'].tolist()                NDVI = np.array(NDVI)                mean = np.nanmean(NDVI,axis=0)                std = np.nanstd(NDVI,axis=0) / 8                plt.plot(mean,label=drt)                plt.fill_between(np.arange(len(mean)),mean-std,mean+std,alpha=0.3)                plt.xticks(np.arange(len(mean))[::6],np.arange(-1,5))            outf = join(outdir,'{}.pdf'.format(ELI))            # plt.legend()            plt.savefig(outf)            plt.close()        T.open_path_and_file(outdir)        pass    def Drought_year_spatial_tif(self,df):        outdir = join(self.this_class_tif,'Drought_year_spatial_tif')        T.mk_dir(outdir)        drought_type_list = global_drought_type_list        for drt in drought_type_list:            df_drt = df[df['drought_type']==drt]            df_pix = T.df_groupby(df_drt,'pix')            spatial_dict = {}            for pix in tqdm(df_pix,desc=drt):                df_pix_i = df_pix[pix]                NDVI_progress = df_pix_i['NDVI_progress'].tolist()                mean_progress = np.nanmean(NDVI_progress, axis=0)                mean_progress_reshape = np.array(mean_progress).reshape(-1, 6)                mean_progress_reshape_drought_year = mean_progress_reshape[1]                mean_drought_year_NDVI = np.nanmean(mean_progress_reshape_drought_year)                spatial_dict[pix] = mean_drought_year_NDVI            outf = join(outdir,'{}.tif'.format(drt))            DIC_and_TIF().pix_dic_to_tif(spatial_dict,outf)    def plot_Drought_year_spatial_tif(self):        fdir = join(self.this_class_tif,'Drought_year_spatial_tif')        outdir = join(self.this_class_png,'Drought_year_spatial_tif')        T.mk_dir(outdir)        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            outpath = join(outdir,f'{f.replace(".tif","")}.png')            Plot().plot_ortho(fpath,vmin=-1,vmax=1,cmap='RdBu')            plt.savefig(outpath,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def pdf_Drought_year_spatial_tif(self):        delta_fpath = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        fdir = join(self.this_class_tif,'Drought_year_spatial_tif')        outdir = join(self.this_class_png,'pdf_Drought_year_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        for f in T.listdir(fdir):            fpath = join(fdir,f)            if not f.endswith('.tif'):                continue            key = f.replace('.tif','')            spatial_dic = DIC_and_TIF().spatial_tif_to_dic(fpath)            spatial_dics[key] = spatial_dic        spatial_dics['delta'] = DIC_and_TIF().spatial_tif_to_dic(delta_fpath)        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        ELI_class_list = global_ELI_class_list        for key in spatial_dics:            plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))            for ELI in ELI_class_list:                df_ELI = df[df['ELI_class']==ELI]                df_ELI = df_ELI[df_ELI[key]>-2]                df_ELI = df_ELI[df_ELI[key]<2]                vals = df_ELI[key].tolist()                x1, y1 = Plot().plot_hist_smooth(vals,bins=100,alpha=0)                plt.plot(x1,y1,label=ELI)            plt.legend()            plt.title(key)            outf = join(outdir,'{}.pdf'.format(key))            plt.savefig(outf)            plt.close()        T.open_path_and_file(outdir)        # plt.show()    def AI_gradient_Drought_year_spatial_tif(self):        delta_fpath = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        outdir = join(self.this_class_png,'AI_gradient_Drought_year_spatial_tif')        T.mk_dir(outdir)        spatial_dics = {}        spatial_dics['delta'] = DIC_and_TIF().spatial_tif_to_dic(delta_fpath)        df = T.spatial_dics_to_df(spatial_dics)        df = Dataframe_func(df).df        print('-----')        # ELI_class_list = global_ELI_class_list        key = 'delta'        plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))        AI_bins = np.arange(0.1, 3, 0.1)        df_group,bins_list_str = T.df_bin(df, 'aridity_index', AI_bins)        x_list = []        y_list = []        error_list = []        for name,df_group_i in df_group:            vals = df_group_i[key].tolist()            mean = np.nanmean(vals)            error = np.nanstd(vals) / 4            x = name[0].left            x_list.append(x)            y_list.append(mean)            error_list.append(error)        # plt.plot(x_list,y_list)        plt.errorbar(x_list,y_list,yerr=error_list)        # plt.show()        outf = join(outdir,'{}.pdf'.format(key))        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)    def rs_rt_area_ratio_bar(self,df):        outdir = join(self.this_class_png, 'rs_rt_area_ratio_bar')        T.mk_dir(outdir)        df = Load_dataframe()        threshold_list = [-np.inf,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,np.inf]        # threshold_list = [-np.inf,-0.2,-0.1,-0.05]        threshold_list = np.array(threshold_list)        threshold_list = threshold_list + 1        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        bottom = 0        for i in range(len(threshold_list)):            if i + 1 == len(threshold_list):                break            x_list = []            y_list = []            for ELI_class in ELI_class_list:                for drt in drought_type_list:                    df_ELI = df[df['ELI_class'] == ELI_class]                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_drt_copy = df_drt.copy()                    df_drt_copy = df_drt_copy.dropna(subset=['ELI', 'rt'], how='any')                    vals = df_drt_copy['rt']                    vals = np.array(vals)                    threshold_left = threshold_list[i]                    threshold_right = threshold_list[i+1]                    vals = vals[vals < threshold_right]                    vals = vals[vals > threshold_left]                    # vals = vals[vals < (1 - threshold)]                    # vals = vals[vals > (1 + threshold)]                    ratio = len(vals) / len(df_drt_copy) * 100                    x_list.append(f'{ELI_class}_{drt}')                    y_list.append(ratio)            y_list = np.array(y_list)            # y_list = y_list + bottom            plt.bar(x_list,y_list,bottom=bottom,label=threshold_list[i+1])            bottom = bottom + y_list        plt.legend()        plt.xticks(rotation=30)        plt.tight_layout()        plt.show()        # outf = join(outdir,'rs_rt_area_ratio_bar.pdf')        # plt.savefig(outf)        # plt.close()        # T.open_path_and_file(outdir)        # plt.show()    def delta_area_ratio_bar(self):        outdir = join(self.this_class_png, 'delta_area_ratio_bar')        T.mk_dir(outdir)        tif = join(self.this_class_tif,'spatial_two_mode_magnitude/spatial_two_mode_magnitude_1.tif')        spatial_dict = DIC_and_TIF().spatial_tif_to_dic(tif)        df = T.spatial_dics_to_df({'delta':spatial_dict})        df = Dataframe_func(df).df        # threshold_list = [-np.inf,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,np.inf]        # threshold_list = [-np.inf,-1,-0.8,-0.6,-0.4,-0.2,-0.1,-0.05,0,0.05,0.1,0.2,0.4,0.6,0.8,1,np.inf]        threshold_list = [-np.inf,-0.5,-0.25,0,0.25,0.5,np.inf]        color_list = T.gen_colors(len(threshold_list))        # threshold_list = [-np.inf,-0.2,-0.1,-0.05]        # threshold_list = np.array(threshold_list)        # threshold_list = threshold_list + 1        ELI_class_list = global_ELI_class_list[::-1]        bottom = 0        y_list_all = []        for i in range(len(threshold_list)):            if i + 1 == len(threshold_list):                break            x_list = []            y_list = []            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                df_ELI_copy = df_ELI.copy()                df_ELI_copy = df_ELI_copy.dropna(subset=['ELI', 'delta'], how='any')                vals = df_ELI_copy['delta']                vals = np.array(vals)                threshold_left = threshold_list[i]                threshold_right = threshold_list[i+1]                vals = vals[vals < threshold_right]                vals = vals[vals > threshold_left]                # vals = vals[vals < (1 - threshold)]                # vals = vals[vals > (1 + threshold)]                ratio = len(vals) / len(df_ELI_copy) * 100                x_list.append(f'{ELI_class}')                y_list.append(ratio)            y_list = np.array(y_list)            y_list_all.append(y_list)            # y_list = y_list + bottom            plt.bar(x_list,y_list,bottom=bottom,label=f'{threshold_list[i]}~{threshold_list[i+1]}',color=color_list[i])            bottom = bottom + y_list        plt.legend()        plt.xticks(rotation=0)        plt.tight_layout()        y_position1 = 0        y_position2 = 0        for yi in range(len(y_list_all)):            plt.text(0, y_position1, f'{y_list_all[yi][0]:.2f}', ha='center', va='bottom', fontsize=8)            plt.text(1, y_position2, f'{y_list_all[yi][1]:.2f}', ha='center', va='bottom', fontsize=8)            y_position1 = y_position1 + y_list_all[yi][0]            y_position2 = y_position2 + y_list_all[yi][1]        outf = join(outdir,'delta_area_ratio_bar.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()class Drought_timing:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Drought_timing', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Drought_timing.df')        pass    def run(self):        # df = Over_shoot_phenology().add_NDVI_process()        df = self.__gen_df_init()        # Dataframe        # df = self.add_drought_season(df)        # T.save_df(df, self.dff)        # T.df_to_excel(df, self.dff)        # statistic        # self.timing_trajectory(df)        # self.delta_season_tif(df)        # self.delta_season_bar(df)        self.delta_season_bar_ANOVA(df)        # self.delta_season_bar_error_bar(df)        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def add_drought_season(self,df):        season_list = []        for i, row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['drought_season'] = season_list        return df    def timing_trajectory(self,df):        outdir = join(self.this_class_png, 'timing_trajectory')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        season_list = []        for i,row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['drought_season'] = season_list        for timing in timing_list:            for ELI_class in ELI_class_list:                plt.figure(figsize=(9*centimeter_factor,6*centimeter_factor))                for drt in drought_type_list:                    df_ELI = df[df['ELI_class'] == ELI_class]                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process = np.array(NDVI_process)                    NDVI_process_mean = np.nanmean(NDVI_process,axis=0)                    NDVI_process_mean = NDVI_process_mean[:3*6]                    plt.plot(NDVI_process_mean,label=f'{drt}')                plt.legend()                plt.title(f'{timing}\n{ELI_class}')                plt.ylim(-1.1,0.5)                plt.grid()                plt.xticks(list(range(len(NDVI_process_mean)))[::6],[-1,0,1])                fname = f'{timing}_{ELI_class}.pdf'                outf = join(outdir,fname)                plt.savefig(outf)                plt.close()                # plt.show()        T.open_path_and_file(outdir)        pass    def delta_season_tif(self,df):        outdir = join(self.this_class_tif, 'delta_season')        T.mk_dir(outdir)        drought_season_list = global_drought_season_list        for season in drought_season_list:            df_season = df[df['drought_season'] == season]            # print(df_season)            pix_list = T.get_df_unique_val_list(df_season, 'pix')            # print(len(pix_list))            drought_type_list = global_drought_type_list            # drought_year_list = range(1, 5)            drought_year_list = [1]            for drought_year_i in drought_year_list:                df_group_dict = T.df_groupby(df_season, 'pix')                spatial_dict = {}                for pix in tqdm(pix_list):                    df_pix = df_group_dict[pix]                    df_hot = df_pix[df_pix['drought_type'] == 'hot-drought']                    df_normal = df_pix[df_pix['drought_type'] == 'normal-drought']                    if len(df_hot) == 0 or len(df_normal) == 0:                        continue                    # NDVI_progress = row['NDVI_progress'].tolist()                    # NDVI_progress = np.array(NDVI_progress)                    # NDVI_progress_reshape = NDVI_progress.reshape(-1, 6)                    # drought_year_NDVI = NDVI_progress_reshape[1]                    NDVI_progress_hot = df_hot['NDVI_progress'].tolist()                    NDVI_progress_normal = df_normal['NDVI_progress'].tolist()                    mean_hot = np.nanmean(NDVI_progress_hot, axis=0)                    mean_normal = np.nanmean(NDVI_progress_normal, axis=0)                    mean_hot_reshape = np.array(mean_hot).reshape(-1, 6)                    mean_normal_reshape = np.array(mean_normal).reshape(-1, 6)                    mean_hot_drought_year = mean_hot_reshape[1:drought_year_i + 1]                    mean_normal_drought_year = mean_normal_reshape[1:drought_year_i + 1]                    mean_normal_drought_NDVI = np.nanmean(mean_normal_drought_year)                    mean_hot_drought_NDVI = np.nanmean(mean_hot_drought_year)                    delta = mean_hot_drought_NDVI - mean_normal_drought_NDVI                    spatial_dict[pix] = delta                outf = join(outdir, f'{season}_{drought_year_i}.tif')                DIC_and_TIF().pix_dic_to_tif(spatial_dict, outf)        T.open_path_and_file(outdir)    def delta_season_bar(self,df):        outdir = join(self.this_class_png, 'delta_season_bar')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        drought_year_index = 1        # drought_year_index = 2        plt.figure(figsize=(9 * centimeter_factor, 6 * centimeter_factor))        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process = np.array(NDVI_process)                    NDVI_process_mean = np.nanmean(NDVI_process, axis=0)                    NDVI_process_mean_reshape = NDVI_process_mean.reshape(-1, 6)                    drought_year_NDVI_process = NDVI_process_mean_reshape[drought_year_index]                    drought_year_NDVI_process_mean = np.nanmean(drought_year_NDVI_process)                    result_dict_i[drt] = drought_year_NDVI_process_mean                # delta = result_dict_i['hot-drought'] - result_dict_i['normal-drought']                delta = result_dict_i['normal-drought'] - result_dict_i['hot-drought']                key = f'{timing}_{ELI_class}'                result_dict[key] = delta        print(result_dict)        keys = list(result_dict.keys())        values = [result_dict[key] for key in keys]        plt.bar(keys, values, color='grey', width=0.4)        plt.plot(keys,[0]*len(keys),'k--',linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-0.5, 0.5)        # plt.grid()        plt.tight_layout()        outf = join(outdir, f'delta_season_bar_{drought_year_index}.pdf')        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)        # plt.show()    def delta_season_bar_ANOVA(self,df):        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        # drought_year_index = 1        drought_year_index = 2        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    NDVI_process_i_reshape_drought_year_mean_list = []                    for i in range(len(NDVI_process)):                        NDVI_process_i = NDVI_process[i]                        NDVI_process_i_reshape = np.array(NDVI_process_i).reshape(-1, 6)                        NDVI_process_i_reshape_drought_year = NDVI_process_i_reshape[drought_year_index]                        NDVI_process_i_reshape_drought_year_mean = np.nanmean(NDVI_process_i_reshape_drought_year)                        NDVI_process_i_reshape_drought_year_mean_list.append(NDVI_process_i_reshape_drought_year_mean)                    NDVI_process_i_reshape_drought_year_mean_list = np.array(NDVI_process_i_reshape_drought_year_mean_list)                    NDVI_process_i_reshape_drought_year_mean_list = T.remove_np_nan(NDVI_process_i_reshape_drought_year_mean_list)                    key = f'{timing}_{ELI_class}_{drt}'                    result_dict[key] = NDVI_process_i_reshape_drought_year_mean_list                    # print(NDVI_process_i_reshape_drought_year_mean_list)                    # exit()        # print(result_dict)        # exit()        # 'normal-drought', 'hot-drought'        for timing in timing_list:            for ELI_class in ELI_class_list:                key1 = f'{timing}_{ELI_class}_normal-drought'                key2 = f'{timing}_{ELI_class}_hot-drought'                f,p = f_oneway(result_dict[key1],result_dict[key2])                print(f'{key1} vs {key2} f={f},p={p}')    def delta_season_bar_error_bar(self,df):        outdir = join(self.this_class_png, 'delta_season_bar_error_bar')        T.mk_dir(outdir)        timing_list = global_drought_season_list        ELI_class_list = global_ELI_class_list        drought_type_list = global_drought_type_list        result_dict = {}        result_dict_err = {}        # drought_year_index = 1        drought_year_index = 2        plt.figure(figsize=(9 * centimeter_factor, 6 * centimeter_factor))        for timing in timing_list:            for ELI_class in ELI_class_list:                df_ELI = df[df['ELI_class'] == ELI_class]                result_dict_i = {}                for drt in drought_type_list:                    df_drt = df_ELI[df_ELI['drought_type'] == drt]                    df_timing = df_drt[df_drt['drought_season'] == timing]                    NDVI_process = df_timing['NDVI_progress'].tolist()                    mean_list = []                    for NDVI_process_i in NDVI_process:                        NDVI_process_i_reshape = np.array(NDVI_process_i).reshape(-1, 6)                        NDVI_process_i_reshape_drought_year = NDVI_process_i_reshape[drought_year_index]                        NDVI_process_i_reshape_drought_year_mean = np.nanmean(NDVI_process_i_reshape_drought_year)                        mean_list.append(NDVI_process_i_reshape_drought_year_mean)                    result_dict_i[drt] = mean_list                vals_hotdrought = result_dict_i['hot-drought']                vals_normaldrought = result_dict_i['normal-drought']                delta_list = []                for i in tqdm(range(10000),desc=f'{timing}_{ELI_class}'):                    vals_choice_hot_drought = np.random.choice(vals_hotdrought, int(len(vals_hotdrought)*0.5))                    vals_choice_normal_drought = np.random.choice(vals_normaldrought, int(len(vals_normaldrought)*0.5))                    vals_choice_hot_drought_mean = np.nanmean(vals_choice_hot_drought)                    vals_choice_normal_drought_mean = np.nanmean(vals_choice_normal_drought)                    delta_i = vals_choice_hot_drought_mean - vals_choice_normal_drought_mean                    delta_list.append(delta_i)                delta_mean = np.nanmean(delta_list)                delta_std = np.nanstd(delta_list)                key = f'{timing}_{ELI_class}'                result_dict[key] = delta_mean                result_dict_err[key] = delta_std        keys = list(result_dict.keys())        values = [result_dict[key] for key in keys]        values_err = [result_dict_err[key] for key in keys]        plt.bar(keys, values, color='grey', width=0.4, yerr=values_err, capsize=2)        plt.plot(keys, [0] * len(keys), 'k--', linewidth=0.5)        plt.xticks(rotation=90)        plt.ylim(-0.5, 0.5)        # plt.grid()        plt.tight_layout()        outf = join(outdir, f'delta_season_bar_{drought_year_index}.pdf')        # plt.show()        plt.savefig(outf)        plt.close()        T.open_path_and_file(outdir)class Random_Forests:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Random_Forests', result_root_this_script, mode=2)        self.dff = join(self.this_class_arr, 'Dataframe.df')        pass    def run(self):        # df = Over_shoot_phenology().add_NDVI_process()        df = self.__gen_df_init()        # df = self.gen_Y(df)        # df = self.add_drought_season(df)        df = self.add_SOS(df)        df = self.add_EOS(df)        # df = self.add_seasonal_Temperature(df)        # df = self.add_seasonal_Precipitation(df)        # df = self.add_seasonal_SPI(df)        T.save_df(df, self.dff)        T.df_to_excel(df, self.dff)        ##############################        # self.random_forest_train(df)        # self.plot_rf_result()        pass    def __gen_df_init(self):        if not os.path.isfile(self.dff):            df = pd.DataFrame()            T.save_df(df,self.dff)            return df        else:            df,dff = self.__load_df()            return df    def __load_df(self):        dff = self.dff        df = T.load_df(dff)        T.print_head_n(df)        print('len(df):',len(df))        return df,dff    def gen_Y(self,df):        Y_list = []        drought_year_index = 1        for i,row in tqdm(df.iterrows(),total=len(df),desc='gen_Y'):            NDVI_progress = row['NDVI_progress']            NDVI_progress_reshape = np.array(NDVI_progress).reshape(-1,6)            NDVI_progress_reshape_drought_year = NDVI_progress_reshape[drought_year_index]            NDVI_progress_reshape_drought_year_mean = np.nanmean(NDVI_progress_reshape_drought_year)            Y_list.append(NDVI_progress_reshape_drought_year_mean)        df['Y'] = Y_list        return df    def add_drought_season(self,df):        season_list = []        for i, row in df.iterrows():            mon = row['drought_mon']            season = global_season_mon_dict[mon]            season_list.append(season)        df['season'] = season_list        return df    def phenology_anomaly_dict(self,phenology_dict):        vals = list(phenology_dict.values())        mean = np.nanmean(vals)        phenology_anomaly_dict = {}        for year in phenology_dict:            val = phenology_dict[year]            anomaly = val - mean            phenology_anomaly_dict[year] = anomaly        return phenology_anomaly_dict    def add_SOS(self,df):        import analysis        pheno_str = 'early_start'        fpath = join(analysis.Phenology().this_class_arr, 'phenology_df/phenology_df.df')        phenology_df = T.load_df(fpath)        cols = list(phenology_df.columns)        print(cols)        pheno_spatial_dict = {}        for i, row in phenology_df.iterrows():            pix = row['pix']            early_start = row[pheno_str]            early_start_dict = dict(early_start)            phenology_anomaly_dict = self.phenology_anomaly_dict(early_start_dict)            pheno_spatial_dict[pix] = phenology_anomaly_dict        pheno_val_list = []        for i,row in df.iterrows():            pix = row['pix']            year = row['drought_year']            if not pix in pheno_spatial_dict:                pheno_val_list.append(np.nan)                continue            if not year in pheno_spatial_dict[pix]:                pheno_val_list.append(np.nan)                continue            pheno_val = pheno_spatial_dict[pix][year]            pheno_val_list.append(pheno_val)        df['SOS'] = pheno_val_list        return df    def add_EOS(self,df):        import analysis        pheno_str = 'late_end'        fpath = join(analysis.Phenology().this_class_arr, 'phenology_df/phenology_df.df')        phenology_df = T.load_df(fpath)        cols = list(phenology_df.columns)        print(cols)        pheno_spatial_dict = {}        for i, row in phenology_df.iterrows():            pix = row['pix']            early_start = row[pheno_str]            early_start_dict = dict(early_start)            phenology_anomaly_dict = self.phenology_anomaly_dict(early_start_dict)            pheno_spatial_dict[pix] = phenology_anomaly_dict        pheno_val_list = []        for i,row in df.iterrows():            pix = row['pix']            year = row['drought_year']            if not pix in pheno_spatial_dict:                pheno_val_list.append(np.nan)                continue            if not year in pheno_spatial_dict[pix]:                pheno_val_list.append(np.nan)                continue            pheno_val = pheno_spatial_dict[pix][year]            pheno_val_list.append(pheno_val)        df['EOS'] = pheno_val_list        return df    def add_seasonal_Temperature(self,df):        # seasonal temperature        temperature_spatial_dict = Meta_information().load_data('Temperature-anomaly_detrend')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i,row in tqdm(df.iterrows(),total=len(df),desc='add_seasonal_Temperature'):                pix = row['pix']                drought_year = row['drought_year']                vals = temperature_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1,12)                vals_reshape_dict = dict(zip(year_list,vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['Temperature-anomaly_'+season] = season_val_list        return df    def add_seasonal_Precipitation(self,df):        # seasonal precipitation        precip_spatial_dict = Meta_information().load_data('Precipitation-anomaly_detrend')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i, row in tqdm(df.iterrows(), total=len(df), desc='add_seasonal_Precipitation'):                pix = row['pix']                drought_year = row['drought_year']                vals = precip_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1, 12)                vals_reshape_dict = dict(zip(year_list, vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['Precipitation-anomaly_' + season] = season_val_list        return df        pass    def add_seasonal_SPI(self,df):        # seasonal SPI        precip_spatial_dict = Meta_information().load_data('SPI')        season_mon_dict = global_drought_season_dict        year_list = global_year_range_list        for season in season_mon_dict:            season_mon_list = season_mon_dict[season]            season_mon_index_list = np.array(season_mon_list) - 1            season_val_list = []            for i, row in tqdm(df.iterrows(), total=len(df), desc='add_seasonal_SPI'):                pix = row['pix']                drought_year = row['drought_year']                vals = precip_spatial_dict[pix]                vals_reshape = np.array(vals).reshape(-1, 12)                vals_reshape_dict = dict(zip(year_list, vals_reshape))                drought_year_vals = vals_reshape_dict[drought_year]                seasonal_vals = drought_year_vals[season_mon_index_list]                seasonal_vals_mean = np.nanmean(seasonal_vals)                season_val_list.append(seasonal_vals_mean)            df['SPI_' + season] = season_val_list        return df    def random_forest_train(self,df):        outdir = join(self.this_class_arr,'random_forest')        T.mk_dir(outdir,force=True)        # 'early', 'mid', 'late'        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early',],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid', 'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late',]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train',drought_type,ELI_class,season)                    df_drt = df[df['drought_type']==drought_type]                    df_ELI = df_drt[df_drt['ELI_class']==ELI_class]                    df_season = df_ELI[df_ELI['season']==season]                    Y = df_season['Y'].tolist()                    variable_list = variable_list_dict[season]                    df_new = df_season[variable_list]                    df_new['Y'] = Y                    df_new = df_new.dropna()                    X = df_new[variable_list]                    Y_new = df_new['Y']                    # T.print_head_n(df_new)                    clf, importances_dic, mse, r_model, score, Y_test, y_pred = self._random_forest_train(X,Y_new,variable_list)                    outf = join(outdir,f'{drought_type}_{ELI_class}_{season}.npy')                    result_dict = {                        'importances_dic':importances_dic,                        'mse':mse,                        'r_model':r_model,                        'score':score,                        'Y_test':Y_test,                        'y_pred':y_pred                    }                    T.save_npy(result_dict,outf)    def _random_forest_train(self, X, Y, variable_list):        '''        :param X: a dataframe of x variables        :param Y: a dataframe of y variable        :param variable_list: a list of x variables        :return: details of the random forest model and the importance of each variable        '''        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1) # split the data into training and testing        clf = RandomForestRegressor(n_estimators=100, n_jobs=7) # build a random forest model        clf.fit(X_train, Y_train) # train the model        result = permutation_importance(clf, X_train, Y_train, scoring=None,                                        n_repeats=50, random_state=1,                                        n_jobs=7) # calculate the importance of each variable using permutation importance        importances = result.importances_mean # get the importance of each variable        importances_dic = dict(zip(variable_list, importances)) # put the importance of each variable into a dictionary        labels = []        importance = []        for key in variable_list:            labels.append(key)            importance.append(importances_dic[key])        y_pred = clf.predict(X_test) # predict the y variable using the testing data        r_model = stats.pearsonr(Y_test, y_pred)[0] # calculate the correlation between the predicted y variable and the actual y variable        mse = sklearn.metrics.mean_squared_error(Y_test, y_pred) # calculate the mean squared error        score = clf.score(X_test, Y_test) # calculate the R^2        return clf, importances_dic, mse, r_model, score, Y_test, y_pred    def plot_rf_result(self):        fdir = join(self.this_class_arr,'random_forest')        outdir = join(self.this_class_png,'random_forest')        T.mk_dir(outdir,force=True)        for f in T.listdir(fdir):            fpath = join(fdir,f)            result_dict = T.load_npy(fpath)            importances_dic = result_dict['importances_dic']            r_model = result_dict['r_model']            score = result_dict['score']            title = f'{f}\nR^2={score}, r={r_model}'            x = importances_dic.keys()            y = [importances_dic[key] for key in x]            plt.figure(figsize=(10,5))            plt.bar(x,y)            plt.title(title)            outf = join(outdir,f'{f}.pdf')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)class Partial_Dependence_Plots:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Partial_Dependence_Plots', result_root_this_script, mode=2)        self.dff = Random_Forests().dff        pass    def run(self):        # self.run_partial_dependence_plots()        self.plot_run_partial_dependence_plots()        pass    def run_partial_dependence_plots(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_arr,'partial_dependence_plots')        T.mk_dir(outdir,force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    result_dic = self.partial_dependence_plots(df_season, variable_list_dict[season], 'Y')                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.npy')                    T.save_npy(result_dic, outf)    def plot_run_partial_dependence_plots(self):        fdir = join(self.this_class_arr,'partial_dependence_plots')        outdir = join(self.this_class_png,'partial_dependence_plots')        T.mk_dir(outdir,force=True)        for f in T.listdir(fdir):            fpath = join(fdir,f)            result_dict = T.load_npy(fpath)            plt.figure(figsize=(5, 7))            flag = 1            for key in result_dict:                result_dict_i = result_dict[key]                x = result_dict_i['x']                y = result_dict_i['y']                y_std = result_dict_i['y_std']                plt.subplot(3,2,flag)                flag += 1                plt.plot(x,y,label=key)                plt.fill_between(x,y-y_std,y+y_std,alpha=0.5)                plt.legend()                plt.ylim(-1.5,1)            plt.suptitle(f)            plt.tight_layout()            outf = join(outdir,f'{f}.pdf')            plt.savefig(outf,dpi=300)            plt.close()        T.open_path_and_file(outdir)    def partial_dependence_plots(self,df,x_vars,y_var):        '''        :param df: a dataframe        :param x_vars: a list of x variables        :param y_var: a y variable        :return:        '''        all_vars = copy.copy(x_vars) # copy the x variables        all_vars.append(y_var) # add the y variable to the list        all_vars_df = df[all_vars] # get the dataframe with the x variables and the y variable        all_vars_df = all_vars_df.dropna() # drop rows with missing values        X = all_vars_df[x_vars]        Y = all_vars_df[y_var]        model, r2 = self.__train_model(X, Y) # train a Random Forests model        flag = 0        result_dic = {}        for var in x_vars:            flag += 1            df_PDP = self.__get_PDPvalues(var, X, model) # get the partial dependence plot values            ppx = df_PDP[var]            ppy = df_PDP['PDs']            ppy_std = df_PDP['PDs_std']            result_dic[var] = {'x':ppx,                               'y':ppy,                               'y_std':ppy_std,                               'r2':r2}        return result_dic    def __train_model(self,X,y):        '''        :param X: a dataframe of x variables        :param y: a dataframe of y variable        :return: a random forest model and the R^2        '''        X_train, X_test, y_train, y_test = train_test_split(            X, y, random_state=1, test_size=0.2) # split the data into training and testing        rf = RandomForestRegressor(n_estimators=100, random_state=42,n_jobs=4) # build a random forest model        rf.fit(X_train, y_train) # train the model        r2 = rf.score(X_test,y_test)        return rf,r2    def __get_PDPvalues(self, col_name, data, model, grid_resolution=50):        '''        :param col_name: a variable        :param data: a dataframe of x variables        :param model: a random forest model        :param grid_resolution: the number of points in the partial dependence plot        :return: a dataframe of the partial dependence plot values        '''        Xnew = data.copy()        sequence = np.linspace(np.min(data[col_name]), np.max(data[col_name]), grid_resolution) # create a sequence of values        Y_pdp = []        Y_pdp_std = []        for each in sequence:            Xnew[col_name] = each            Y_temp = model.predict(Xnew)            Y_pdp.append(np.mean(Y_temp))            Y_pdp_std.append(np.std(Y_temp))        return pd.DataFrame({col_name: sequence, 'PDs': Y_pdp, 'PDs_std': Y_pdp_std})class Single_Variable_Analysis:    def __init__(self):        self.this_class_arr, self.this_class_tif, self.this_class_png = \            T.mk_class_dir('Single_Variable_Analysis', result_root_this_script, mode=2)        self.dff = Random_Forests().dff        pass    def run(self):        # self.run_corr()        # self.plot_corr()        self.bin_plot()        pass    def run_corr(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_arr, 'correlation')        T.mk_dir(outdir, force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    variable_list = variable_list_dict[season]                    result_dic = {}                    for var_i in variable_list:                        x = df_season[var_i].values                        y = df_season['Y'].values                        r, p = T.nan_correlation(x, y)                        result_dic[var_i] = {'r': r, 'p': p}                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.npy')                    T.save_npy(result_dic, outf)        pass    def plot_corr(self):        fdir = join(self.this_class_arr, 'correlation')        for f in T.listdir(fdir):            fpath = join(fdir, f)            result_dic = T.load_npy(fpath)            # print(result_dic)            # exit()            plt.figure(figsize=(10, 5))            x_list = []            y_list = []            for x_i in result_dic:                x_list.append(x_i)                y = result_dic[x_i]['r']                y_list.append(y)            plt.bar(x_list, y_list)        plt.show()    def bin_plot(self):        dff = self.dff        df = T.load_df(dff)        outdir = join(self.this_class_png, 'bin_plot')        T.mk_dir(outdir, force=True)        variable_list_dict = {            'early': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'SPI_early', ],            'mid': ['SOS', 'Precipitation-anomaly_early', 'Temperature-anomaly_early', 'Precipitation-anomaly_mid',                    'Temperature-anomaly_mid'],            'late': ['EOS', 'Precipitation-anomaly_late', 'Temperature-anomaly_late', 'SPI_late', ]        }        bin_dict = {            'SOS': np.linspace(-25, 25, 21),            'EOS': np.linspace(-25, 25, 21),        }        print(df.columns.tolist())        drought_type_list = global_drought_type_list        ELI_class_list = global_ELI_class_list        for drought_type in drought_type_list:            for ELI_class in ELI_class_list:                for season in variable_list_dict:                    print('train', drought_type, ELI_class, season)                    df_drt = df[df['drought_type'] == drought_type]                    df_ELI = df_drt[df_drt['ELI_class'] == ELI_class]                    df_season = df_ELI[df_ELI['season'] == season]                    variable_list = variable_list_dict[season]                    result_dic = {}                    plt.figure(figsize=(5, 7))                    flag = 1                    for var_i in variable_list:                        bins = np.linspace(-3, 3, 21)                        if var_i in bin_dict:                            bins = bin_dict[var_i]                        df_group,bins_list_str = T.df_bin(df_season, var_i, bins)                        x_list = []                        y_list = []                        err_list = []                        for name,df_group_i in df_group:                            x = name[0].left                            vals = df_group_i['Y'].tolist()                            mean = np.nanmean(vals)                            x_list.append(x)                            y_list.append(mean)                            err,_,_ = T.uncertainty_err(vals)                            err_list.append(err)                        plt.subplot(3,2,flag)                        flag += 1                        plt.plot(x_list, y_list, label=var_i)                        plt.fill_between(x_list, np.array(y_list) - np.array(err_list),                                            np.array(y_list) + np.array(err_list), alpha=0.2)                        plt.legend()                        plt.ylim(-1.5, 1.5)                    plt.suptitle(f'{drought_type}_{ELI_class}_{season}')                    plt.tight_layout()                    outf = join(outdir, f'{drought_type}_{ELI_class}_{season}.pdf')                    plt.savefig(outf, dpi=300)                    plt.close()        T.open_path_and_file(outdir)def Load_dataframe():    dff = Dataframe().dff    df = T.load_df(dff)    return dfdef main():    # Dataframe().run()    # Hot_Normal_Rs_Rt().run()    # ELI_AI_gradient().run()    # Rt_Rs_change_overtime().run()    # Drought_events_process().run()    # Rt_Rs_relationship().run()    # Over_shoot_drought().run()    # Over_shoot_phenology().run()    # Compensation_Excerbation().run()    # Drought_timing().run()    # Random_Forests().run()    # Partial_Dependence_Plots().run()    Correlation_Analysis().run()    passif __name__ == '__main__':    main()